                            (n.inflate = function(e, t) {
                            		var n,
                            			a,
                            			r,
                            			A,
                            			l,
                            			o,
                            			R,
                            			v = 0,
                            			N = new m.Buf8(4),
                            			_ = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
                            		if (!e || !e.state || !e.output || (!e.input && 0 !== e.avail_in)) return f;
                            		var I = e.state;
                            		12 === I.mode && (I.mode = 13);
                            		var D = e.next_out,
                            			E = e.output,
                            			S = e.avail_out,
                            			G = e.next_in,
                            			T = e.input,
                            			U = e.avail_in,
                            			M = I.hold,
                            			V = I.bits,
                            			C = U,
                            			B = S,
                            			P = b;
                            		e: for (;;) switch (I.mode) {
                            			case y:
                            				if (0 === I.wrap) {
                            					I.mode = 13;
                            					break;
                            				}
                            				for (; 16 > V;) {
                            					if (0 === U) break e;
                            					U--, (M += T[G++] << V), (V += 8);
                            				}
                            				if (2 & I.wrap && 35615 === M) {
                            					(I.check = 0), (N[0] = 255 & M), (N[1] = (M >>> 8) & 255), (I.check = c(I.check, N, 2, 0)), (V = M = 0), (I.mode = 2);
                            					break;
                            				}
                            				if (((I.flags = 0), I.head && (I.head.done = !1), !(1 & I.wrap) || (((255 & M) << 8) + (M >> 8)) % 31)) {
                            					(e.msg = "incorrect header check"), (I.mode = 30);
                            					break;
                            				}
                            				if (8 != (15 & M)) {
                            					(e.msg = "unknown compression method"), (I.mode = 30);
                            					break;
                            				}
                            				if (((V -= 4), (o = 8 + (15 & (M >>>= 4))), 0 === I.wbits)) I.wbits = o;
                            				else if (o > I.wbits) {
                            					(e.msg = "invalid window size"), (I.mode = 30);
                            					break;
                            				}
                            				(I.dmax = 1 << o), (e.adler = I.check = 1), (I.mode = 512 & M ? 10 : 12), (V = M = 0);
                            				break;
                            			case 2:
                            				for (; 16 > V;) {
                            					if (0 === U) break e;
                            					U--, (M += T[G++] << V), (V += 8);
                            				}
                            				if (((I.flags = M), 8 != (255 & I.flags))) {
                            					(e.msg = "unknown compression method"), (I.mode = 30);
                            					break;
                            				}
                            				if (57344 & I.flags) {
                            					(e.msg = "unknown header flags set"), (I.mode = 30);
                            					break;
                            				}
                            				I.head && (I.head.text = (M >> 8) & 1), 512 & I.flags && ((N[0] = 255 & M), (N[1] = (M >>> 8) & 255), (I.check = c(I.check, N, 2, 0))), (V = M = 0), (I.mode = 3);
                            			case 3:
                            				for (; 32 > V;) {
                            					if (0 === U) break e;
                            					U--, (M += T[G++] << V), (V += 8);
                            				}
                            				I.head && (I.head.time = M),
                            					512 & I.flags && ((N[0] = 255 & M), (N[1] = (M >>> 8) & 255), (N[2] = (M >>> 16) & 255), (N[3] = (M >>> 24) & 255), (I.check = c(I.check, N, 4, 0))),
                            					(V = M = 0),
                            					(I.mode = 4);
                            			case 4:
                            				for (; 16 > V;) {
                            					if (0 === U) break e;
                            					U--, (M += T[G++] << V), (V += 8);
                            				}
                            				I.head && ((I.head.xflags = 255 & M), (I.head.os = M >> 8)), 512 & I.flags && ((N[0] = 255 & M), (N[1] = (M >>> 8) & 255), (I.check = c(I.check, N, 2, 0))), (V = M = 0), (I.mode = 5);
                            			case 5:
                            				if (1024 & I.flags) {
                            					for (; 16 > V;) {
                            						if (0 === U) break e;
                            						U--, (M += T[G++] << V), (V += 8);
                            					}
                            					(I.length = M), I.head && (I.head.extra_len = M), 512 & I.flags && ((N[0] = 255 & M), (N[1] = (M >>> 8) & 255), (I.check = c(I.check, N, 2, 0))), (V = M = 0);
                            				} else I.head && (I.head.extra = null);
                            				I.mode = 6;
                            			case 6:
                            				if (1024 & I.flags && ((n = I.length) > U && (n = U), n && (I.head && ((o = I.head.extra_len - I.length), I.head.extra || (I.head.extra = Array(I.head.extra_len)), m.arraySet(I.head.extra, T, G, n, o)), 512 & I.flags && (I.check = c(I.check, T, n, G)),
                            						(U -= n),
                            						(G += n),
                            						(I.length -= n)), I.length)) break e;
                            				(I.length = 0), (I.mode = 7);
                            			case 7:
                            				if (2048 & I.flags) {
                            					if (0 === U) break e;
                            					n = 0;
                            					do {
                            						(o = T[G + n++]), I.head && o && 65536 > I.length && (I.head.name += String.fromCharCode(o));
                            					} while (o && n < U);
                            					if ((512 & I.flags && (I.check = c(I.check, T, n, G)), (U -= n), (G += n), o)) break e;
                            				} else I.head && (I.head.name = null);
                            				(I.length = 0), (I.mode = 8);
                            			case 8:
                            				if (4096 & I.flags) {
                            					if (0 === U) break e;
                            					n = 0;
                            					do {
                            						(o = T[G + n++]), I.head && o && 65536 > I.length && (I.head.comment += String.fromCharCode(o));
                            					} while (o && n < U);
                            					if ((512 & I.flags && (I.check = c(I.check, T, n, G)), (U -= n), (G += n), o)) break e;
                            				} else I.head && (I.head.comment = null);
                            				I.mode = 9;
                            			case 9:
                            				if (512 & I.flags) {
                            					for (; 16 > V;) {
                            						if (0 === U) break e;
                            						U--, (M += T[G++] << V), (V += 8);
                            					}
                            					if (M !== (65535 & I.check)) {
                            						(e.msg = "header crc mismatch"), (I.mode = 30);
                            						break;
                            					}
                            					V = M = 0;
                            				}
                            				I.head && ((I.head.hcrc = (I.flags >> 9) & 1), (I.head.done = !0)), (e.adler = I.check = 0), (I.mode = 12);
                            				break;
                            			case 10:
                            				for (; 32 > V;) {
                            					if (0 === U) break e;
                            					U--, (M += T[G++] << V), (V += 8);
                            				}
                            				(e.adler = I.check = s(M)), (V = M = 0), (I.mode = 11);
                            			case 11:
                            				if (0 === I.havedict) return (e.next_out = D), (e.avail_out = S), (e.next_in = G), (e.avail_in = U), (I.hold = M), (I.bits = V), 2;
                            				(e.adler = I.check = 1), (I.mode = 12);
                            			case 12:
                            				if (5 === t || 6 === t) break e;
                            			case 13:
                            				if (I.last) {
                            					(M >>>= 7 & V), (V -= 7 & V), (I.mode = 27);
                            					break;
                            				}
                            				for (; 3 > V;) {
                            					if (0 === U) break e;
                            					U--, (M += T[G++] << V), (V += 8);
                            				}
                            				switch (((I.last = 1 & M), --V, 3 & (M >>>= 1))) {
                            					case 0:
                            						I.mode = 14;
                            						break;
                            					case 1:
                            						var O = I;
                            						if (F) {
                            							for (u = new m.Buf32(512), g = new m.Buf32(32), r = 0; 144 > r;) O.lens[r++] = 8;
                            							for (; 256 > r;) O.lens[r++] = 9;
                            							for (; 280 > r;) O.lens[r++] = 7;
                            							for (; 288 > r;) O.lens[r++] = 8;
                            							for (h(1, O.lens, 0, 288, u, 0, O.work, { bits: 9 }), r = 0; 32 > r;) O.lens[r++] = 5;
                            							h(2, O.lens, 0, 32, g, 0, O.work, { bits: 5 }), (F = !1);
                            						}
                            						if (((O.lencode = u), (O.lenbits = 9), (O.distcode = g), (O.distbits = 5), (I.mode = 20), 6 === t)) {
                            							(M >>>= 2), (V -= 2);
                            							break e;
                            						}
                            						break;
                            					case 2:
                            						I.mode = 17;
                            						break;
                            					case 3:
                            						(e.msg = "invalid block type"), (I.mode = 30);
                            				}
                            				(M >>>= 2), (V -= 2);
                            				break;
                            			case 14:
                            				for (M >>>= 7 & V, V -= 7 & V; 32 > V;) {
                            					if (0 === U) break e;
                            					U--, (M += T[G++] << V), (V += 8);
                            				}
                            				if ((65535 & M) != ((M >>> 16) ^ 65535)) {
                            					(e.msg = "invalid stored block lengths"), (I.mode = 30);
                            					break;
                            				}
                            				if (((I.length = 65535 & M), (M = 0), (V = 0), (I.mode = 15), 6 === t)) break e;
                            			case 15:
                            				I.mode = 16;
                            			case 16:
                            				if ((n = I.length)) {
                            					if ((n > U && (n = U), n > S && (n = S), 0 === n)) break e;
                            					m.arraySet(E, T, G, n, D), (U -= n), (G += n), (S -= n), (D += n), (I.length -= n);
                            					break;
                            				}
                            				I.mode = 12;
                            				break;
                            			case 17:
                            				for (; 14 > V;) {
                            					if (0 === U) break e;
                            					U--, (M += T[G++] << V), (V += 8);
                            				}
                            				if (((I.nlen = 257 + (31 & M)), (M >>>= 5), (V -= 5), (I.ndist = 1 + (31 & M)), (M >>>= 5), (V -= 5), (I.ncode = 4 + (15 & M)), (M >>>= 4), (V -= 4), 286 < I.nlen || 30 < I.ndist)) {
                            					(e.msg = "too many length or distance symbols"), (I.mode = 30);
                            					break;
                            				}
                            				(I.have = 0), (I.mode = 18);
                            			case 18:
                            				for (; I.have < I.ncode;) {
                            					for (; 3 > V;) {
                            						if (0 === U) break e;
                            						U--, (M += T[G++] << V), (V += 8);
                            					}
                            					(I.lens[_[I.have++]] = 7 & M), (M >>>= 3), (V -= 3);
                            				}
                            				for (; 19 > I.have;) I.lens[_[I.have++]] = 0;
                            				if (((I.lencode = I.lendyn), (I.lenbits = 7), (R = { bits: I.lenbits }), (P = h(0, I.lens, 0, 19, I.lencode, 0, I.work, R)), (I.lenbits = R.bits), P)) {
                            					(e.msg = "invalid code lengths set"), (I.mode = 30);
                            					break;
                            				}
                            				(I.have = 0), (I.mode = 19);
                            			case 19:
                            				for (; I.have < I.nlen + I.ndist;) {
                            					for (;
                            						(O = 65535 & (v = I.lencode[M & ((1 << I.lenbits) - 1)])), !((A = v >>> 24) <= V);) {
                            						if (0 === U) break e;
                            						U--, (M += T[G++] << V), (V += 8);
                            					}
                            					if (16 > O)(M >>>= A), (V -= A), (I.lens[I.have++] = O);
                            					else {
                            						if (16 === O) {
                            							for (r = A + 2; V < r;) {
                            								if (0 === U) break e;
                            								U--, (M += T[G++] << V), (V += 8);
                            							}
                            							if (((M >>>= A), (V -= A), 0 === I.have)) {
                            								(e.msg = "invalid bit length repeat"), (I.mode = 30);
                            								break;
                            							}
                            							(o = I.lens[I.have - 1]), (n = 3 + (3 & M)), (M >>>= 2), (V -= 2);
                            						} else if (17 === O) {
                            							for (r = A + 3; V < r;) {
                            								if (0 === U) break e;
                            								U--, (M += T[G++] << V), (V += 8);
                            							}
                            							(V -= A), (o = 0), (n = 3 + (7 & (M >>>= A))), (M >>>= 3), (V -= 3);
                            						} else {
                            							for (r = A + 7; V < r;) {
                            								if (0 === U) break e;
                            								U--, (M += T[G++] << V), (V += 8);
                            							}
                            							(V -= A), (o = 0), (n = 11 + (127 & (M >>>= A))), (M >>>= 7), (V -= 7);
                            						}
                            						if (I.have + n > I.nlen + I.ndist) {
                            							(e.msg = "invalid bit length repeat"), (I.mode = 30);
                            							break;
                            						}
                            						for (; n--;) I.lens[I.have++] = o;
                            					}
                            				}
                            				if (30 === I.mode) break;
                            				if (0 === I.lens[256]) {
                            					(e.msg = "invalid code -- missing end-of-block"), (I.mode = 30);
                            					break;
                            				}
                            				if (((I.lenbits = 9), (R = { bits: I.lenbits }), (P = h(1, I.lens, 0, I.nlen, I.lencode, 0, I.work, R)), (I.lenbits = R.bits), P)) {
                            					(e.msg = "invalid literal/lengths set"), (I.mode = 30);
                            					break;
                            				}
                            				if (((I.distbits = 6), (I.distcode = I.distdyn), (R = { bits: I.distbits }), (P = h(2, I.lens, I.nlen, I.ndist, I.distcode, 0, I.work, R)), (I.distbits = R.bits), P)) {
                            					(e.msg = "invalid distances set"), (I.mode = 30);
                            					break;
                            				}
                            				if (((I.mode = 20), 6 === t)) break e;
                            			case 20:
                            				I.mode = 21;
                            			case 21:
                            				if (6 <= U && 258 <= S) {
                            					(e.next_out = D),
                            					(e.avail_out = S),
                            					(e.next_in = G),
                            					(e.avail_in = U),
                            					(I.hold = M),
                            					(I.bits = V),
                            					p(e, B),
                            						(D = e.next_out),
                            						(E = e.output),
                            						(S = e.avail_out),
                            						(G = e.next_in),
                            						(T = e.input),
                            						(U = e.avail_in),
                            						(M = I.hold),
                            						(V = I.bits),
                            						12 === I.mode && (I.back = -1);
                            					break;
                            				}
                            				for (I.back = 0;
                            					(r = ((v = I.lencode[M & ((1 << I.lenbits) - 1)]) >>> 16) & 255), (O = 65535 & v), !((A = v >>> 24) <= V);) {
                            					if (0 === U) break e;
                            					U--, (M += T[G++] << V), (V += 8);
                            				}
                            				if (r && 0 == (240 & r)) {
                            					var w = A,
                            						k = r;
                            					for (l = O;
                            						(r = ((v = I.lencode[l + ((M & ((1 << (w + k)) - 1)) >> w)]) >>> 16) & 255), (O = 65535 & v), !(w + (A = v >>> 24) <= V);) {
                            						if (0 === U) break e;
                            						U--, (M += T[G++] << V), (V += 8);
                            					}
                            					(M >>>= w), (V -= w), (I.back += w);
                            				}
                            				if (((M >>>= A), (V -= A), (I.back += A), (I.length = O), 0 === r)) {
                            					I.mode = 26;
                            					break;
                            				}
                            				if (32 & r) {
                            					(I.back = -1), (I.mode = 12);
                            					break;
                            				}
                            				if (64 & r) {
                            					(e.msg = "invalid literal/length code"), (I.mode = 30);
                            					break;
                            				}
                            				(I.extra = 15 & r), (I.mode = 22);
                            			case 22:
                            				if (I.extra) {
                            					for (r = I.extra; V < r;) {
                            						if (0 === U) break e;
                            						U--, (M += T[G++] << V), (V += 8);
                            					}
                            					(I.length += M & ((1 << I.extra) - 1)), (M >>>= I.extra), (V -= I.extra), (I.back += I.extra);
                            				}
                            				(I.was = I.length), (I.mode = 23);
                            			case 23:
                            				for (;
                            					(r = ((v = I.distcode[M & ((1 << I.distbits) - 1)]) >>> 16) & 255), (O = 65535 & v), !((A = v >>> 24) <= V);) {
                            					if (0 === U) break e;
                            					U--, (M += T[G++] << V), (V += 8);
                            				}
                            				if (0 == (240 & r)) {
                            					for (w = A, k = r, l = O;
                            						(r = ((v = I.distcode[l + ((M & ((1 << (w + k)) - 1)) >> w)]) >>> 16) & 255), (O = 65535 & v), !(w + (A = v >>> 24) <= V);) {
                            						if (0 === U) break e;
                            						U--, (M += T[G++] << V), (V += 8);
                            					}
                            					(M >>>= w), (V -= w), (I.back += w);
                            				}
                            				if (((M >>>= A), (V -= A), (I.back += A), 64 & r)) {
                            					(e.msg = "invalid distance code"), (I.mode = 30);
                            					break;
                            				}
                            				(I.offset = O), (I.extra = 15 & r), (I.mode = 24);
                            			case 24:
                            				if (I.extra) {
                            					for (r = I.extra; V < r;) {
                            						if (0 === U) break e;
                            						U--, (M += T[G++] << V), (V += 8);
                            					}
                            					(I.offset += M & ((1 << I.extra) - 1)), (M >>>= I.extra), (V -= I.extra), (I.back += I.extra);
                            				}
                            				if (I.offset > I.dmax) {
                            					(e.msg = "invalid distance too far back"), (I.mode = 30);
                            					break;
                            				}
                            				I.mode = 25;
                            			case 25:
                            				if (0 === S) break e;
                            				if (((n = B - S), I.offset > n)) {
                            					if ((n = I.offset - n) > I.whave && I.sane) {
                            						(e.msg = "invalid distance too far back"), (I.mode = 30);
                            						break;
                            					}
                            					n > I.wnext ? ((n -= I.wnext), (a = I.wsize - n)) : (a = I.wnext - n), n > I.length && (n = I.length), (r = I.window);
                            				} else(r = E), (a = D - I.offset), (n = I.length);
                            				n > S && (n = S), (S -= n), (I.length -= n);
                            				do {
                            					E[D++] = r[a++];
                            				} while (--n);
                            				0 === I.length && (I.mode = 21);
                            				break;
                            			case 26:
                            				if (0 === S) break e;
                            				(E[D++] = I.length), S--, (I.mode = 21);
                            				break;
                            			case 27:
                            				if (I.wrap) {
                            					for (; 32 > V;) {
                            						if (0 === U) break e;
                            						U--, (M |= T[G++] << V), (V += 8);
                            					}
                            					if (((B -= S), (e.total_out += B), (I.total += B), B && (e.adler = I.check = I.flags ? c(I.check, E, B, D - B) : d(I.check, E, B, D - B)), (B = S), (I.flags ? M : s(M)) !== I.check)) {
                            						(e.msg = "incorrect data check"), (I.mode = 30);
                            						break;
                            					}
                            					V = M = 0;
                            				}
                            				I.mode = 28;
                            			case 28:
                            				if (I.wrap && I.flags) {
                            					for (; 32 > V;) {
                            						if (0 === U) break e;
                            						U--, (M += T[G++] << V), (V += 8);
                            					}
                            					if (M !== (4294967295 & I.total)) {
                            						(e.msg = "incorrect length check"), (I.mode = 30);
                            						break;
                            					}
                            					V = M = 0;
                            				}
                            				I.mode = 29;
                            			case 29:
                            				P = 1;
                            				break e;
                            			case 30:
                            				P = -3;
                            				break e;
                            			case 31:
                            				return -4;
                            			default:
                            				return f;
                            		}
                            		return (
                            			(e.next_out = D),
                            			(e.avail_out = S),
                            			(e.next_in = G),
                            			(e.avail_in = U),
                            			(I.hold = M),
                            			(I.bits = V),
                            			(I.wsize || (B !== e.avail_out && 30 > I.mode && (27 > I.mode || 4 !== t))) && i(e, e.output, e.next_out, B - e.avail_out) ? ((I.mode = 31), -4) : ((C -= e.avail_in),
                            				(B -= e.avail_out),
                            				(e.total_in += C),
                            				(e.total_out += B),
                            				(I.total += B), I.wrap && B && (e.adler = I.check = I.flags ? c(I.check, E, B, e.next_out - B) : d(I.check, E, B, e.next_out - B)),
                            				(e.data_type = I.bits + (I.last ? 64 : 0) + (12 === I.mode ? 128 : 0) + (20 === I.mode || 15 === I.mode ? 256 : 0)),
                            				((0 === C && 0 === B) || 4 === t) && P === b && (P = -5), P));
                            	}