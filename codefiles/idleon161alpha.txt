$jscomp = $jscomp || {};
($jscomp.scope = {}),
    ($jscomp.ASSUME_ES5 = !1),
    ($jscomp.ASSUME_NO_NATIVE_MAP = !1),
    ($jscomp.ASSUME_NO_NATIVE_SET = !1),
    ($jscomp.defineProperty =
        $jscomp.ASSUME_ES5 || "function" == typeof Object.defineProperties
            ? Object.defineProperty
            : function (e, t, n) {
                  e != Array.prototype && e != Object.prototype && (e[t] = n.value);
              }),
    ($jscomp.getGlobal = function (e) {
        return "undefined" != typeof window && window === e ? e : "undefined" != typeof global && null != global ? global : e;
    }),
    ($jscomp.global = $jscomp.getGlobal(this)),
    ($jscomp.SYMBOL_PREFIX = "jscomp_symbol_"),
    ($jscomp.initSymbol = function () {
        ($jscomp.initSymbol = function () {}), $jscomp.global.Symbol || ($jscomp.global.Symbol = $jscomp.Symbol);
    }),
    ($jscomp.Symbol = (function () {
        var e = 0;
        return function (t) {
            return $jscomp.SYMBOL_PREFIX + (t || "") + e++;
        };
    })()),
    ($jscomp.initSymbolIterator = function () {
        $jscomp.initSymbol();
        var e = $jscomp.global.Symbol.iterator;
        e || (e = $jscomp.global.Symbol.iterator = $jscomp.global.Symbol("iterator")),
            "function" != typeof Array.prototype[e] &&
                $jscomp.defineProperty(Array.prototype, e, {
                    configurable: !0,
                    writable: !0,
                    value: function () {
                        return $jscomp.arrayIterator(this);
                    },
                }),
            ($jscomp.initSymbolIterator = function () {});
    }),
    ($jscomp.arrayIterator = function (e) {
        var t = 0;
        return $jscomp.iteratorPrototype(function () {
            return t < e.length ? { done: !1, value: e[t++] } : { done: !0 };
        });
    }),
    ($jscomp.iteratorPrototype = function (e) {
        return (
            $jscomp.initSymbolIterator(),
            ((e = { next: e })[$jscomp.global.Symbol.iterator] = function () {
                return this;
            }),
            e
        );
    }),
    ($jscomp.iteratorFromArray = function (e, t) {
        $jscomp.initSymbolIterator(), e instanceof String && (e += "");
        var n = 0,
            a = {
                next: function () {
                    if (n < e.length) {
                        var s = n++;
                        return { value: t(s, e[s]), done: !1 };
                    }
                    return (
                        (a.next = function () {
                            return { done: !0, value: void 0 };
                        }),
                        a.next()
                    );
                },
            };
        return (
            (a[Symbol.iterator] = function () {
                return a;
            }),
            a
        );
    }),
    ($jscomp.polyfill = function (e, t, n, a) {
        if (t) {
            for (n = $jscomp.global, e = e.split("."), a = 0; a < e.length - 1; a++) {
                var s = e[a];
                s in n || (n[s] = {}), (n = n[s]);
            }
            (t = t((a = n[(e = e[e.length - 1])]))) != a && null != t && $jscomp.defineProperty(n, e, { configurable: !0, writable: !0, value: t });
        }
    }),
    $jscomp.polyfill(
        "Array.prototype.keys",
        function (e) {
            return (
                e ||
                function () {
                    return $jscomp.iteratorFromArray(this, function (e) {
                        return e;
                    });
                }
            );
        },
        "es6",
        "es3"
    ),
    $jscomp.polyfill(
        "String.fromCodePoint",
        function (e) {
            return (
                e ||
                function (e) {
                    for (var t = "", n = 0; n < arguments.length; n++) {
                        var a = Number(arguments[n]);
                        if (0 > a || 1114111 < a || a !== Math.floor(a)) throw new RangeError("invalid_code_point " + a);
                        65535 >= a ? (t += String.fromCharCode(a)) : ((a -= 65536), (t += String.fromCharCode(((a >>> 10) & 1023) | 55296)), (t += String.fromCharCode((1023 & a) | 56320)));
                    }
                    return t;
                }
            );
        },
        "es6",
        "es3"
    ),
    ($jscomp.checkStringArgs = function (e, t, n) {
        if (null == e) throw new TypeError("The 'this' value for String.prototype." + n + " must not be null or undefined");
        if (t instanceof RegExp) throw new TypeError("First argument to String.prototype." + n + " must not be a regular expression");
        return e + "";
    }),
    $jscomp.polyfill(
        "String.prototype.startsWith",
        function (e) {
            return (
                e ||
                function (e, t) {
                    var n = $jscomp.checkStringArgs(this, e, "startsWith");
                    e += "";
                    var a = n.length,
                        s = e.length;
                    t = Math.max(0, Math.min(0 | t, n.length));
                    for (var r = 0; r < s && t < a; ) if (n[t++] != e[r++]) return !1;
                    return r >= s;
                }
            );
        },
        "es6",
        "es3"
    ),
    $jscomp.polyfill(
        "Array.prototype.values",
        function (e) {
            return (
                e ||
                function () {
                    return $jscomp.iteratorFromArray(this, function (e, t) {
                        return t;
                    });
                }
            );
        },
        "es6",
        "es3"
    ),
    $jscomp.polyfill(
        "String.prototype.codePointAt",
        function (e) {
            return (
                e ||
                function (e) {
                    var t = $jscomp.checkStringArgs(this, null, "codePointAt"),
                        n = t.length;
                    if (0 <= (e = Number(e) || 0) && e < n) {
                        e |= 0;
                        var a = t.charCodeAt(e);
                        return 55296 > a || 56319 < a || e + 1 === n || 56320 > (e = t.charCodeAt(e + 1)) || 57343 < e ? a : 1024 * (a - 55296) + e + 9216;
                    }
                }
            );
        },
        "es6",
        "es3"
    ),
    $jscomp.polyfill(
        "String.prototype.endsWith",
        function (e) {
            return (
                e ||
                function (e, t) {
                    var n = $jscomp.checkStringArgs(this, e, "endsWith");
                    (e += ""), void 0 === t && (t = n.length), (t = Math.max(0, Math.min(0 | t, n.length)));
                    for (var a = e.length; 0 < a && 0 < t; ) if (n[--t] != e[--a]) return !1;
                    return 0 >= a;
                }
            );
        },
        "es6",
        "es3"
    ),
    $jscomp.polyfill(
        "String.prototype.repeat",
        function (e) {
            return (
                e ||
                function (e) {
                    var t = $jscomp.checkStringArgs(this, null, "repeat");
                    if (0 > e || 1342177279 < e) throw new RangeError("Invalid count value");
                    e |= 0;
                    for (var n = ""; e; ) 1 & e && (n += t), (e >>>= 1) && (t += t);
                    return n;
                }
            );
        },
        "es6",
        "es3"
    ),
    $jscomp.polyfill(
        "Array.prototype.fill",
        function (e) {
            return (
                e ||
                function (e, t, n) {
                    var a = this.length || 0;
                    for (0 > t && (t = Math.max(0, a + t)), (null == n || n > a) && (n = a), 0 > (n = Number(n)) && (n = Math.max(0, a + n)), t = Number(t || 0); t < n; t++) this[t] = e;
                    return this;
                }
            );
        },
        "es6",
        "es3"
    ),
    (function (Eg, ic) {
        (Eg.lime = Eg.lime || {}),
            (Eg.lime.$scripts = Eg.lime.$scripts || {}),
            (Eg.lime.$scripts.Z = function (ic, Ed) {
                (function (ic, Ed) {
                    function K(e, t) {
                        for (var n in ((e = Object.create(e)), t)) e[n] = t[n];
                        return t.toString !== Object.prototype.toString && (e.toString = t.toString), e;
                    }
                    function Ad(e) {
                        return e instanceof Array ? Qc.iter(e) : e.iterator();
                    }
                    function N(e, t) {
                        return null == t
                            ? null
                            : (null == t.__id__ && (t.__id__ = Ed.$haxeUID++), null == e.hx__closures__ ? (e.hx__closures__ = {}) : (n = e.hx__closures__[t.__id__]), null == n && ((n = t.bind(e)), (e.hx__closures__[t.__id__] = n)), n);
                        var n;
                    }
                    ic.lime = ic.lime || {};
                    var v = {},
                        I = function () {
                            return d.__string_rec(this, "");
                        },
                        Bc = Bc || {},
                        ob,
                        ne = function () {};
                    (v.ApplicationMain = ne),
                        (ne.__name__ = "ApplicationMain"),
                        (ne.main = function () {
                            (ke.am = ne), ke.setupTracing(!0), x.load(), Hd.loadInputConfig(), ke.setupTracing(), sh.__registerEntryPoint("Z", ne.create), Hh.get_current();
                        }),
                        (ne.reloadGame = function () {
                            for (var e = 0, t = ne.reloadListeners; e < t.length; ) {
                                var n = t[e];
                                ++e, n();
                            }
                            h.resetStatics(),
                                r.resetStatics(),
                                Xr.resetStatics(),
                                dL.resetStatics(),
                                Fi.resetStatics(),
                                Ih.resetStatics(),
                                zr.resetStatics(),
                                YD.resetStatics(),
                                ov.resetStatics(),
                                Qw.resetStatics(),
                                WF.resetStatics(),
                                Rx.resetStatics(),
                                Xq.resetStatics(),
                                Gb.resetStatics(),
                                hu.resetStatics(),
                                Hd.resetStatics(),
                                a.resetStatics(),
                                Hh.get_current().removeChild(ne.universal),
                                Hd.loadInputConfig(),
                                (ne.universal = new ke()),
                                Hh.get_current().addChild(ne.universal),
                                ne.universal.preloaderComplete();
                        }),
                        (ne.create = function (t) {
                            (ne.app = new Q2()), Qk.init(t);
                            var n = ne.app.meta;
                            if (
                                (null != e.build ? n.setReserved("build", "1") : (n.h.build = "1"),
                                (n = ne.app.meta),
                                null != e.company ? n.setReserved("company", "Stencyl") : (n.h.company = "Stencyl"),
                                (n = ne.app.meta),
                                null != e.file ? n.setReserved("file", "Z") : (n.h.file = "Z"),
                                (n = ne.app.meta),
                                null != e.name ? n.setReserved("name", "Z") : (n.h.name = "Z"),
                                (n = ne.app.meta),
                                null != e.packageName ? n.setReserved("packageName", "com.example.myapp") : (n.h.packageName = "com.example.myapp"),
                                (n = ne.app.meta),
                                null != e.version ? n.setReserved("version", "1.0.0") : (n.h.version = "1.0.0"),
                                ((n = {
                                    allowHighDPI: !1,
                                    alwaysOnTop: !1,
                                    borderless: !1,
                                    element: null,
                                    frameRate: 65,
                                    height: 540,
                                    hidden: !1,
                                    maximized: !1,
                                    minimized: !1,
                                    parameters: {},
                                    resizable: !1,
                                    title: "Z",
                                    width: 960,
                                    x: null,
                                    y: null,
                                }).context = { antialiasing: x.antialias ? 2 : 0, background: 0, colorDepth: 32, depth: !0, hardware: !0, stencil: !0, type: null, vsync: !0 }),
                                null == ne.app.__window && null != t)
                            )
                                for (var a = 0, s = Fe.fields(t); a < s.length; ) {
                                    var r = s[a];
                                    ++a, Object.prototype.hasOwnProperty.call(n, r) ? (n[r] = Fe.field(t, r)) : Object.prototype.hasOwnProperty.call(n.context, r) && (n.context[r] = Fe.field(t, r));
                                }
                            for (
                                ne.app.createWindow(n),
                                    x.releaseMode || Hh.get_current().get_loaderInfo().uncaughtErrorEvents.addEventListener("uncaughtError", ne.uncaughtErrorHandler),
                                    ke.initWindow(ne.app.__window),
                                    ne.universal = new ke(),
                                    Hh.get_current().addChild(ne.universal),
                                    (t = new q4()).onComplete.add(N((ob = ne.universal), ob.preloaderComplete)),
                                    ne.app.__preloader.onProgress.add(N(t, t.onUpdate)),
                                    ne.app.__preloader.onComplete.add(N(t, t.onLoaded)),
                                    t = 0,
                                    n = Qk.preloadLibraries;
                                t < n.length;

                            )
                                (a = n[t]), ++t, ne.app.__preloader.addLibrary(a);
                            for (t = 0, n = Qk.preloadLibraryNames; t < n.length; ) (a = n[t]), ++t, ne.app.__preloader.addLibraryName(a);
                            ne.app.__preloader.load(), ne.app.exec();
                        }),
                        (ne.uncaughtErrorHandler = function (e) {});
                    var rd = function (e, t) {
                        this.r = new RegExp(e, t.split("u").join(""));
                    };
                    (v.EReg = rd),
                        (rd.__name__ = "EReg"),
                        (rd.prototype = {
                            r: null,
                            match: function (e) {
                                return this.r.global && (this.r.lastIndex = 0), (this.r.m = this.r.exec(e)), (this.r.s = e), null != this.r.m;
                            },
                            matched: function (e) {
                                if (null != this.r.m && 0 <= e && e < this.r.m.length) return this.r.m[e];
                                throw new Gc("EReg::matched");
                            },
                            matchedRight: function () {
                                if (null == this.r.m) throw new Gc("No string matched");
                                var e = this.r.m.index + this.r.m[0].length;
                                return Qc.substr(this.r.s, e, this.r.s.length - e);
                            },
                            matchedPos: function () {
                                if (null == this.r.m) throw new Gc("No string matched");
                                return { pos: this.r.m.index, len: this.r.m[0].length };
                            },
                            matchSub: function (e, t, n) {
                                return (
                                    null == n && (n = -1),
                                    this.r.global
                                        ? ((this.r.lastIndex = t), (this.r.m = this.r.exec(0 > n ? e : Qc.substr(e, 0, t + n))), (t = null != this.r.m) && (this.r.s = e), t)
                                        : ((n = this.match(0 > n ? Qc.substr(e, t, null) : Qc.substr(e, t, n))) && ((this.r.s = e), (this.r.m.index += t)), n)
                                );
                            },
                            split: function (e) {
                                return e.replace(this.r, "#__delim__#").split("#__delim__#");
                            },
                            map: function (e, t) {
                                for (var n = 0, a = ""; !(n >= e.length); ) {
                                    if (!this.matchSub(e, n)) {
                                        a += g.string(Qc.substr(e, n, null));
                                        break;
                                    }
                                    var s = this.matchedPos();
                                    if (((a += g.string(Qc.substr(e, n, s.pos - n))), (a += g.string(t(this))), 0 == s.len ? ((a += g.string(Qc.substr(e, s.pos, 1))), (n = s.pos + 1)) : (n = s.pos + s.len), !this.r.global)) break;
                                }
                                return !this.r.global && 0 < n && n < e.length && (a += g.string(Qc.substr(e, n, null))), a;
                            },
                            __class__: rd,
                        });
                    var lf = function (e, t, n, a, s, r) {
                        (this.x = e), (this.y = t), (this.node = n), (this.destX = a), (this.destY = s), (this.destNode = r);
                    };
                    (v.PlayerMoveData = lf),
                        (lf.__name__ = "PlayerMoveData"),
                        (lf.prototype = {
                            x: null,
                            y: null,
                            node: null,
                            destX: null,
                            destY: null,
                            destNode: null,
                            update: function (e, t, n, a, s, r) {
                                (this.x = e), (this.y = t), (this.node = n), (this.destX = a), (this.destY = s), (this.destNode = r);
                            },
                            compareAndUpdate: function (e, t, n, a, s, r) {
                                var A = a == this.destX && s == this.destY && r == this.destNode;
                                return A || this.update(e, t, n, a, s, r), A;
                            },
                            __class__: lf,
                        });
                    var ve = function () {};
                    (v.FirebaseMMOLogic = ve),
                        (ve.__name__ = "FirebaseMMOLogic"),
                        (ve.checkSameMoveData = function (e, t, n, a, s, r) {
                            return ve.lastData.compareAndUpdate(e, t, n, a, s, r);
                        });
                    var H = function () {};
                    (v.FirebaseStorage = H),
                        (H.__name__ = "FirebaseStorage"),
                        (H.init = function () {
                            window.React.createElement("init", []);
                        }),
                        (H.signIn = function () {
                            window.React.createElement("signIn", []);
                        }),
                        (H.getSignInStatus = function () {
                            return window.React.createElement("getSignInStatus", []);
                        }),
                        (H.test = function () {
                            return "Test v2";
                        }),
                        (H.deepCopyList = function (e) {
                            for (var t = [], n = 0; n < e.length; ) {
                                var a = e[n];
                                ++n;
                                var s = a;
                                a instanceof Array ? (s = H.deepCopyList(a)) : a instanceof p && (s = H.deepCopyMap(a)), t.push(s);
                            }
                            return t;
                        }),
                        (H.deepCopyMap = function (t) {
                            for (var n = new p(), a = t.keys(); a.hasNext(); ) {
                                var s = a.next(),
                                    r = null != e[s] ? t.getReserved(s) : t.h[s],
                                    A = r;
                                r instanceof Array ? (A = H.deepCopyList(r)) : r instanceof p && (A = H.deepCopyMap(r)), (r = A), null != e[s] ? n.setReserved(s, r) : (n.h[s] = r);
                            }
                            return n;
                        }),
                        (H.getFromListFriends = function (e, t) {
                            for (var n = 0; n < t.length; ) {
                                var a = t[n];
                                if ((++n, a instanceof Array && a[0] == e)) return a;
                            }
                            return [];
                        }),
                        (H.setPlayerName = function (e) {}),
                        (H.setPlayerDisplay = function (t) {
                            for (var n = new p(), a = t.keys(); a.hasNext(); ) {
                                var s = a.next();
                                if ("PlayerEquipmentOrder" == s) {
                                    var r = null != e[s] ? t.getReserved(s) : t.h[s];
                                    s = [];
                                    for (var A = [], l = 0, o = r[0].length; l < o; ) {
                                        var i = l++;
                                        "Blank" == (i = r[0][i]) && (i = H.BLANK_CHAR), A.push(i);
                                    }
                                    for (s.push(A), A = [], l = 0, o = r[1].length; l < o; ) (i = l++), "Blank" == (i = r[1][i]) && (i = H.BLANK_CHAR), A.push(i);
                                    s.push(A), s.push([]), (r = H.PLAYER_EQUIPMENT_LIST), null != e[r] ? n.setReserved(r, s) : (n.h[r] = s);
                                } else (r = null != e[s] ? t.getReserved(s) : t.h[s]), null != e[s] ? n.setReserved(s, r) : (n.h[s] = r);
                            }
                            window.React.createElement("setPlayerDisplay", [n]);
                        }),
                        (H.switchLevels = function (e) {
                            (H.currentCount = 0), (H.extraPlayers = []), window.React.createElement("switchLevels", [e]);
                        }),
                        (H.updateMovement = function (e, t, n, a, s, r) {
                            ve.checkSameMoveData(e, t, n, a, s, r) || window.React.createElement("updateMovement", [e, t, n, a, s, r]);
                        }),
                        (H.requestLoot = function (e) {
                            window.React.createElement("requestLoot", [e]);
                        }),
                        (H.getLoot = function () {
                            return window.React.createElement("getLoot", []);
                        }),
                        (H.requestTime = function () {
                            window.React.createElement("requestTime", []);
                        }),
                        (H.getTime = function () {
                            return window.React.createElement("getTime", []);
                        }),
                        (H.getUserNameList = function () {
                            return window.React.createElement("getUserNameList", []);
                        }),
                        (H.selectUsername = function (e) {
                            window.React.createElement("selectUserName", [e]);
                        }),
                        (H.registerUsername = function (e, t) {
                            window.React.createElement("attemptRegisterPlayerName", [e, t]);
                        }),
                        (H.getRegisterPlayerNameStatus = function () {
                            return window.React.createElement("getRegisterPlayerNameStatus", []);
                        }),
                        (H.sendChat = function (e) {
                            window.React.createElement("sendChat", [e]);
                        }),
                        (H.getEvents = function () {
                            if (0 < H.messageQueue.length) {
                                var e = H.messageQueue;
                                H.messageQueue = [];
                                var t = window.React.createElement("getEvents", []);
                                e.concat(t);
                            } else e = window.React.createElement("getEvents", []);
                            return e;
                        }),
                        (H.addToMessageQueue = function (e, t, n) {
                            H.messageQueue.push([e, t, n]);
                        }),
                        (H.notifyOnline = function () {
                            window.React.createElement("notifyOnline", []);
                        }),
                        (H.flagDelete = function () {}),
                        (H.saveStatus = function () {
                            return window.React.createElement("saveStatus", []);
                        }),
                        (H.loadStatus = function () {
                            return window.React.createElement("loadStatus", []);
                        }),
                        (H.beginSave = function () {
                            window.React.createElement("beginSave", []);
                        }),
                        (H.addSaveEntry = function (e, t) {
                            window.React.createElement("addSaveEntry", [e, t]);
                        }),
                        (H.addSaveEntryString = function (e, t) {
                            window.React.createElement("addSaveEntryString", [e, t]);
                        }),
                        (H.addSaveEntryList = function (e, t) {
                            window.React.createElement("addSaveEntryList", [e, t]);
                        }),
                        (H.addSaveEntryJsonList = function (e, t) {
                            (t = JSON.stringify(t)), window.React.createElement("addSaveEntryString", [e, t]);
                        }),
                        (H.addSaveEntrySparseList = function (t, n) {
                            for (var a = new p(), s = 0, r = n.length; s < r; ) {
                                var A = s++,
                                    l = n[A];
                                null != l && 0 != H.mapCount(l) && (null != e[(A = "" + A)] ? a.setReserved(A, l) : (a.h[A] = l));
                            }
                            window.React.createElement("addSaveEntryStringMapMap", [t, a]);
                        }),
                        (H.mapCount = function (e) {
                            var t = 0;
                            for (e = new jy(e, e.arrayKeys()); e.hasNext(); ) e.next(), ++t;
                            return t;
                        }),
                        (H.addSaveEntryMap = function (e, t) {
                            window.React.createElement("addSaveEntryStringMap", [e, t]);
                        }),
                        (H.commitSave = function () {
                            window.React.createElement("commitSave", []);
                        }),
                        (H.startLoad = function () {
                            window.React.createElement("startLoad", []);
                        }),
                        (H.getLoad = function (e) {
                            return window.React.createElement("getLoad", [e]);
                        }),
                        (H.getLoadString = function (e) {
                            return window.React.createElement("getLoadString", [e]);
                        }),
                        (H.getLoadList = function (e) {
                            return window.React.createElement("getLoadList", [e]);
                        }),
                        (H.getLoadJsonList = function (e) {
                            return (e = window.React.createElement("getLoadString", [e])), Ic.parse(e);
                        }),
                        (H.getLoadSparseList = function (t, n) {
                            (t = window.React.createElement("getLoadString", [t])), (t = Ic.parse(t));
                            for (var a = [], s = 0; s < n; ) {
                                var r = "" + s++;
                                (null != e[r] ? t.existsReserved(r) : t.h.hasOwnProperty(r)) ? a.push(null != e[r] ? t.getReserved(r) : t.h[r]) : a.push(new p());
                            }
                            return a;
                        }),
                        (H.getLoadMap = function (t) {
                            if (window.React.createElement("isStringType", [t])) return (t = window.React.createElement("getLoadString", [t])), Ic.parse(t);
                            for (var n = window.React.createElement("getLoadMapKeys", [t]), a = new p(), s = 0; s < n.length; ) {
                                var r = n[s];
                                ++s;
                                var A = window.React.createElement("getLoadMapValue", [t, r]);
                                null != e[r] ? a.setReserved(r, A) : (a.h[r] = A);
                            }
                            return a;
                        }),
                        (H.loadVarStatus = function () {
                            return window.React.createElement("loadVarStatus", []);
                        }),
                        (H.startServerVarLoad = function () {
                            window.React.createElement("startServerVarLoad", []);
                        }),
                        (H.getServerVarLoad = function (e) {
                            return window.React.createElement("getServerVarLoad", [e]);
                        }),
                        (H.getServerVarLoadString = function (e) {
                            return window.React.createElement("getServerVarLoadString", [e]);
                        }),
                        (H.getServerVarLoadList = function (e) {
                            return window.React.createElement("getServerVarLoadList", [e]);
                        }),
                        (H.playButton = function (e) {
                            window.React.createElement("playButton", [e]);
                        }),
                        (H.signout = function () {
                            window.React.createElement("signout", []);
                        }),
                        (H.makeRandom = function (e) {
                            H.rng = new Cl(e);
                        }),
                        (H.getRandom = function () {
                            return null != H.rng ? H.rng.rand() : 0.25;
                        }),
                        (H.sendFriendMessage = function (e, t) {
                            window.React.createElement("sendFriendMessage", [e, t]);
                        }),
                        (H.addFriend = function (e) {
                            window.React.createElement("addFriend", [e]);
                        }),
                        (H.removeFriend = function (e) {
                            window.React.createElement("removeFriend", [e]);
                        }),
                        (H.getCurrentFriendsList = function () {
                            return window.React.createElement("getCurrentFriendsList", []);
                        }),
                        (H.analyticsEvent = function (e) {
                            window.React.createElement("analyticsEvent", [e]);
                        }),
                        (H.setPlayerStatic = function (t) {
                            var n = null != e.PlayerClass ? t.getReserved("PlayerClass") : t.h.PlayerClass,
                                a = null != e.P0 ? t.getReserved("P0") : t.h.P0,
                                s = null != e.P1 ? t.getReserved("P1") : t.h.P1,
                                r = null != e.SAWLFstats ? t.getReserved("SAWLFstats") : t.h.SAWLFstats;
                            if (!(null == (t = null != e.PlayerEquipmentOrder ? t.getReserved("PlayerEquipmentOrder") : t.h.PlayerEquipmentOrder) || 2 > t.length)) {
                                for (var A = [], l = [], o = 0, i = t[0].length; o < i; ) {
                                    var u = o++;
                                    "Blank" == (u = t[0][u]) && (u = H.BLANK_CHAR), A.push(u);
                                }
                                for (o = 0, i = t[1].length; o < i; ) (u = o++), "Blank" == (u = t[1][u]) && (u = H.BLANK_CHAR), l.push(u);
                                null != n && null != a && null != s && null != r && window.React.createElement("setPlayerStatic", [n, a, s, r, A, l]);
                            }
                        }),
                        (H.androidFinalizePurchase = function (e, t) {}),
                        (H.startBuy = function (e) {
                            window.React.createElement("startBuy", [e]);
                        }),
                        (H.cleanMarkedFiles = function (e) {
                            window.React.createElement("cleanMarkedFiles", [e]);
                        }),
                        (H.requestCreateGuild = function (e, t, n, a, s) {
                            window.React.createElement("requestCreateGuild", [e, t, n, a, s]);
                        }),
                        (H.getCreateGuildStatus = function () {
                            return window.React.createElement("getCreateGuildStatus", []);
                        }),
                        (H.requestJoinGuild = function (e, t, n) {
                            window.React.createElement("requestJoinGuild", [e, t, n]);
                        }),
                        (H.kickGuild = function (e) {
                            window.React.createElement("kickGuild", [e]);
                        }),
                        (H.leaveGuild = function () {
                            window.React.createElement("leaveGuild", []);
                        }),
                        (H.levelUpGuild = function (e) {
                            window.React.createElement("levelUpGuild", [e]);
                        }),
                        (H.handleGuildRequest = function (e, t) {
                            window.React.createElement("handleGuildRequest", [e, t]);
                        }),
                        (H.handleGuildRequestY = function (e) {
                            H.handleGuildRequest(e, !0);
                        }),
                        (H.handleGuildRequestN = function (e) {
                            H.handleGuildRequest(e, !1);
                        }),
                        (H.sendGuildMessage = function (e) {
                            window.React.createElement("sendGuildMessage", [e]);
                        }),
                        (H.guildPointAdjust = function (e) {
                            window.React.createElement("guildPointAdjust", [e]);
                        }),
                        (H.guildChangeRank = function (e, t) {
                            window.React.createElement("guildChangeRank", [e, t]);
                        }),
                        (H.getGuildMembers = function () {
                            return window.React.createElement("getGuildMembers", []);
                        }),
                        (H.getGuildApplicants = function () {
                            return window.React.createElement("getGuildApplicants", []);
                        }),
                        (H.getGuildEvents = function () {
                            return window.React.createElement("getGuildEvents", []);
                        }),
                        (H.acceptGuildInvite = function (e, t, n, a) {
                            window.React.createElement("acceptGuildInvite", [e, t, n, a]);
                        }),
                        (H.rejectGuildInvite = function (e) {
                            window.React.createElement("rejectGuildInvite", [e]);
                        }),
                        (H.updateGuildRep = function (e, t, n) {
                            window.React.createElement("updateGuildRep", [e, t, n]);
                        }),
                        (H.getFromGuild = function (e) {
                            return window.React.createElement("getFromGuild", [e]);
                        }),
                        (H.sendGuildInvite = function (e) {
                            window.React.createElement("sendGuildInvite", [e]);
                        }),
                        (H.getGuildPoints = function () {
                            return window.React.createElement("getGuildPoints", []);
                        }),
                        (H.setWantedBonus = function (e) {
                            window.React.createElement("setWantedBonus", [e]);
                        }),
                        (H.changeTopBarColor = function (e) {
                            window.React.createElement("changeTopBarColor", [e]);
                        }),
                        (H.setRich = function (e, t, n) {
                            window.React.createElement("setRich", [e, t, n]);
                        }),
                        (H.areaCheck = function (e) {
                            window.React.createElement("areaCheck", [e]);
                        }),
                        (H.isElectron = function () {
                            return window.React.createElement("isElectron", []);
                        }),
                        (H.setPartyId = function (e) {}),
                        (H.partyDealDamage = function (e, t, n, a) {
                            window.React.createElement("partyDealDamage", [e, t, n, a]);
                        }),
                        (H.partyCastAbility = function (e, t, n, a) {
                            window.React.createElement("partyCastAbility", [e, t, n, a]);
                        }),
                        (H.partyOther = function (e, t, n, a) {
                            window.React.createElement("partyOther", [e, t, n, a]);
                        }),
                        (H.partySendInvite = function (e) {
                            window.React.createElement("partySendInvite", [e]);
                        }),
                        (H.partyAcceptInvite = function (e) {
                            window.React.createElement("partyAcceptInvite", [e]);
                        }),
                        (H.partyRejectInvite = function (e) {
                            window.React.createElement("partyRejectInvite", [e]);
                        }),
                        (H.leaveCurrentParty = function () {
                            window.React.createElement("leaveCurrentParty", []);
                        }),
                        (H.createParty = function () {
                            window.React.createElement("createParty", []);
                        }),
                        (H.givePartyLeader = function (e) {
                            window.React.createElement("givePartyLeader", [e]);
                        }),
                        (H.requestPartyInvite = function (e) {
                            window.React.createElement("requestPartyInvite", [e]);
                        }),
                        (H.getPartyMembers = function () {
                            return window.React.createElement("getPartyMembers", []);
                        }),
                        (H.getPartyInvites = function () {
                            return window.React.createElement("getPartyInvites", []);
                        }),
                        (H.getPartyRequests = function () {
                            return window.React.createElement("getPartyRequests", []);
                        }),
                        (H.getPartyEvents = function () {
                            return window.React.createElement("getPartyEvents", []);
                        }),
                        (H.startPartyDungeon = function (e) {
                            window.React.createElement("startPartyDungeon", [e]);
                        }),
                        (H.kickParty = function (e) {
                            window.React.createElement("kickParty", [e]);
                        }),
                        (H.removePartyRequest = function (e) {
                            window.React.createElement("removePartyRequest", [e]);
                        }),
                        (H.getDelta = function () {
                            for (var e = H.jsGetDelta(), t = [], n = 0; n < e.length; ) {
                                var a = e[n];
                                if ((++n, !(3 > a.length))) {
                                    var s = a[0],
                                        r = a[1];
                                    if ("JOIN" == s) H.currentCount < H.CAP ? (t.push(a), H.currentCount++) : H.extraPlayers.push(a);
                                    else {
                                        if ("REMOVE" == s) {
                                            s = !0;
                                            for (var A = 0, l = H.extraPlayers.length; A < l; ) {
                                                var o = A++;
                                                if (H.extraPlayers[o][1] == r) {
                                                    (s = !1), H.extraPlayers.splice(o, 1);
                                                    break;
                                                }
                                            }
                                            s && (0 < H.extraPlayers.length ? t.push(H.extraPlayers.shift()) : H.currentCount--);
                                        }
                                        t.push(a);
                                    }
                                }
                            }
                            return t;
                        }),
                        (H.callFunction = function (e, t) {
                            return window.React.createElement(e, t);
                        }),
                        (H.callFunction0 = function (e) {
                            return window.React.createElement(e, []);
                        }),
                        (H.callFunction1 = function (e, t) {
                            return window.React.createElement(e, [t]);
                        }),
                        (H.callFunction2 = function (e, t, n) {
                            return window.React.createElement(e, [t, n]);
                        }),
                        (H.callFunction3 = function (e, t, n, a) {
                            return window.React.createElement(e, [t, n, a]);
                        }),
                        (H.callFunction4 = function (e, t, n, a, s) {
                            return window.React.createElement(e, [t, n, a, s]);
                        }),
                        (H.callFunction5 = function (e, t, n, a, s, r) {
                            return window.React.createElement(e, [t, n, a, s, r]);
                        }),
                        (H.callFunction6 = function (e, t, n, a, s, r, A) {
                            return window.React.createElement(e, [t, n, a, s, r, A]);
                        }),
                        (H.jsSetPlayerDisplay = function (e) {
                            window.jsSetPlayerDisplay(e);
                        }),
                        (H.jsGetDelta = function () {
                            for (var e = window.jsGetDelta(), t = [], n = 0; n < e.length; ) {
                                var a = e[n];
                                ++n;
                                var s = Ic.parse(a[2]);
                                t.push([a[0], a[1], s]);
                            }
                            return t;
                        }),
                        (H.megaParse = function (t) {
                            for (var n = !0, a = 0, s = 0, r = Fe.fields(t); s < r.length; ) {
                                var A = r[s];
                                if ((++s, (null == a ? "null" : "" + a) != A)) {
                                    n = !1;
                                    break;
                                }
                                ++a;
                            }
                            if (n) {
                                for (n = [], a = 0, s = Fe.fields(t); a < s.length; ) (r = s[a]), ++a, n.push(H.parseItem(t, r));
                                return n;
                            }
                            for (n = new p(), a = 0, s = Fe.fields(t); a < s.length; ) (r = s[a]), ++a, (A = H.parseItem(t, r)), null != e[r] ? n.setReserved(r, A) : (n.h[r] = A);
                            return n;
                        }),
                        (H.parseItem = function (e, t) {
                            var n = "string" == typeof e[t],
                                a = d.__instanceof(e[t], l),
                                s = "number" == typeof e[t],
                                r = e[t];
                            return n ? (7 < (e = e[t]).length && "___JSON" == e.substring(0, 7) ? Ic.parse(e.substring(7)) : e) : !n && null != Fe.fields(r) && 0 < Fe.fields(r).length ? H.megaParse(r) : a || s ? e[t] : null;
                        });
                    var Qc = function () {};
                    (v.HxOverrides = Qc),
                        (Qc.__name__ = "HxOverrides"),
                        (Qc.strDate = function (e) {
                            switch (e.length) {
                                case 8:
                                    e = e.split(":");
                                    var t = new Date();
                                    return t.setTime(0), t.setUTCHours(e[0]), t.setUTCMinutes(e[1]), t.setUTCSeconds(e[2]), t;
                                case 10:
                                    return (e = e.split("-")), new Date(e[0], e[1] - 1, e[2], 0, 0, 0);
                                case 19:
                                    return (t = e.split(" ")), (e = t[0].split("-")), (t = t[1].split(":")), new Date(e[0], e[1] - 1, e[2], t[0], t[1], t[2]);
                                default:
                                    throw new Gc("Invalid date format : " + e);
                            }
                        }),
                        (Qc.cca = function (e, t) {
                            if ((e = e.charCodeAt(t)) == e) return e;
                        }),
                        (Qc.substr = function (e, t, n) {
                            if (null == n) n = e.length;
                            else if (0 > n) {
                                if (0 != t) return "";
                                n = e.length + n;
                            }
                            return e.substr(t, n);
                        }),
                        (Qc.remove = function (e, t) {
                            return -1 != (t = e.indexOf(t)) && (e.splice(t, 1), !0);
                        }),
                        (Qc.iter = function (e) {
                            return {
                                cur: 0,
                                arr: e,
                                hasNext: function () {
                                    return this.cur < this.arr.length;
                                },
                                next: function () {
                                    return this.arr[this.cur++];
                                },
                            };
                        });
                    var bg = function (e, t) {
                        (this.min = e), (this.max = t);
                    };
                    (v.IntIterator = bg),
                        (bg.__name__ = "IntIterator"),
                        (bg.prototype = {
                            min: null,
                            max: null,
                            hasNext: function () {
                                return this.min < this.max;
                            },
                            next: function () {
                                return this.min++;
                            },
                            __class__: bg,
                        });
                    var Eg = function () {};
                    (v.Lambda = Eg),
                        (Eg.__name__ = "Lambda"),
                        (Eg.array = function (e) {
                            var t = [];
                            for (e = Ad(e); e.hasNext(); ) {
                                var n = e.next();
                                t.push(n);
                            }
                            return t;
                        }),
                        (Eg.count = function (e, t) {
                            var n = 0;
                            if (null == t) for (t = Ad(e); t.hasNext(); ) t.next(), ++n;
                            else
                                for (e = Ad(e); e.hasNext(); ) {
                                    t(e.next()) && ++n;
                                }
                            return n;
                        }),
                        (Eg.indexOf = function (e, t) {
                            var n = 0;
                            for (e = Ad(e); e.hasNext(); ) {
                                if (t == e.next()) return n;
                                ++n;
                            }
                            return -1;
                        });
                    var Qk = function () {};
                    (v.ManifestResources = Qk),
                        (Qk.__name__ = "ManifestResources"),
                        (Qk.init = function (e) {
                            (Qk.preloadLibraries = []),
                                (Qk.preloadLibraryNames = []),
                                (Qk.rootPath = null),
                                null != e && Object.prototype.hasOwnProperty.call(e, "rootPath") && (Qk.rootPath = Fe.field(e, "rootPath")),
                                null == Qk.rootPath && (Qk.rootPath = "./"),
                                (e = e = lt.fromManifest(e)),
                                Gf.registerLibrary("default", e),
                                null != (e = Gf.getLibrary("default")) ? Qk.preloadLibraries.push(e) : Qk.preloadLibraryNames.push("default");
                        }),
                        (Math.__name__ = "Math");
                    var Cl = function (e) {
                        this.init(e);
                    };
                    (v.Rand = Cl),
                        (Cl.__name__ = "Rand"),
                        (Cl.hash = function (e, t) {
                            return (
                                null == t && (t = 5381),
                                (e = yE._mul(e, -862048943)),
                                (t ^= e = yE._mul((e << 15) | (e >>> 17), 461845907)),
                                (t = (yE._mul((t << 13) | (t >>> 19), 5) + -430675100) | 0),
                                (t = yE._mul(t ^ (t >> 16), -2048144789)),
                                (t = yE._mul(t ^ (t >> 13), -1028477387)) ^ (t >> 16)
                            );
                        }),
                        (Cl.inlineHash = function (e, t) {
                            return (
                                (e = yE._mul(e, -862048943)),
                                (t ^= e = yE._mul((e << 15) | (e >>> 17), 461845907)),
                                (t = (yE._mul((t << 13) | (t >>> 19), 5) + -430675100) | 0),
                                (t = yE._mul(t ^ (t >> 16), -2048144789)),
                                (t = yE._mul(t ^ (t >> 13), -1028477387)) ^ (t >> 16)
                            );
                        }),
                        (Cl.prototype = {
                            seed: null,
                            seed2: null,
                            init: function (e) {
                                (this.seed = e), (this.seed2 = Cl.hash(e)), 0 == this.seed && (this.seed = 1), 0 == this.seed2 && (this.seed2 = 1);
                            },
                            random: function (e) {
                                return (this.seed = 36969 * (65535 & this.seed) + (this.seed >> 16)), (this.seed2 = 18e3 * (65535 & this.seed2) + (this.seed2 >> 16)), (1073741823 & (((this.seed << 16) + this.seed2) | 0)) % e;
                            },
                            shuffle: function (e) {
                                for (var t = e.length, n = 0; n < t; ) {
                                    n++, (this.seed = 36969 * (65535 & this.seed) + (this.seed >> 16)), (this.seed2 = 18e3 * (65535 & this.seed2) + (this.seed2 >> 16));
                                    var a = (1073741823 & (((this.seed << 16) + this.seed2) | 0)) % t;
                                    (this.seed = 36969 * (65535 & this.seed) + (this.seed >> 16)), (this.seed2 = 18e3 * (65535 & this.seed2) + (this.seed2 >> 16));
                                    var s = (1073741823 & (((this.seed << 16) + this.seed2) | 0)) % t,
                                        r = e[a];
                                    (e[a] = e[s]), (e[s] = r);
                                }
                            },
                            rand: function () {
                                return (this.seed = 36969 * (65535 & this.seed) + (this.seed >> 16)), (this.seed2 = 18e3 * (65535 & this.seed2) + (this.seed2 >> 16)), ((1073741823 & (((this.seed << 16) + this.seed2) | 0)) % 10007) / 10007;
                            },
                            srand: function (e) {
                                return (
                                    null == e && (e = 1),
                                    (this.seed = 36969 * (65535 & this.seed) + (this.seed >> 16)),
                                    (this.seed2 = 18e3 * (65535 & this.seed2) + (this.seed2 >> 16)),
                                    (((((this.seed << 16) + this.seed2) | 0) % 10007) / 10007) * e
                                );
                            },
                            int: function () {
                                return (this.seed = 36969 * (65535 & this.seed) + (this.seed >> 16)), (this.seed2 = 18e3 * (65535 & this.seed2) + (this.seed2 >> 16)), ((this.seed << 16) + this.seed2) | 0;
                            },
                            uint: function () {
                                return (this.seed = 36969 * (65535 & this.seed) + (this.seed >> 16)), (this.seed2 = 18e3 * (65535 & this.seed2) + (this.seed2 >> 16)), 1073741823 & (((this.seed << 16) + this.seed2) | 0);
                            },
                            __class__: Cl,
                        });
                    var Fe = function () {};
                    (v.Reflect = Fe),
                        (Fe.__name__ = "Reflect"),
                        (Fe.field = function (e, t) {
                            try {
                                return e[t];
                            } catch (e) {
                                return (yf.lastException = e), null;
                            }
                        }),
                        (Fe.getProperty = function (e, t) {
                            var n;
                            return null == e ? null : !!e.__properties__ && (n = e.__properties__["get_" + t]) ? e[n]() : e[t];
                        }),
                        (Fe.setProperty = function (e, t, n) {
                            var a;
                            !!e.__properties__ && (a = e.__properties__["set_" + t]) ? e[a](n) : (e[t] = n);
                        }),
                        (Fe.fields = function (e) {
                            var t = [];
                            if (null != e) {
                                var n,
                                    a = Object.prototype.hasOwnProperty;
                                for (n in e) "__id__" != n && "hx__closures__" != n && a.call(e, n) && t.push(n);
                            }
                            return t;
                        }),
                        (Fe.isFunction = function (e) {
                            return "function" == typeof e && !(e.__name__ || e.__ename__);
                        }),
                        (Fe.compare = function (e, t) {
                            return e == t ? 0 : e > t ? 1 : -1;
                        }),
                        (Fe.compareMethods = function (e, t) {
                            return e == t || (!(!Fe.isFunction(e) || !Fe.isFunction(t)) && e.scope == t.scope && e.method == t.method && null != e.method);
                        }),
                        (Fe.isObject = function (e) {
                            if (null == e) return !1;
                            var t = typeof e;
                            return "string" == t || ("object" == t && null == e.__enum__) || ("function" == t && null != (e.__name__ || e.__ename__));
                        }),
                        (Fe.isEnumValue = function (e) {
                            return null != e && null != e.__enum__;
                        }),
                        (Fe.deleteField = function (e, t) {
                            return !!Object.prototype.hasOwnProperty.call(e, t) && (delete e[t], !0);
                        }),
                        (Fe.makeVarArgs = function (e) {
                            return function () {
                                var t = Array.prototype.slice.call(arguments);
                                return e(t);
                            };
                        });
                    var ie = function (e, t) {
                        null == t && (t = 2), (this.swipeTimeout = 0.1), (this.longPressDelay = 1);
                        var n = this;
                        if (!ie.initialized) {
                            ie.initialized = !0;
                            var a = Hh.get_current().stage;
                            (ie.moveToleSqr = 0.008 * new wf(a.stageWidth, a.stageHeight).get_length()), (ie.moveToleSqr *= ie.moveToleSqr), $x.get_supportsTouchEvents() && ($x.inputMode = 2);
                        }
                        for (
                            this.owner = e,
                                this.mode = t,
                                e = $x.get_supportsTouchEvents(),
                                this.owner.mouseEnabled = !0,
                                this.listenEvents = 1 == this.mode ? (e ? ie.touchEvents : ie.mouseEvents) : e ? ie.geTouchEvents : ie.geMouseEvents,
                                this.handler = 1 == this.mode ? N(this, e ? this.convertTouch : this.convertMouse) : N(this, e ? this.onTouch : this.onMouse),
                                e = 0,
                                t = this.listenEvents;
                            e < t.length;

                        )
                            (a = t[e]), ++e, this.owner.addEventListener(a, this.handler);
                        3 == this.mode &&
                            Hh.get_current().stage.addEventListener("resize", function (e) {
                                n.overlay = null;
                            }),
                            (this.touchList = new Sp()),
                            this.setReady();
                    };
                    (v.RoxGestureAgent = ie),
                        (ie.__name__ = "RoxGestureAgent"),
                        (ie.__properties__ = { get_multitouchSupported: "get_multitouchSupported" }),
                        (ie.init = function () {
                            if (!ie.initialized) {
                                ie.initialized = !0;
                                var e = Hh.get_current().stage;
                                (ie.moveToleSqr = 0.008 * new wf(e.stageWidth, e.stageHeight).get_length()), (ie.moveToleSqr *= ie.moveToleSqr), $x.get_supportsTouchEvents() && ($x.inputMode = 2);
                            }
                        }),
                        (ie.localOffset = function (e, t) {
                            var n = e.parent.localToGlobal(new wf(e.get_x(), e.get_y()));
                            return n.offset(t.x, t.y), (n = e.parent.globalToLocal(n)).offset(-e.get_x(), -e.get_y()), n;
                        }),
                        (ie.get_multitouchSupported = function () {
                            return !!$x.get_supportsTouchEvents() && 1 < $x.maxTouchPoints;
                        }),
                        (ie.initTypeMap = function () {
                            for (var t = new p(), n = 0, a = ie.MAP.length >> 1; n < a; ) {
                                var s = n++,
                                    r = ie.MAP[s << 1];
                                (s = ie.MAP[1 + (s << 1)]), null != e[r] ? t.setReserved(r, s) : (t.h[r] = s);
                            }
                            return t;
                        }),
                        (ie.prototype = {
                            mode: null,
                            longPressDelay: null,
                            swipeTimeout: null,
                            owner: null,
                            touch0: null,
                            touch1: null,
                            touchList: null,
                            listenEvents: null,
                            handler: null,
                            longPressTimer: null,
                            tweener: null,
                            overlay: null,
                            state: null,
                            detach: function () {
                                null != this.tweener && (Xq.cancel(this.tweener), (this.tweener = null)), this.setReady();
                                for (var e = 0, t = this.listenEvents; e < t.length; ) {
                                    var n = t[e];
                                    ++e, this.owner.removeEventListener(n, this.handler);
                                }
                                this.overlay = this.owner = null;
                            },
                            getHandler: function (e) {
                                null == e && (e = 3);
                                var t = N(this, this.handleEvent),
                                    n = e;
                                return function (e) {
                                    t(n, e);
                                };
                            },
                            startTweenXY: function (e, t, n, a) {
                                var s = this;
                                (this.tweener = new eL()),
                                    this.tweener.tween(e.get_x(), n, e.get_y(), a, G.linear, (1e3 * t) | 0).doOnUpdate(function () {
                                        e.set_x(s.tweener.value1), e.set_y(s.tweener.value2);
                                    });
                            },
                            stopTween: function () {
                                null != this.tweener && (Xq.cancel(this.tweener), (this.tweener = null));
                            },
                            handleEvent: function (e, t) {
                                var n = t.target;
                                if (n == this.owner)
                                    switch (t.type) {
                                        case "rox_gesture_pan":
                                            t = t.extra;
                                            var a = n.parent.localToGlobal(new wf(n.get_x(), n.get_y()));
                                            a.offset(t.x, t.y), (a = n.parent.globalToLocal(a)).offset(-n.get_x(), -n.get_y()), (t = a), 0 != (1 & e) && n.set_x(n.get_x() + t.x), 0 != (2 & e) && n.set_y(n.get_y() + t.y);
                                            break;
                                        case "rox_gesture_pinch":
                                            e = t.extra;
                                            var s = n.parent.localToGlobal(new wf(n.get_x(), n.get_y()));
                                            a = s.x - t.stageX;
                                            var r = s.y - t.stageY;
                                            (s = Math.atan2(r, a)),
                                                (a = new wf(a, r).get_length()),
                                                (a = wf.polar(a * e, s)).offset(t.stageX, t.stageY),
                                                (a = n.parent.globalToLocal(a)),
                                                n.set_scaleX(n.get_scaleX() * e),
                                                n.set_scaleY(n.get_scaleY() * e),
                                                n.set_x(a.x),
                                                n.set_y(a.y);
                                            break;
                                        case "rox_gesture_rotation":
                                            (e = t.extra),
                                                (a = (s = n.parent.localToGlobal(new wf(n.get_x(), n.get_y()))).x - t.stageX),
                                                (r = s.y - t.stageY),
                                                (s = Math.atan2(r, a)),
                                                (a = new wf(a, r).get_length()),
                                                (a = wf.polar(a, s + e)).offset(t.stageX, t.stageY),
                                                (a = n.parent.globalToLocal(a)),
                                                n.set_rotation(n.get_rotation() + ie.R2D * e),
                                                n.set_x(a.x),
                                                n.set_y(a.y);
                                            break;
                                        case "rox_gesture_swipe":
                                            (t = new wf(2 * t.extra.x, 2 * t.extra.y)),
                                                (e = n.parent.localToGlobal(new wf(n.get_x(), n.get_y()))).offset(t.x, t.y),
                                                (e = n.parent.globalToLocal(e)).offset(-n.get_x(), -n.get_y()),
                                                (t = n.get_x() + e.x),
                                                (e = n.get_y() + e.y);
                                            var A = this;
                                            (this.tweener = new eL()),
                                                this.tweener.tween(n.get_x(), t, n.get_y(), e, G.linear, 2e3).doOnUpdate(function () {
                                                    n.set_x(A.tweener.value1), n.set_y(A.tweener.value2);
                                                });
                                    }
                            },
                            convertTouch: function (t) {
                                var n = t.type,
                                    a = ie.typeMap;
                                this.owner.dispatchEvent(new ho(null != e[n] ? a.getReserved(n) : a.h[n], t.bubbles, t.cancelable, t.localX, t.localY, t.stageX, t.stageY, t.touchPointID, this));
                            },
                            convertMouse: function (t) {
                                var n = t.type;
                                if ("mouseDown" == n || "mouseUp" == n || "click" == n || t.buttonDown) {
                                    var a = ie.typeMap;
                                    this.owner.dispatchEvent(new ho(null != e[n] ? a.getReserved(n) : a.h[n], t.bubbles, t.cancelable, t.localX, t.localY, t.stageX, t.stageY, 0, this));
                                }
                            },
                            onTouch: function (t) {
                                var n = t.touchPointID,
                                    a = null == this.touch0 || this.touch0.tid == n;
                                if (a || (null != this.touch1 && this.touch1.tid == n) || (null != this.touch0 && null == this.touch1 && this.touch0.tid != n)) {
                                    var s = t.type,
                                        r = ie.typeMap;
                                    this.handleTouch(null != e[s] ? r.getReserved(s) : r.h[s], t, a, n);
                                }
                            },
                            onMouse: function (t) {
                                var n = t.type;
                                if ("mouseDown" == n || "mouseUp" == n || t.buttonDown) {
                                    var a = ie.typeMap;
                                    this.handleTouch(null != e[n] ? a.getReserved(n) : a.h[n], t, !0, 0);
                                }
                            },
                            handleTouch: function (e, t, n, a) {
                                var s = new Bi(this.owner, t, a),
                                    r = n ? this.touch0 : this.touch1;
                                if (("rox_touch_move" == e && null != r ? (a = (a = r.sx - s.sx) * a + (r = r.sy - s.sy) * r < ie.moveToleSqr) : (a = !1), a)) return !1;
                                switch (((a = !0), this.state)) {
                                    case 0:
                                        if (n && "rox_touch_begin" == e) {
                                            (this.state = 1), (this.touch0 = s);
                                            var A = N(this, this.sendLongPress);
                                            if (
                                                ((this.longPressTimer = Xq.timer((1e3 * this.longPressDelay) | 0).doOnComplete(function () {
                                                    A(s);
                                                })),
                                                null != this.tweener && (Xq.cancel(this.tweener), (this.tweener = null)),
                                                3 == this.mode)
                                            )
                                                for (
                                                    n = Hh.get_current().stage,
                                                        null == this.overlay &&
                                                            ((this.overlay = new Yb()),
                                                            this.overlay.set_name("overlay"),
                                                            this.overlay.get_graphics().beginFill(16777215, 0.00392156862745098),
                                                            this.overlay.get_graphics().drawRect(0, 0, n.stageWidth, n.stageHeight)),
                                                        n.addChild(this.overlay),
                                                        n = 0,
                                                        e = this.listenEvents;
                                                    n < e.length;

                                                )
                                                    (t = e[n]), ++n, this.overlay.addEventListener(t, this.handler);
                                        } else a = !1;
                                        break;
                                    case 1:
                                        n && "rox_touch_end" == e
                                            ? (this.owner.dispatchEvent(new ho("rox_gesture_tap", null, null, s.lx, s.ly, s.sx, s.sy, null, this)), this.setReady())
                                            : n && "rox_touch_move" == e
                                            ? ((n = new wf(s.sx - this.touch0.sx, s.sy - this.touch0.sy)),
                                              this.owner.dispatchEvent(new ho("rox_gesture_pan", null, null, s.lx, s.ly, s.sx, s.sy, null, this, n)),
                                              (this.state = 4),
                                              null != this.touch0 && this.touchList.push(this.touch0),
                                              (this.touch0 = s),
                                              null != this.longPressTimer && (Xq.cancel(this.longPressTimer), (this.longPressTimer = null)))
                                            : n || "rox_touch_begin" != e
                                            ? (a = !1)
                                            : ((this.state = 2), (this.touch1 = s), null != this.longPressTimer && (Xq.cancel(this.longPressTimer), (this.longPressTimer = null)));
                                        break;
                                    case 2:
                                        if ("rox_touch_end" == e) this.owner.dispatchEvent(new ho("rox_gesture_end", null, null, s.lx, s.ly, s.sx, s.sy, null, this)), this.setReady();
                                        else if ("rox_touch_move" == e) {
                                            r = n ? this.touch1 : this.touch0;
                                            var l = n ? this.touch0 : this.touch1;
                                            (e = wf.distance(s.spt, r.spt) / wf.distance(l.spt, r.spt)),
                                                (t = Math.atan2(s.sy - r.sy, s.sx - r.sx) - Math.atan2(l.sy - r.sy, l.sx - r.sx)),
                                                (r = wf.interpolate(r.lpt, l.lpt, 0.5)),
                                                (l = this.owner.localToGlobal(r)),
                                                1 != e && this.owner.dispatchEvent(new ho("rox_gesture_pinch", null, null, r.x, r.y, l.x, l.y, null, this, e)),
                                                0 != t && this.owner.dispatchEvent(new ho("rox_gesture_rotation", null, null, r.x, r.y, l.x, l.y, null, this, t)),
                                                n ? (this.touch0 = s) : (this.touch1 = s);
                                        } else a = !1;
                                        break;
                                    case 4:
                                        if (n && "rox_touch_move" == e)
                                            (n = new wf(s.sx - this.touch0.sx, s.sy - this.touch0.sy)),
                                                this.owner.dispatchEvent(new ho("rox_gesture_pan", null, null, s.lx, s.ly, s.sx, s.sy, null, this, n)),
                                                (this.state = 4),
                                                null != this.touch0 && this.touchList.push(this.touch0),
                                                (this.touch0 = s),
                                                null != this.longPressTimer && (Xq.cancel(this.longPressTimer), (this.longPressTimer = null));
                                        else if (n && ("rox_touch_end" == e || (3 != this.mode && "rox_touch_out" == e && t.target == this.owner))) {
                                            if (0 >= this.swipeTimeout || s.time - this.touch0.time < this.swipeTimeout) {
                                                for (n = this.touchList.pop(), e = null, t = this.touchList.h; null != t && ((r = t.item), (t = t.next), !(0.2 < n.time - r.time)); ) e = r;
                                                null != e &&
                                                    ((t = n.sy - e.sy),
                                                    (r = n.sx - e.sx),
                                                    (l = Math.atan2(t, r)),
                                                    (n = wf.polar((new wf(r, t).get_length() / (n.time - e.time)) * 0.25, l)),
                                                    this.owner.dispatchEvent(new ho("rox_gesture_swipe", null, null, s.lx, s.ly, s.sx, s.sy, null, this, n)));
                                            }
                                            this.setReady();
                                        } else
                                            n || "rox_touch_begin" != e
                                                ? (a = !1)
                                                : (this.owner.dispatchEvent(new ho("rox_gesture_begin", null, null, s.lx, s.ly, s.sx, s.sy, null, this)),
                                                  (this.state = 2),
                                                  (this.touch1 = s),
                                                  null != this.longPressTimer && (Xq.cancel(this.longPressTimer), (this.longPressTimer = null)));
                                }
                                return a;
                            },
                            sendLongPress: function (e) {
                                this.owner.dispatchEvent(new ho("rox_gesture_long_press", null, null, e.lx, e.ly, e.sx, e.sy, null, this)), this.setReady();
                            },
                            setReady: function () {
                                if (
                                    ((this.state = 0),
                                    (this.touch0 = this.touch1 = null),
                                    this.touchList.clear(),
                                    null != this.longPressTimer && (Xq.cancel(this.longPressTimer), (this.longPressTimer = null)),
                                    null != this.overlay && 3 == this.mode)
                                ) {
                                    for (var e = 0, t = this.listenEvents; e < t.length; ) {
                                        var n = t[e];
                                        ++e, this.overlay.removeEventListener(n, this.handler);
                                    }
                                    Hh.get_current().stage.removeChild(this.overlay);
                                }
                            },
                            setMove: function (e) {
                                (this.state = 4), null != this.touch0 && this.touchList.push(this.touch0), (this.touch0 = e), null != this.longPressTimer && (Xq.cancel(this.longPressTimer), (this.longPressTimer = null));
                            },
                            setTwoFingerMove: function (e) {
                                (this.state = 2), (this.touch1 = e), null != this.longPressTimer && (Xq.cancel(this.longPressTimer), (this.longPressTimer = null));
                            },
                            cancelLongPress: function () {
                                null != this.longPressTimer && (Xq.cancel(this.longPressTimer), (this.longPressTimer = null));
                            },
                            __class__: ie,
                        });
                    var Bi = function (e, t, n) {
                        (this.tid = n),
                            (this.sx = t.stageX),
                            (this.sy = t.stageY),
                            (this.spt = new wf(this.sx, this.sy)),
                            (this.lpt = e.globalToLocal(this.spt)),
                            (this.lx = this.lpt.x),
                            (this.ly = this.lpt.y),
                            (this.time = new Date().getTime() / 1e3);
                    };
                    (v["_RoxGestureAgent.TouchPoint"] = Bi),
                        (Bi.__name__ = "_RoxGestureAgent.TouchPoint"),
                        (Bi.prototype = {
                            tid: null,
                            lx: null,
                            ly: null,
                            sx: null,
                            sy: null,
                            lpt: null,
                            spt: null,
                            time: null,
                            distSqr: function (e) {
                                var t = e.sx - this.sx;
                                return t * t + (e = e.sy - this.sy) * e;
                            },
                            __class__: Bi,
                        });
                    var Uf = function (e, t, n) {
                        (this.__pool = new Ug()),
                            (this.inactiveObjects = this.activeObjects = 0),
                            (this.__inactiveObject1 = this.__inactiveObject0 = null),
                            (this.__inactiveObjectList = new Sp()),
                            null != e && (this.create = e),
                            null != t && (this.clean = t),
                            null != n && this.set_size(n);
                    };
                    (v["lime.utils.ObjectPool"] = Uf),
                        (Uf.__name__ = "lime.utils.ObjectPool"),
                        (Uf.prototype = {
                            activeObjects: null,
                            inactiveObjects: null,
                            __inactiveObject0: null,
                            __inactiveObject1: null,
                            __inactiveObjectList: null,
                            __pool: null,
                            __size: null,
                            add: function (e) {
                                this.__pool.exists(e) ||
                                    (this.__pool.set(e, !1),
                                    this.clean(e),
                                    this.__pool.set(e, !1),
                                    null == this.__inactiveObject0 ? (this.__inactiveObject0 = e) : null == this.__inactiveObject1 ? (this.__inactiveObject1 = e) : this.__inactiveObjectList.add(e),
                                    this.inactiveObjects++);
                            },
                            clean: function (e) {},
                            clear: function () {
                                (this.__pool = new Ug()), (this.inactiveObjects = this.activeObjects = 0), (this.__inactiveObject1 = this.__inactiveObject0 = null), this.__inactiveObjectList.clear();
                            },
                            create: function () {
                                return null;
                            },
                            get: function () {
                                var e = null;
                                return (
                                    0 < this.inactiveObjects
                                        ? (null != this.__inactiveObject0
                                              ? ((e = this.__inactiveObject0), (this.__inactiveObject0 = null))
                                              : null != this.__inactiveObject1
                                              ? ((e = this.__inactiveObject1), (this.__inactiveObject1 = null))
                                              : ((e = this.__inactiveObjectList.pop()),
                                                0 < this.__inactiveObjectList.length && (this.__inactiveObject0 = this.__inactiveObjectList.pop()),
                                                0 < this.__inactiveObjectList.length && (this.__inactiveObject1 = this.__inactiveObjectList.pop())),
                                          this.__pool.set(e, !0),
                                          this.inactiveObjects--,
                                          this.activeObjects++)
                                        : (null == this.__size || this.activeObjects < this.__size) && null != (e = this.create()) && (this.__pool.set(e, !0), this.activeObjects++),
                                    e
                                );
                            },
                            release: function (e) {
                                this.__pool.exists(e)
                                    ? this.__pool.get(e) || Vh.error("Object has already been released", { fileName: "lime/utils/ObjectPool.hx", lineNumber: 106, className: "lime.utils.ObjectPool", methodName: "release" })
                                    : Vh.error("Object is not a member of the pool", { fileName: "lime/utils/ObjectPool.hx", lineNumber: 102, className: "lime.utils.ObjectPool", methodName: "release" }),
                                    this.activeObjects--,
                                    null == this.__size || this.activeObjects + this.inactiveObjects < this.__size
                                        ? (this.clean(e),
                                          this.__pool.set(e, !1),
                                          null == this.__inactiveObject0 ? (this.__inactiveObject0 = e) : null == this.__inactiveObject1 ? (this.__inactiveObject1 = e) : this.__inactiveObjectList.add(e),
                                          this.inactiveObjects++)
                                        : this.__pool.remove(e);
                            },
                            remove: function (e) {
                                this.__pool.exists(e) &&
                                    (this.__pool.remove(e),
                                    this.__inactiveObject0 == e
                                        ? ((this.__inactiveObject0 = null), this.inactiveObjects--)
                                        : this.__inactiveObject1 == e
                                        ? ((this.__inactiveObject1 = null), this.inactiveObjects--)
                                        : this.__inactiveObjectList.remove(e)
                                        ? this.inactiveObjects--
                                        : this.activeObjects--);
                            },
                            __addInactive: function (e) {
                                this.__pool.set(e, !1),
                                    null == this.__inactiveObject0 ? (this.__inactiveObject0 = e) : null == this.__inactiveObject1 ? (this.__inactiveObject1 = e) : this.__inactiveObjectList.add(e),
                                    this.inactiveObjects++;
                            },
                            __getInactive: function () {
                                if (null != this.__inactiveObject0) {
                                    var e = this.__inactiveObject0;
                                    this.__inactiveObject0 = null;
                                } else
                                    null != this.__inactiveObject1
                                        ? ((e = this.__inactiveObject1), (this.__inactiveObject1 = null))
                                        : ((e = this.__inactiveObjectList.pop()),
                                          0 < this.__inactiveObjectList.length && (this.__inactiveObject0 = this.__inactiveObjectList.pop()),
                                          0 < this.__inactiveObjectList.length && (this.__inactiveObject1 = this.__inactiveObjectList.pop()));
                                return this.__pool.set(e, !0), this.inactiveObjects--, this.activeObjects++, e;
                            },
                            __removeInactive: function (e) {
                                if (
                                    !(0 >= e || 0 == this.inactiveObjects) &&
                                    (null != this.__inactiveObject0 && (this.__pool.remove(this.__inactiveObject0), (this.__inactiveObject0 = null), this.inactiveObjects--, --e),
                                    0 != e &&
                                        0 != this.inactiveObjects &&
                                        (null != this.__inactiveObject1 && (this.__pool.remove(this.__inactiveObject1), (this.__inactiveObject1 = null), this.inactiveObjects--, --e), 0 != e && 0 != this.inactiveObjects))
                                )
                                    for (var t = this.__inactiveObjectList.h; null != t; ) {
                                        var n = t.item;
                                        if (((t = t.next), this.__pool.remove(n), this.__inactiveObjectList.remove(n), this.inactiveObjects--, 0 == --e || 0 == this.inactiveObjects)) break;
                                    }
                            },
                            get_size: function () {
                                return this.__size;
                            },
                            set_size: function (e) {
                                if (null == e) this.__size = null;
                                else {
                                    var t = this.inactiveObjects + this.activeObjects;
                                    if (((this.__size = e), t > e)) this.__removeInactive(t - e);
                                    else if (e > t) for (var n = 0, a = e - t; n < a && (n++, null != (t = this.create())); ) this.__pool.set(t, !1), this.__inactiveObjectList.add(t), this.inactiveObjects++;
                                }
                                return e;
                            },
                            __class__: Uf,
                            __properties__: { set_size: "set_size", get_size: "get_size" },
                        });
                    var Fh = function () {};
                    (v["haxe.IMap"] = Fh), (Fh.__name__ = "haxe.IMap"), (Fh.__isInterface__ = !0), (Fh.prototype = { get: null, set: null, exists: null, remove: null, keys: null, iterator: null, keyValueIterator: null, __class__: Fh });
                    var Ug = function () {
                        this.h = { __keys__: {} };
                    };
                    (v["haxe.ds.ObjectMap"] = Ug),
                        (Ug.__name__ = "haxe.ds.ObjectMap"),
                        (Ug.__interfaces__ = [Fh]),
                        (Ug.prototype = {
                            h: null,
                            set: function (e, t) {
                                var n = e.__id__ || (e.__id__ = Ed.$haxeUID++);
                                (this.h[n] = t), (this.h.__keys__[n] = e);
                            },
                            get: function (e) {
                                return this.h[e.__id__];
                            },
                            exists: function (e) {
                                return null != this.h.__keys__[e.__id__];
                            },
                            remove: function (e) {
                                return (e = e.__id__), null != this.h.__keys__[e] && (delete this.h[e], delete this.h.__keys__[e], !0);
                            },
                            keys: function () {
                                var e,
                                    t = [];
                                for (e in this.h.__keys__) this.h.hasOwnProperty(e) && t.push(this.h.__keys__[e]);
                                return Qc.iter(t);
                            },
                            iterator: function () {
                                return {
                                    ref: this.h,
                                    it: this.keys(),
                                    hasNext: function () {
                                        return this.it.hasNext();
                                    },
                                    next: function () {
                                        var e = this.it.next();
                                        return this.ref[e.__id__];
                                    },
                                };
                            },
                            keyValueIterator: function () {
                                return new vU(this);
                            },
                            toString: function () {
                                for (var e = "{", t = this.keys(); t.hasNext(); ) {
                                    var n = t.next();
                                    (e += g.string(g.string(n))), (e += " => "), (e += g.string(g.string(this.h[n.__id__]))), t.hasNext() && (e += ", ");
                                }
                                return e + "}";
                            },
                            __class__: Ug,
                        });
                    var Sp = function () {
                        this.length = 0;
                    };
                    (v["haxe.ds.List"] = Sp),
                        (Sp.__name__ = "haxe.ds.List"),
                        (Sp.prototype = {
                            h: null,
                            q: null,
                            length: null,
                            add: function (e) {
                                (e = new r4(e, null)), null == this.h ? (this.h = e) : (this.q.next = e), (this.q = e), this.length++;
                            },
                            push: function (e) {
                                (this.h = e = new r4(e, this.h)), null == this.q && (this.q = e), this.length++;
                            },
                            pop: function () {
                                if (null == this.h) return null;
                                var e = this.h.item;
                                return (this.h = this.h.next), null == this.h && (this.q = null), this.length--, e;
                            },
                            clear: function () {
                                (this.q = this.h = null), (this.length = 0);
                            },
                            remove: function (e) {
                                for (var t = null, n = this.h; null != n; ) {
                                    if (n.item == e) return null == t ? (this.h = n.next) : (t.next = n.next), this.q == n && (this.q = t), this.length--, !0;
                                    (t = n), (n = n.next);
                                }
                                return !1;
                            },
                            iterator: function () {
                                return new B8(this.h);
                            },
                            __class__: Sp,
                        });
                    var ef = function (e, t, n) {
                        null == n && (n = !1), null == t && (t = !1), (this.type = e), (this.bubbles = t), (this.cancelable = n), (this.eventPhase = 2);
                    };
                    (v["openfl.events.Event"] = ef),
                        (ef.__name__ = "openfl.events.Event"),
                        (ef.prototype = {
                            bubbles: null,
                            cancelable: null,
                            currentTarget: null,
                            eventPhase: null,
                            target: null,
                            type: null,
                            __isCanceled: null,
                            __isCanceledNow: null,
                            __preventDefault: null,
                            clone: function () {
                                var e = new ef(this.type, this.bubbles, this.cancelable);
                                return (e.eventPhase = this.eventPhase), (e.target = this.target), (e.currentTarget = this.currentTarget), e;
                            },
                            formatToString: function (e, t, n, a, s, r) {
                                var A = [];
                                return null != t && A.push(t), null != n && A.push(n), null != a && A.push(a), null != s && A.push(s), null != r && A.push(r), N(this, this.__formatToString).apply(this, [e, A]);
                            },
                            isDefaultPrevented: function () {
                                return this.__preventDefault;
                            },
                            preventDefault: function () {
                                this.cancelable && (this.__preventDefault = !0);
                            },
                            stopImmediatePropagation: function () {
                                this.__isCanceledNow = this.__isCanceled = !0;
                            },
                            stopPropagation: function () {
                                this.__isCanceled = !0;
                            },
                            toString: function () {
                                return this.__formatToString("Event", ["type", "bubbles", "cancelable"]);
                            },
                            __formatToString: function (e, t) {
                                e = "[" + e;
                                for (var n, a = 0; a < t.length; ) {
                                    var s = t[a];
                                    ++a, (e = "string" == typeof (n = Fe.field(this, s)) ? e + " " + s + '="' + g.string(n) + '"' : e + " " + s + "=" + g.string(n));
                                }
                                return e + "]";
                            },
                            __init: function () {
                                (this.currentTarget = this.target = null), (this.cancelable = this.bubbles = !1), (this.eventPhase = 2), (this.__preventDefault = this.__isCanceledNow = this.__isCanceled = !1);
                            },
                            __class__: ef,
                        });
                    var ho = function (e, t, n, a, s, r, A, l, o, i) {
                        null == l && (l = 0),
                            null == n && (n = !1),
                            null == t && (t = !0),
                            ef.call(this, e, t, n),
                            (this.localX = a),
                            (this.localY = s),
                            (this.stageX = r),
                            (this.stageY = A),
                            (this.touchPointID = l),
                            (this.agent = o),
                            (this.extra = i);
                    };
                    (v.RoxGestureEvent = ho),
                        (ho.__name__ = "RoxGestureEvent"),
                        (ho.__super__ = ef),
                        (ho.prototype = K(ef.prototype, {
                            localX: null,
                            localY: null,
                            stageX: null,
                            stageY: null,
                            touchPointID: null,
                            agent: null,
                            extra: null,
                            toString: function () {
                                return (
                                    this.type +
                                    "(" +
                                    this.touchPointID +
                                    "): local=(" +
                                    this.localX +
                                    "," +
                                    this.localY +
                                    "), stage=(" +
                                    this.stageX +
                                    "," +
                                    this.stageY +
                                    "), extra=" +
                                    (this.extra instanceof wf ? "Point(" + g.string(this.extra.x) + "," + g.string(this.extra.y) + ")" : this.extra)
                                );
                            },
                            __class__: ho,
                        }));
                    var g = function () {};
                    (v.Std = g),
                        (g.__name__ = "Std"),
                        (g.string = function (e) {
                            return d.__string_rec(e, "");
                        }),
                        (g.parseInt = function (e) {
                            return (e = parseInt(e, !e || "0" != e[0] || ("x" != e[1] && "X" != e[1]) ? 10 : 16)), isNaN(e) ? null : e;
                        });
                    var yA = function () {};
                    (v["_String.String_Impl_"] = yA),
                        (yA.__name__ = "_String.String_Impl_"),
                        (yA.fromCharCode = function (e) {
                            return String.fromCodePoint(e);
                        });
                    var Yr = function () {
                        this.b = "";
                    };
                    (v.StringBuf = Yr), (Yr.__name__ = "StringBuf"), (Yr.prototype = { b: null, __class__: Yr });
                    var Nc = function () {};
                    (v.StringTools = Nc),
                        (Nc.__name__ = "StringTools"),
                        (Nc.htmlEscape = function (e, t) {
                            for (var n = "", a = 0; a < e.length; ) {
                                var s = e,
                                    r = a++,
                                    A = s.charCodeAt(r);
                                switch ((55296 <= A && 56319 >= A && (A = ((A - 55232) << 10) | (1023 & s.charCodeAt(r + 1))), 65536 <= (s = A) && ++a, s)) {
                                    case 34:
                                        n = t ? n + "&quot;" : n + String.fromCodePoint(s);
                                        break;
                                    case 38:
                                        n += "&amp;";
                                        break;
                                    case 39:
                                        n = t ? n + "&#039;" : n + String.fromCodePoint(s);
                                        break;
                                    case 60:
                                        n += "&lt;";
                                        break;
                                    case 62:
                                        n += "&gt;";
                                        break;
                                    default:
                                        n += String.fromCodePoint(s);
                                }
                            }
                            return n;
                        }),
                        (Nc.startsWith = function (e, t) {
                            return e.length >= t.length && 0 == e.lastIndexOf(t, 0);
                        }),
                        (Nc.endsWith = function (e, t) {
                            var n = t.length,
                                a = e.length;
                            return a >= n && e.indexOf(t, a - n) == a - n;
                        }),
                        (Nc.isSpace = function (e, t) {
                            return (8 < (e = Qc.cca(e, t)) && 14 > e) || 32 == e;
                        }),
                        (Nc.ltrim = function (e) {
                            for (var t = e.length, n = 0; n < t && Nc.isSpace(e, n); ) ++n;
                            return 0 < n ? Qc.substr(e, n, t - n) : e;
                        }),
                        (Nc.rtrim = function (e) {
                            for (var t = e.length, n = 0; n < t && Nc.isSpace(e, t - n - 1); ) ++n;
                            return 0 < n ? Qc.substr(e, 0, t - n) : e;
                        }),
                        (Nc.trim = function (e) {
                            return Nc.ltrim(Nc.rtrim(e));
                        }),
                        (Nc.rpad = function (e, t, n) {
                            if (0 >= t.length) return e;
                            for (e = null == e ? "null" : "" + e; e.length < n; ) e += null == t ? "null" : "" + t;
                            return e;
                        }),
                        (Nc.replace = function (e, t, n) {
                            return e.split(t).join(n);
                        }),
                        (Nc.hex = function (e, t) {
                            for (var n = ""; (n = "0123456789ABCDEF".charAt(15 & e) + n), 0 < (e >>>= 4); );
                            if (null != t) for (; n.length < t; ) n = "0" + n;
                            return n;
                        });
                    var Ic = function () {};
                    (v.TJSON = Ic),
                        (Ic.__name__ = "TJSON"),
                        (Ic.parse = function (e, t, n) {
                            return null == t && (t = "JSON Data"), new zA(e, t, n).doParse();
                        }),
                        (Ic.encode = function (e, t, n) {
                            return null == n && (n = !0), new XF(n).doEncode(e, t);
                        });
                    var zA = function (e, t, n) {
                        null == t && (t = "JSON Data"),
                            (this.json = e),
                            (this.fileName = t),
                            (this.currentLine = 1),
                            (this.lastSymbolQuoted = !1),
                            (this.pos = 0),
                            (this.floatRegex = new rd("^-?[0-9]*\\.[0-9]+$", "")),
                            (this.intRegex = new rd("^-?[0-9]+$", "")),
                            (this.strProcessor = null == n ? N(this, this.defaultStringProcessor) : n),
                            (this.cache = []);
                    };
                    (v.TJSONParser = zA),
                        (zA.__name__ = "TJSONParser"),
                        (zA.prototype = {
                            pos: null,
                            json: null,
                            lastSymbolQuoted: null,
                            fileName: null,
                            currentLine: null,
                            cache: null,
                            floatRegex: null,
                            intRegex: null,
                            strProcessor: null,
                            doParse: function () {
                                try {
                                    var e = this.getNextSymbol();
                                    switch (e) {
                                        case "[":
                                            return this.doArray();
                                        case "{":
                                            return this.doObject();
                                        default:
                                            return this.convertSymbolToProperType(e);
                                    }
                                } catch (t) {
                                    if (((yf.lastException = t), "string" == typeof (e = t instanceof Gc ? t.val : t))) throw new Gc(this.fileName + " on line " + this.currentLine + ": " + e);
                                    throw t;
                                }
                            },
                            doObject: function () {
                                var t = new p();
                                for (this.cache.push(t); this.pos < this.json.length; ) {
                                    var n = this.getNextSymbol();
                                    if ("," != n || this.lastSymbolQuoted) {
                                        if ("}" == n && !this.lastSymbolQuoted) return t;
                                        var a = this.getNextSymbol();
                                        if (":" != a) throw new Gc("Expected ':' but got '" + a + "' instead.");
                                        (a = "{" != (a = this.getNextSymbol()) || this.lastSymbolQuoted ? ("[" != a || this.lastSymbolQuoted ? this.convertSymbolToProperType(a) : this.doArray()) : this.doObject()),
                                            null != e[n] ? t.setReserved(n, a) : (t.h[n] = a);
                                    }
                                }
                                throw new Gc("Unexpected end of file. Expected '}'");
                            },
                            doArray: function () {
                                for (var e, t = []; this.pos < this.json.length; )
                                    if ("," != (e = this.getNextSymbol()) || this.lastSymbolQuoted) {
                                        if ("]" == e && !this.lastSymbolQuoted) return t;
                                        (e = "{" != e || this.lastSymbolQuoted ? ("[" != e || this.lastSymbolQuoted ? this.convertSymbolToProperType(e) : this.doArray()) : this.doObject()), t.push(e);
                                    }
                                throw new Gc("Unexpected end of file. Expected ']'");
                            },
                            convertSymbolToProperType: function (e) {
                                return this.lastSymbolQuoted
                                    ? Nc.startsWith(e, Ic.OBJECT_REFERENCE_PREFIX)
                                        ? ((e = g.parseInt(Qc.substr(e, Ic.OBJECT_REFERENCE_PREFIX.length, null))), this.cache[e])
                                        : e
                                    : this.looksLikeFloat(e)
                                    ? parseFloat(e)
                                    : this.looksLikeInt(e)
                                    ? g.parseInt(e)
                                    : "true" == e.toLowerCase() || ("false" != e.toLowerCase() && ("null" == e.toLowerCase() ? null : e));
                            },
                            looksLikeFloat: function (e) {
                                if (this.floatRegex.match(e)) return !0;
                                if (this.intRegex.match(e)) {
                                    var t = this.intRegex.matched(0);
                                    if (45 == Qc.cca(t, 0) ? "-2147483648" < t : "2147483647" < t) return !0;
                                    if (2147483647 < (e = parseFloat(e)) || -2147483648 > e) return !0;
                                }
                                return !1;
                            },
                            looksLikeInt: function (e) {
                                return this.intRegex.match(e);
                            },
                            getNextSymbol: function () {
                                this.lastSymbolQuoted = !1;
                                for (var e, t = !1, n = "", a = "", s = !1, r = !1, A = !1, l = !1; this.pos < this.json.length; )
                                    if (("\n" != (e = this.json.charAt(this.pos++)) || r || this.currentLine++, A)) ("\n" != e && "\r" != e) || ((A = !1), this.pos++);
                                    else if (l) "*" == e && "/" == this.json.charAt(this.pos) && ((l = !1), this.pos++);
                                    else if (t) {
                                        if (s) {
                                            if (((s = !1), "'" == e || '"' == e)) {
                                                a += e;
                                                continue;
                                            }
                                            if ("t" == e) {
                                                a += "\t";
                                                continue;
                                            }
                                            if ("n" == e) {
                                                a += "\n";
                                                continue;
                                            }
                                            if ("\\" == e) {
                                                a += "\\";
                                                continue;
                                            }
                                            if ("r" == e) {
                                                a += "\r";
                                                continue;
                                            }
                                            if ("/" == e) {
                                                a += "/";
                                                continue;
                                            }
                                            if ("u" == e) {
                                                for (var o = (e = 0); 4 > o; ) {
                                                    if ((o++, this.pos >= this.json.length)) throw new Gc("Unfinished UTF8 character");
                                                    var i = Qc.cca(this.json, this.pos++);
                                                    if (((e <<= 4), 48 <= i && 57 >= i)) e += i - 48;
                                                    else if (65 <= i && 70 >= i) e += 10 + i - 65;
                                                    else {
                                                        if (!(97 <= i && 102 >= i)) throw new Gc("Not a hex digit");
                                                        e += 10 + i - 95;
                                                    }
                                                }
                                                ((o = new C8()).__b += String.fromCodePoint(e)), (a += o.__b);
                                                continue;
                                            }
                                            throw new Gc("Invalid escape sequence '\\" + e + "'");
                                        }
                                        if ("\\" == e) s = !0;
                                        else {
                                            if (e == n) return a;
                                            a += e;
                                        }
                                    } else {
                                        if ("/" == e) {
                                            if ("/" == (o = this.json.charAt(this.pos))) {
                                                (A = !0), this.pos++;
                                                continue;
                                            }
                                            if ("*" == o) {
                                                (l = !0), this.pos++;
                                                continue;
                                            }
                                        }
                                        if (r) {
                                            if (" " == e || "\n" == e || "\r" == e || "\t" == e || "," == e || ":" == e || "}" == e || "]" == e) return this.pos--, a;
                                            a += e;
                                        } else if (" " != e && "\t" != e && "\n" != e && "\r" != e) {
                                            if ("{" == e || "}" == e || "[" == e || "]" == e || "," == e || ":" == e) return e;
                                            "'" == e || '"' == e ? ((t = !0), (n = e), (this.lastSymbolQuoted = !0)) : ((r = !0), (a = e));
                                        }
                                    }
                                if (t) throw new Gc("Unexpected end of data. Expected ( " + n + " )");
                                return a;
                            },
                            defaultStringProcessor: function (e) {
                                return e;
                            },
                            __class__: zA,
                        });
                    var XF = function (e) {
                        null == e && (e = !0), (this.uCache = e) && (this.cache = []);
                    };
                    (v.TJSONEncoder = XF),
                        (XF.__name__ = "TJSONEncoder"),
                        (XF.prototype = {
                            cache: null,
                            uCache: null,
                            doEncode: function (e, t) {
                                if (!Fe.isObject(e)) throw new Gc("Provided object is not an object.");
                                t = d.__implements(t, Cj) ? t : "fancy" == t ? new sm() : new Hp();
                                var n = "";
                                return (
                                    e instanceof Array || e instanceof Sp
                                        ? (n += g.string(this.encodeIterable(e, t, 0)))
                                        : e instanceof p
                                        ? (n += g.string(this.encodeMap(e, t, 0)))
                                        : (this.cacheEncode(e), (n += g.string(this.encodeObject(e, t, 0)))),
                                    n
                                );
                            },
                            encodeObject: function (e, t, n) {
                                var a = "" + g.string(t.beginObject(n)),
                                    s = 0,
                                    r = null,
                                    A = d.getClass(e);
                                A = null != A ? uf.getInstanceFields(A) : Fe.fields(e);
                                var l = uf.typeof(e);
                                for (
                                    6 == l._hx_index &&
                                        ("Date" == (l = l.c.__name__) && (l += "@" + d.__cast(e, Date).getTime()),
                                        (a = 0 < s++ ? a + g.string(t.entrySeperator(n)) : a + g.string(t.firstEntry(n))),
                                        (a += g.string('"_hxcls"' + t.keyValueSeperator(n))),
                                        (a += g.string(this.encodeValue(l, t, n))),
                                        null != e.TJ_noEncode && (r = e.TJ_noEncode())),
                                        l = 0;
                                    l < A.length;

                                ) {
                                    var o = A[l];
                                    if ((++l, !(null != r && 0 <= r.indexOf(o)))) {
                                        var i = Fe.field(e, o);
                                        null != (i = this.encodeValue(i, t, n)) &&
                                            ((a = 0 < s++ ? a + g.string(t.entrySeperator(n)) : a + g.string(t.firstEntry(n))), (a += g.string('"' + o + '"' + t.keyValueSeperator(n) + (null == i ? "null" : "" + i))));
                                    }
                                }
                                return a + g.string(t.endObject(n));
                            },
                            encodeMap: function (e, t, n) {
                                for (var a = "" + g.string(t.beginObject(n)), s = 0, r = e.keys(); r.hasNext(); ) {
                                    var A = r.next();
                                    a = 0 < s++ ? a + g.string(t.entrySeperator(n)) : a + g.string(t.firstEntry(n));
                                    var l = e.get(A);
                                    (a += g.string('"' + A + '"' + t.keyValueSeperator(n))), (a += g.string(this.encodeValue(l, t, n)));
                                }
                                return a + g.string(t.endObject(n));
                            },
                            encodeIterable: function (e, t, n) {
                                var a = "" + g.string(t.beginArray(n)),
                                    s = 0;
                                for (e = Ad(e); e.hasNext(); ) {
                                    var r = e.next();
                                    (a = 0 < s++ ? a + g.string(t.entrySeperator(n)) : a + g.string(t.firstEntry(n))), (a += g.string(this.encodeValue(r, t, n)));
                                }
                                return a + g.string(t.endArray(n));
                            },
                            cacheEncode: function (e) {
                                if (!this.uCache) return null;
                                for (var t = 0, n = this.cache.length; t < n; ) {
                                    var a = t++;
                                    if (this.cache[a] == e) return '"' + Ic.OBJECT_REFERENCE_PREFIX + a + '"';
                                }
                                return this.cache.push(e), null;
                            },
                            encodeValue: function (e, t, n) {
                                if (("number" == typeof e && (0 | e) === e) || "number" == typeof e) return e;
                                if (e instanceof Array || e instanceof Sp || e instanceof Sp) return this.encodeIterable(e, t, n + 1);
                                if (e instanceof p) return this.encodeMap(e, t, n + 1);
                                if ("string" == typeof e) return '"' + Nc.replace(Nc.replace(Nc.replace(Nc.replace(g.string(e), "\\", "\\\\"), "\n", "\\n"), "\r", "\\r"), '"', '\\"') + '"';
                                if ("boolean" == typeof e) return e;
                                if (Fe.isObject(e)) {
                                    var a = this.cacheEncode(e);
                                    return null != a ? a : this.encodeObject(e, t, n + 1);
                                }
                                return null == e ? "null" : null;
                            },
                            __class__: XF,
                        });
                    var Cj = function () {};
                    (v.EncodeStyle = Cj),
                        (Cj.__name__ = "EncodeStyle"),
                        (Cj.__isInterface__ = !0),
                        (Cj.prototype = { beginObject: null, endObject: null, beginArray: null, endArray: null, firstEntry: null, entrySeperator: null, keyValueSeperator: null, __class__: Cj });
                    var Hp = function () {};
                    (v.SimpleStyle = Hp),
                        (Hp.__name__ = "SimpleStyle"),
                        (Hp.__interfaces__ = [Cj]),
                        (Hp.prototype = {
                            beginObject: function (e) {
                                return "{";
                            },
                            endObject: function (e) {
                                return "}";
                            },
                            beginArray: function (e) {
                                return "[";
                            },
                            endArray: function (e) {
                                return "]";
                            },
                            firstEntry: function (e) {
                                return "";
                            },
                            entrySeperator: function (e) {
                                return ",";
                            },
                            keyValueSeperator: function (e) {
                                return ":";
                            },
                            __class__: Hp,
                        });
                    var sm = function (e) {
                        null == e && (e = "    "), (this.tab = e), (this.charTimesNCache = [""]);
                    };
                    (v.FancyStyle = sm),
                        (sm.__name__ = "FancyStyle"),
                        (sm.__interfaces__ = [Cj]),
                        (sm.prototype = {
                            tab: null,
                            beginObject: function (e) {
                                return "{\n";
                            },
                            endObject: function (e) {
                                return "\n" + this.charTimesN(e) + "}";
                            },
                            beginArray: function (e) {
                                return "[\n";
                            },
                            endArray: function (e) {
                                return "\n" + this.charTimesN(e) + "]";
                            },
                            firstEntry: function (e) {
                                return this.charTimesN(e + 1) + " ";
                            },
                            entrySeperator: function (e) {
                                return "\n" + this.charTimesN(e + 1) + ",";
                            },
                            keyValueSeperator: function (e) {
                                return " : ";
                            },
                            charTimesNCache: null,
                            charTimesN: function (e) {
                                if (e < this.charTimesNCache.length) return this.charTimesNCache[e];
                                var t = this.charTimesN(e - 1);
                                return (this.charTimesNCache[e] = t + this.tab);
                            },
                            __class__: sm,
                        });
                    var ri = (Bc.ValueType = {
                            __ename__: "ValueType",
                            __constructs__: "TNull TInt TFloat TBool TObject TFunction TClass TEnum TUnknown".split(" "),
                            TNull: { _hx_index: 0, __enum__: "ValueType", toString: I },
                            TInt: { _hx_index: 1, __enum__: "ValueType", toString: I },
                            TFloat: { _hx_index: 2, __enum__: "ValueType", toString: I },
                            TBool: { _hx_index: 3, __enum__: "ValueType", toString: I },
                            TObject: { _hx_index: 4, __enum__: "ValueType", toString: I },
                            TFunction: { _hx_index: 5, __enum__: "ValueType", toString: I },
                            TClass:
                                ((ob = function (e) {
                                    return { _hx_index: 6, c: e, __enum__: "ValueType", toString: I };
                                }),
                                (ob.__params__ = ["c"]),
                                ob),
                            TEnum:
                                ((ob = function (e) {
                                    return { _hx_index: 7, e, __enum__: "ValueType", toString: I };
                                }),
                                (ob.__params__ = ["e"]),
                                ob),
                            TUnknown: { _hx_index: 8, __enum__: "ValueType", toString: I },
                        }),
                        uf = function () {};
                    (v.Type = uf),
                        (uf.__name__ = "Type"),
                        (uf.resolveEnum = function (e) {
                            return Bc[e];
                        }),
                        (uf.createInstance = function (e, t) {
                            return new (Function.prototype.bind.apply(e, [null].concat(t)))();
                        }),
                        (uf.createEnum = function (e, t, n) {
                            var a = Fe.field(e, t);
                            if (null == a) throw new Gc("No such constructor " + t);
                            if (Fe.isFunction(a)) {
                                if (null == n) throw new Gc("Constructor " + t + " need parameters");
                                return a.apply(e, n);
                            }
                            if (null != n && 0 != n.length) throw new Gc("Constructor " + t + " does not need parameters");
                            return a;
                        }),
                        (uf.getInstanceFields = function (e) {
                            var t,
                                n = [];
                            for (t in e.prototype) n.push(t);
                            return Qc.remove(n, "__class__"), Qc.remove(n, "__properties__"), n;
                        }),
                        (uf.typeof = function (e) {
                            switch (typeof e) {
                                case "boolean":
                                    return ri.TBool;
                                case "function":
                                    return e.__name__ || e.__ename__ ? ri.TObject : ri.TFunction;
                                case "number":
                                    return Math.ceil(e) == e % 2147483648 ? ri.TInt : ri.TFloat;
                                case "object":
                                    if (null == e) return ri.TNull;
                                    var t = e.__enum__;
                                    return null != t ? ri.TEnum(Bc[t]) : null != (e = d.getClass(e)) ? ri.TClass(e) : ri.TObject;
                                case "string":
                                    return ri.TClass(String);
                                case "undefined":
                                    return ri.TNull;
                                default:
                                    return ri.TUnknown;
                            }
                        }),
                        (uf.enumEq = function (e, t) {
                            if (e == t) return !0;
                            try {
                                var n = e.__enum__;
                                if (null == n || n != t.__enum__ || e._hx_index != t._hx_index) return !1;
                                var a = Bc[n],
                                    s = a[a.__constructs__[e._hx_index]].__params__;
                                for (n = 0; n < s.length; ) {
                                    var r = s[n];
                                    if ((++n, !uf.enumEq(e[r], t[r]))) return !1;
                                }
                            } catch (e) {
                                return (yf.lastException = e), !1;
                            }
                            return !0;
                        }),
                        (uf.enumParameters = function (e) {
                            var t = Bc[e.__enum__];
                            if (null != (t = t[t.__constructs__[e._hx_index]].__params__)) {
                                for (var n = [], a = 0; a < t.length; ) {
                                    var s = t[a];
                                    ++a, n.push(e[s]);
                                }
                                return n;
                            }
                            return [];
                        });
                    var ee = {};
                    (v["_UInt.UInt_Impl_"] = ee),
                        (ee.__name__ = "_UInt.UInt_Impl_"),
                        (ee.gt = function (e, t) {
                            var n = 0 > e;
                            return n != 0 > t ? n : e > t;
                        }),
                        (ee.toFloat = function (e) {
                            return 0 > e ? 4294967296 + e : e + 0;
                        });
                    var jE = function () {};
                    (v["openfl.events.IEventDispatcher"] = jE),
                        (jE.__name__ = "openfl.events.IEventDispatcher"),
                        (jE.__isInterface__ = !0),
                        (jE.prototype = { addEventListener: null, dispatchEvent: null, hasEventListener: null, removeEventListener: null, willTrigger: null, __class__: jE });
                    var Gh = function (e) {
                        null != e && (this.__targetDispatcher = e);
                    };
                    (v["openfl.events.EventDispatcher"] = Gh),
                        (Gh.__name__ = "openfl.events.EventDispatcher"),
                        (Gh.__interfaces__ = [jE]),
                        (Gh.prototype = {
                            __eventMap: null,
                            __iterators: null,
                            __targetDispatcher: null,
                            addEventListener: function (t, n, a, s, r) {
                                if ((null == s && (s = 0), null == a && (a = !1), null != n))
                                    if ((null == this.__eventMap && ((this.__eventMap = new p()), (this.__iterators = new p())), (r = this.__eventMap), null != e[t] ? r.existsReserved(t) : r.h.hasOwnProperty(t))) {
                                        r = this.__eventMap;
                                        for (var A = 0, l = (r = null != e[t] ? r.getReserved(t) : r.h[t]).length; A < l; ) {
                                            if (r[A++].match(n, a)) return;
                                        }
                                        for (A = this.__iterators, t = null != e[t] ? A.getReserved(t) : A.h[t], A = 0; A < t.length; ) (l = t[A]), ++A, l.active && l.copy();
                                        this.__addListenerByPriority(r, new T4(n, a, s));
                                    } else
                                        (r = []).push(new T4(n, a, s)),
                                            (n = new R2(r)),
                                            (a = this.__eventMap),
                                            null != e[t] ? a.setReserved(t, r) : (a.h[t] = r),
                                            (a = this.__iterators),
                                            (n = [n]),
                                            null != e[t] ? a.setReserved(t, n) : (a.h[t] = n);
                            },
                            dispatchEvent: function (e) {
                                return (e.target = null != this.__targetDispatcher ? this.__targetDispatcher : this), this.__dispatchEvent(e);
                            },
                            hasEventListener: function (t) {
                                if (null == this.__eventMap) return !1;
                                var n = this.__eventMap;
                                return null != e[t] ? n.existsReserved(t) : n.h.hasOwnProperty(t);
                            },
                            removeEventListener: function (t, n, a) {
                                if ((null == a && (a = !1), null != this.__eventMap && null != n)) {
                                    var s = this.__eventMap;
                                    if (null != (s = null != e[t] ? s.getReserved(t) : s.h[t])) {
                                        var r = this.__iterators;
                                        r = null != e[t] ? r.getReserved(t) : r.h[t];
                                        for (var A = 0, l = s.length; A < l; ) {
                                            var o = A++;
                                            if (s[o].match(n, a)) {
                                                for (n = 0; n < r.length; ) (a = r[n]), ++n, a.remove(s[o], o);
                                                s.splice(o, 1);
                                                break;
                                            }
                                        }
                                        0 == s.length && (this.__eventMap.remove(t), this.__iterators.remove(t)), (t = this.__eventMap), new jy(t, t.arrayKeys()).hasNext() || (this.__iterators = this.__eventMap = null);
                                    }
                                }
                            },
                            toString: function () {
                                return "[object " + d.getClass(this).__name__.split(".").pop() + "]";
                            },
                            willTrigger: function (e) {
                                return this.hasEventListener(e);
                            },
                            __dispatchEvent: function (t) {
                                if (null == this.__eventMap || null == t) return !0;
                                var n = t.type,
                                    a = this.__eventMap;
                                if (null == (a = null != e[n] ? a.getReserved(n) : a.h[n])) return !0;
                                null == t.target && (t.target = null != this.__targetDispatcher ? this.__targetDispatcher : this), (t.currentTarget = this);
                                var s = 1 == t.eventPhase,
                                    r = this.__iterators;
                                (n = null != e[n] ? r.getReserved(n) : r.h[n]), (r = n[0]).active && ((r = new R2(a)), n.push(r)), r.start();
                                for (var A = r; A.hasNext(); ) {
                                    var l = A.next();
                                    if (null != l && l.useCapture == s && (l.callback(t), t.__isCanceledNow)) break;
                                }
                                return r.stop(), r != n[0] ? Qc.remove(n, r) : r.reset(a), !t.isDefaultPrevented();
                            },
                            __removeAllListeners: function () {
                                this.__iterators = this.__eventMap = null;
                            },
                            __addListenerByPriority: function (e, t) {
                                for (var n = e.length, a = n, s = 0; s < n; ) {
                                    var r = s++;
                                    if (e[r].priority < t.priority) {
                                        a = r;
                                        break;
                                    }
                                }
                                e.splice(a, 0, t);
                            },
                            __class__: Gh,
                        });
                    var ky = function () {};
                    (v["openfl.display.IBitmapDrawable"] = ky),
                        (ky.__name__ = "openfl.display.IBitmapDrawable"),
                        (ky.__isInterface__ = !0),
                        (ky.prototype = {
                            __blendMode: null,
                            __isMask: null,
                            __mask: null,
                            __renderable: null,
                            __renderTransform: null,
                            __scrollRect: null,
                            __transform: null,
                            __type: null,
                            __worldAlpha: null,
                            __worldColorTransform: null,
                            __worldTransform: null,
                            __getBounds: null,
                            __update: null,
                            __updateTransforms: null,
                            __class__: ky,
                        });
                    var zf = {};
                    (v["openfl._Vector.Vector_Impl_"] = zf),
                        (zf.__name__ = "openfl._Vector.Vector_Impl_"),
                        (zf.__properties__ = { set_length: "set_length", get_length: "get_length", set_fixed: "set_fixed", get_fixed: "get_fixed" }),
                        (zf.concat = function (e, t) {
                            return e.concat(t);
                        }),
                        (zf.copy = function (e) {
                            return e.copy();
                        }),
                        (zf.filter = function (e, t) {
                            return e.filter(t);
                        }),
                        (zf.get = function (e, t) {
                            return e.get(t);
                        }),
                        (zf.indexOf = function (e, t, n) {
                            return null == n && (n = 0), e.indexOf(t, n);
                        }),
                        (zf.insertAt = function (e, t, n) {
                            e.insertAt(t, n);
                        }),
                        (zf.iterator = function (e) {
                            return e.iterator();
                        }),
                        (zf.join = function (e, t) {
                            return null == t && (t = ","), e.join(t);
                        }),
                        (zf.lastIndexOf = function (e, t, n) {
                            return e.lastIndexOf(t, n);
                        }),
                        (zf.pop = function (e) {
                            return e.pop();
                        }),
                        (zf.push = function (e, t) {
                            return e.push(t);
                        }),
                        (zf.removeAt = function (e, t) {
                            return e.removeAt(t);
                        }),
                        (zf.reverse = function (e) {
                            return e.reverse();
                        }),
                        (zf.set = function (e, t, n) {
                            return e.set(t, n);
                        }),
                        (zf.shift = function (e) {
                            return e.shift();
                        }),
                        (zf.slice = function (e, t, n) {
                            return null == t && (t = 0), e.slice(t, n);
                        }),
                        (zf.sort = function (e, t) {
                            e.sort(t);
                        }),
                        (zf.splice = function (e, t, n) {
                            return e.splice(t, n);
                        }),
                        (zf.toString = function (e) {
                            return null != e ? e.toString() : null;
                        }),
                        (zf.unshift = function (e, t) {
                            e.unshift(t);
                        }),
                        (zf.convert = function (e) {
                            return e;
                        }),
                        (zf.toBoolVector = function (e, t, n, a) {
                            return new YF(t, n, a);
                        }),
                        (zf.toIntVector = function (e, t, n, a) {
                            return new fL(t, n, a);
                        }),
                        (zf.toFloatVector = function (e, t, n, a) {
                            return new ZF(t, n, a, !0);
                        }),
                        (zf.toFunctionVector = function (e, t, n, a) {
                            return new gL(t, n, a);
                        }),
                        (zf.toObjectVector = function (e, t, n, a) {
                            return new wF(t, n, a, !0);
                        }),
                        (zf.toNullVector = function (e, t, n, a) {
                            return new wF(t, n, a, !0);
                        }),
                        (zf.fromBoolVector = function (e) {
                            return e;
                        }),
                        (zf.fromIntVector = function (e) {
                            return e;
                        }),
                        (zf.fromFloatVector = function (e) {
                            return e;
                        }),
                        (zf.fromFunctionVector = function (e) {
                            return e;
                        }),
                        (zf.fromObjectVector = function (e) {
                            return e;
                        }),
                        (zf.get_fixed = function (e) {
                            return e.fixed;
                        }),
                        (zf.set_fixed = function (e, t) {
                            return (e.fixed = t);
                        }),
                        (zf.get_length = function (e) {
                            return e.get_length();
                        }),
                        (zf.set_length = function (e, t) {
                            return e.set_length(t);
                        });
                    var gc = function () {
                        Gh.call(this),
                            (this.__type = UU.DISPLAY_OBJECT),
                            (this.__alpha = 1),
                            (this.__blendMode = 10),
                            (this.__cacheAsBitmap = !1),
                            (this.__transform = new uh()),
                            (this.__visible = !0),
                            (this.__rotationSine = this.__rotation = 0),
                            (this.__worldAlpha = this.__scaleY = this.__scaleX = this.__rotationCosine = 1),
                            (this.__worldBlendMode = 10),
                            (this.__worldTransform = new uh()),
                            (this.__worldColorTransform = new Xs()),
                            (this.__renderTransform = new uh()),
                            (this.__worldVisible = !0),
                            this.set_name("instance" + ++gc.__instanceCount),
                            null != gc.__initStage && ((this.stage = gc.__initStage), (gc.__initStage = null), this.stage.addChild(this));
                    };
                    (v["openfl.display.DisplayObject"] = gc),
                        (gc.__name__ = "openfl.display.DisplayObject"),
                        (gc.__interfaces__ = [ky]),
                        (gc.__calculateAbsoluteTransform = function (e, t, n) {
                            (n.a = e.a * t.a + e.b * t.c), (n.b = e.a * t.b + e.b * t.d), (n.c = e.c * t.a + e.d * t.c), (n.d = e.c * t.b + e.d * t.d), (n.tx = e.tx * t.a + e.ty * t.c + t.tx), (n.ty = e.tx * t.b + e.ty * t.d + t.ty);
                        }),
                        (gc.__super__ = Gh),
                        (gc.prototype = K(Gh.prototype, {
                            opaqueBackground: null,
                            parent: null,
                            stage: null,
                            __alpha: null,
                            __blendMode: null,
                            __cacheAsBitmap: null,
                            __cacheAsBitmapMatrix: null,
                            __cacheBitmap: null,
                            __cacheBitmapBackground: null,
                            __cacheBitmapColorTransform: null,
                            __cacheBitmapData: null,
                            __cacheBitmapData2: null,
                            __cacheBitmapData3: null,
                            __cacheBitmapDataTexture: null,
                            __cacheBitmapMatrix: null,
                            __cacheBitmapRendererHW: null,
                            __cacheBitmapRendererSW: null,
                            __cairo: null,
                            __children: null,
                            __customRenderClear: null,
                            __customRenderEvent: null,
                            __filters: null,
                            __graphics: null,
                            __interactive: null,
                            __isCacheBitmapRender: null,
                            __isMask: null,
                            __loaderInfo: null,
                            __mask: null,
                            __maskTarget: null,
                            __name: null,
                            __objectTransform: null,
                            __renderable: null,
                            __renderDirty: null,
                            __renderParent: null,
                            __renderTransform: null,
                            __renderTransformCache: null,
                            __renderTransformChanged: null,
                            __rotation: null,
                            __rotationCosine: null,
                            __rotationSine: null,
                            __scale9Grid: null,
                            __scaleX: null,
                            __scaleY: null,
                            __scrollRect: null,
                            __shader: null,
                            __tempPoint: null,
                            __transform: null,
                            __transformDirty: null,
                            __type: null,
                            __visible: null,
                            __worldAlpha: null,
                            __worldAlphaChanged: null,
                            __worldBlendMode: null,
                            __worldClip: null,
                            __worldClipChanged: null,
                            __worldColorTransform: null,
                            __worldShader: null,
                            __worldScale9Grid: null,
                            __worldTransform: null,
                            __worldVisible: null,
                            __worldVisibleChanged: null,
                            __worldTransformInvalid: null,
                            __worldZ: null,
                            __canvas: null,
                            __context: null,
                            __style: null,
                            addEventListener: function (t, n, a, s, r) {
                                switch ((null == r && (r = !1), null == s && (s = 0), null == a && (a = !1), t)) {
                                    case "activate":
                                    case "deactivate":
                                    case "enterFrame":
                                    case "exitFrame":
                                    case "frameConstructed":
                                    case "render":
                                        var A = gc.__broadcastEvents;
                                        if (null != e[t] ? !A.existsReserved(t) : !A.h.hasOwnProperty(t)) {
                                            A = gc.__broadcastEvents;
                                            var l = [];
                                            null != e[t] ? A.setReserved(t, l) : (A.h[t] = l);
                                        }
                                        (A = gc.__broadcastEvents), -1 == (A = null != e[t] ? A.getReserved(t) : A.h[t]).indexOf(this) && A.push(this);
                                        break;
                                    case "clearDOM":
                                    case "renderCairo":
                                    case "renderCanvas":
                                    case "renderDOM":
                                    case "renderOpenGL":
                                        null == this.__customRenderEvent &&
                                            ((this.__customRenderEvent = new $F(null)), (this.__customRenderEvent.objectColorTransform = new Xs()), (this.__customRenderEvent.objectMatrix = new uh()), (this.__customRenderClear = !0));
                                }
                                Gh.prototype.addEventListener.call(this, t, n, a, s, r);
                            },
                            dispatchEvent: function (e) {
                                if (e instanceof Ts) {
                                    var t = this.__getRenderTransform();
                                    (e.stageX = e.localX * t.a + e.localY * t.c + t.tx), (t = this.__getRenderTransform()), (e.stageY = e.localX * t.b + e.localY * t.d + t.ty);
                                } else e instanceof Nz && ((t = this.__getRenderTransform()), (e.stageX = e.localX * t.a + e.localY * t.c + t.tx), (t = this.__getRenderTransform()), (e.stageY = e.localX * t.b + e.localY * t.d + t.ty));
                                return (e.target = this), this.__dispatchWithCapture(e);
                            },
                            getBounds: function (e) {
                                var t = uh.__pool.get();
                                if (null != e && e != this) {
                                    t.copyFrom(this.__getWorldTransform());
                                    var n = uh.__pool.get();
                                    n.copyFrom(e.__getWorldTransform()), n.invert(), t.concat(n), uh.__pool.release(n);
                                } else t.identity();
                                return (e = new xe()), this.__getBounds(e, t), uh.__pool.release(t), e;
                            },
                            getRect: function (e) {
                                return this.getBounds(e);
                            },
                            globalToLocal: function (e) {
                                return this.__globalToLocal(e, new wf());
                            },
                            hitTestObject: function (e) {
                                if (null != e && null != e.parent && null != this.parent) {
                                    var t = this.getBounds(this);
                                    return (e = e.getBounds(this)), t.intersects(e);
                                }
                                return !1;
                            },
                            hitTestPoint: function (e, t, n) {
                                return null == n && (n = !1), null != this.stage && this.__hitTest(e, t, n, null, !1, this);
                            },
                            invalidate: function () {
                                this.__renderDirty || ((this.__renderDirty = !0), this.__setParentRenderDirty());
                            },
                            localToGlobal: function (e) {
                                return this.__getRenderTransform().transformPoint(e);
                            },
                            removeEventListener: function (t, n, a) {
                                switch ((null == a && (a = !1), Gh.prototype.removeEventListener.call(this, t, n, a), t)) {
                                    case "activate":
                                    case "deactivate":
                                    case "enterFrame":
                                    case "exitFrame":
                                    case "frameConstructed":
                                    case "render":
                                        !this.hasEventListener(t) &&
                                            ((n = gc.__broadcastEvents), null != e[t] ? n.existsReserved(t) : n.h.hasOwnProperty(t)) &&
                                            ((n = gc.__broadcastEvents), Qc.remove(null != e[t] ? n.getReserved(t) : n.h[t], this));
                                        break;
                                    case "clearDOM":
                                    case "renderCairo":
                                    case "renderCanvas":
                                    case "renderDOM":
                                    case "renderOpenGL":
                                        this.hasEventListener("clearDOM") ||
                                            this.hasEventListener("renderCairo") ||
                                            this.hasEventListener("renderCanvas") ||
                                            this.hasEventListener("renderDOM") ||
                                            this.hasEventListener("renderOpenGL") ||
                                            (this.__customRenderEvent = null);
                                }
                            },
                            __cleanup: function () {
                                (this.__context = this.__canvas = this.__cairo = null),
                                    null != this.__graphics && this.__graphics.__cleanup(),
                                    null != this.__cacheBitmap && (this.__cacheBitmap.__cleanup(), (this.__cacheBitmap = null)),
                                    null != this.__cacheBitmapDataTexture && (this.__cacheBitmapDataTexture.dispose(), (this.__cacheBitmapDataTexture = null)),
                                    null != this.__cacheBitmapData && (this.__cacheBitmapData.dispose(), (this.__cacheBitmapData = null)),
                                    null != this.__cacheBitmapData2 && (this.__cacheBitmapData2.dispose(), (this.__cacheBitmapData2 = null)),
                                    null != this.__cacheBitmapData3 && (this.__cacheBitmapData3.dispose(), (this.__cacheBitmapData3 = null));
                            },
                            __dispatch: function (e) {
                                if (null != this.__eventMap && this.hasEventListener(e.type)) {
                                    var t = Gh.prototype.__dispatchEvent.call(this, e);
                                    return !!e.__isCanceled || t;
                                }
                                return !0;
                            },
                            __dispatchChildren: function (e) {},
                            __dispatchEvent: function (e) {
                                var t = e.bubbles ? this.parent : null,
                                    n = Gh.prototype.__dispatchEvent.call(this, e);
                                return !!e.__isCanceled || (null != t && t != this && ((e.eventPhase = 3), null == e.target && (e.target = this), t.__dispatchEvent(e)), n);
                            },
                            __dispatchWithCapture: function (e) {
                                if ((null == e.target && (e.target = this), null != this.parent))
                                    if (((e.eventPhase = 1), this.parent == this.stage)) this.parent.__dispatch(e);
                                    else {
                                        for (var t = gc.__tempStack.get(), n = this.parent, a = 0; null != n; ) t.set(a, n), (n = n.parent), ++a;
                                        n = 0;
                                        for (var s = a; n < s; ) {
                                            var r = n++;
                                            t.get(a - r - 1).__dispatch(e);
                                        }
                                        gc.__tempStack.release(t);
                                    }
                                return (e.eventPhase = 2), this.__dispatchEvent(e);
                            },
                            __enterFrame: function (e) {},
                            __getBounds: function (e, t) {
                                null != this.__graphics && this.__graphics.__getBounds(e, t);
                            },
                            __getCursor: function () {
                                return null;
                            },
                            __getFilterBounds: function (e, t) {
                                if ((this.__getRenderBounds(e, t), null != this.__filters)) {
                                    t = xe.__pool.get();
                                    for (var n = 0, a = this.__filters; n < a.length; ) {
                                        var s = a[n];
                                        ++n, t.__expand(-s.__leftExtension, -s.__topExtension, s.__leftExtension + s.__rightExtension, s.__topExtension + s.__bottomExtension);
                                    }
                                    (e.width += t.width), (e.height += t.height), (e.x += t.x), (e.y += t.y), xe.__pool.release(t);
                                }
                            },
                            __getInteractive: function (e) {
                                return !1;
                            },
                            __getLocalBounds: function (e) {
                                this.__getBounds(e, this.__transform), (e.x -= this.__transform.tx), (e.y -= this.__transform.ty);
                            },
                            __getRenderBounds: function (e, t) {
                                if (null == this.__scrollRect) this.__getBounds(e, t);
                                else {
                                    var n = xe.__pool.get();
                                    n.copyFrom(this.__scrollRect), n.__transform(n, t), e.__expand(n.x, n.y, n.width, n.height), xe.__pool.release(n);
                                }
                            },
                            __getRenderTransform: function () {
                                return this.__getWorldTransform(), this.__renderTransform;
                            },
                            __getWorldTransform: function () {
                                if (this.__transformDirty || this.__worldTransformInvalid) {
                                    var e = [],
                                        t = this;
                                    if (null == this.parent) this.__update(!0, !1);
                                    else for (; t != this.stage && (e.push(t), null != (t = t.parent)); );
                                    for (var n = e.length; 0 <= --n; ) (t = e[n]).__update(!0, !1);
                                }
                                return this.__worldTransform;
                            },
                            __globalToLocal: function (e, t) {
                                if ((this.__getRenderTransform(), e == t)) {
                                    var n = this.__renderTransform,
                                        a = n.a * n.d - n.b * n.c;
                                    if (0 == a) (e.x = -n.tx), (e.y = -n.ty);
                                    else {
                                        var s = (1 / a) * (n.c * (n.ty - e.y) + n.d * (e.x - n.tx));
                                        (e.y = (1 / a) * (n.a * (e.y - n.ty) + n.b * (n.tx - e.x))), (e.x = s);
                                    }
                                } else
                                    (a = (n = this.__renderTransform).a * n.d - n.b * n.c),
                                        (t.x = 0 == a ? -n.tx : (1 / a) * (n.c * (n.ty - e.y) + n.d * (e.x - n.tx))),
                                        (a = (n = this.__renderTransform).a * n.d - n.b * n.c),
                                        (t.y = 0 == a ? -n.ty : (1 / a) * (n.a * (e.y - n.ty) + n.b * (n.tx - e.x)));
                                return t;
                            },
                            __hitTest: function (e, t, n, a, s, r) {
                                if (null != this.__graphics) {
                                    if (!r.__visible || this.__isMask || (null != this.get_mask() && !this.get_mask().__hitTestMask(e, t))) return !1;
                                    if (this.__graphics.__hitTest(e, t, n, this.__getRenderTransform())) return null == a || s || a.push(r), !0;
                                }
                                return !1;
                            },
                            __hitTestMask: function (e, t) {
                                return !(null == this.__graphics || !this.__graphics.__hitTest(e, t, !0, this.__getRenderTransform()));
                            },
                            __readGraphicsData: function (e, t) {
                                null != this.__graphics && this.__graphics.__readGraphicsData(e);
                            },
                            __setParentRenderDirty: function () {
                                var e = null != this.__renderParent ? this.__renderParent : this.parent;
                                null == e || e.__renderDirty || ((e.__renderDirty = !0), e.__setParentRenderDirty());
                            },
                            __setRenderDirty: function () {
                                this.__renderDirty || ((this.__renderDirty = !0), this.__setParentRenderDirty());
                            },
                            __setStageReference: function (e) {
                                this.stage = e;
                            },
                            __setTransformDirty: function () {
                                this.__transformDirty || ((this.__transformDirty = !0), this.__setWorldTransformInvalid(), this.__setParentRenderDirty());
                            },
                            __setWorldTransformInvalid: function () {
                                this.__worldTransformInvalid = !0;
                            },
                            __stopAllMovieClips: function () {},
                            __update: function (e, t) {
                                var n = null != this.__renderParent ? this.__renderParent : this.parent;
                                if (
                                    (this.__isMask && null == n && (n = this.__maskTarget),
                                    (this.__renderable = this.__visible && 0 != this.__scaleX && 0 != this.__scaleY && !this.__isMask && (null == n || !n.__isMask)),
                                    this.__updateTransforms(),
                                    (this.__worldTransformInvalid = this.__transformDirty = !1),
                                    !e)
                                )
                                    if (
                                        (gc.__supportDOM &&
                                            ((this.__renderTransformChanged = !this.__renderTransform.equals(this.__renderTransformCache)),
                                            null == this.__renderTransformCache ? (this.__renderTransformCache = this.__renderTransform.clone()) : this.__renderTransformCache.copyFrom(this.__renderTransform)),
                                        null != n)
                                    ) {
                                        if (gc.__supportDOM) {
                                            var a = n.__worldVisible && this.__visible;
                                            (this.__worldVisibleChanged = this.__worldVisible != a),
                                                (this.__worldVisible = a),
                                                (a = this.get_alpha() * n.__worldAlpha),
                                                (this.__worldAlphaChanged = this.__worldAlpha != a),
                                                (this.__worldAlpha = a);
                                        } else this.__worldAlpha = this.get_alpha() * n.__worldAlpha;
                                        null != this.__objectTransform
                                            ? (this.__worldColorTransform.__copyFrom(this.__objectTransform.get_colorTransform()), this.__worldColorTransform.__combine(n.__worldColorTransform))
                                            : this.__worldColorTransform.__copyFrom(n.__worldColorTransform),
                                            (this.__worldBlendMode = null == this.__blendMode || 10 == this.__blendMode ? n.__worldBlendMode : this.__blendMode),
                                            (this.__worldShader = null == this.__shader ? n.__shader : this.__shader),
                                            (this.__worldScale9Grid = null == this.__scale9Grid ? n.__scale9Grid : this.__scale9Grid);
                                    } else
                                        (this.__worldAlpha = this.get_alpha()),
                                            gc.__supportDOM &&
                                                ((this.__worldVisibleChanged = this.__worldVisible != this.__visible), (this.__worldVisible = this.__visible), (this.__worldAlphaChanged = this.__worldAlpha != this.get_alpha())),
                                            null != this.__objectTransform ? this.__worldColorTransform.__copyFrom(this.__objectTransform.get_colorTransform()) : this.__worldColorTransform.__identity(),
                                            (this.__worldBlendMode = this.__blendMode),
                                            (this.__worldShader = this.__shader),
                                            (this.__worldScale9Grid = this.__scale9Grid);
                                t && null != this.get_mask() && this.get_mask().__update(e, !0);
                            },
                            __updateTransforms: function (e) {
                                var t = null != e;
                                (e = t ? e : this.__transform), null == this.__worldTransform && (this.__worldTransform = new uh()), null == this.__renderTransform && (this.__renderTransform = new uh());
                                var n = null != this.__renderParent ? this.__renderParent : this.parent;
                                if (t || null == this.parent) this.__worldTransform.copyFrom(e);
                                else {
                                    var a = this.parent.__worldTransform,
                                        s = this.__worldTransform;
                                    (s.a = e.a * a.a + e.b * a.c),
                                        (s.b = e.a * a.b + e.b * a.d),
                                        (s.c = e.c * a.a + e.d * a.c),
                                        (s.d = e.c * a.b + e.d * a.d),
                                        (s.tx = e.tx * a.a + e.ty * a.c + a.tx),
                                        (s.ty = e.tx * a.b + e.ty * a.d + a.ty);
                                }
                                t || null == n
                                    ? this.__renderTransform.copyFrom(e)
                                    : ((t = n.__renderTransform),
                                      ((n = this.__renderTransform).a = e.a * t.a + e.b * t.c),
                                      (n.b = e.a * t.b + e.b * t.d),
                                      (n.c = e.c * t.a + e.d * t.c),
                                      (n.d = e.c * t.b + e.d * t.d),
                                      (n.tx = e.tx * t.a + e.ty * t.c + t.tx),
                                      (n.ty = e.tx * t.b + e.ty * t.d + t.ty)),
                                    null != this.__scrollRect && ((e = this.__renderTransform), (t = -this.__scrollRect.x), (n = -this.__scrollRect.y), (e.tx = t * e.a + n * e.c + e.tx), (e.ty = t * e.b + n * e.d + e.ty));
                            },
                            get_alpha: function () {
                                return this.__alpha;
                            },
                            set_alpha: function (e) {
                                return 1 < e && (e = 1), 0 > e && (e = 0), e == this.__alpha || this.get_cacheAsBitmap() || this.__renderDirty || ((this.__renderDirty = !0), this.__setParentRenderDirty()), (this.__alpha = e);
                            },
                            get_blendMode: function () {
                                return this.__blendMode;
                            },
                            set_blendMode: function (e) {
                                return null == e && (e = 10), e == this.__blendMode || this.__renderDirty || ((this.__renderDirty = !0), this.__setParentRenderDirty()), (this.__blendMode = e);
                            },
                            get_cacheAsBitmap: function () {
                                return null != this.__filters || this.__cacheAsBitmap;
                            },
                            set_cacheAsBitmap: function (e) {
                                return e == this.__cacheAsBitmap || this.__renderDirty || ((this.__renderDirty = !0), this.__setParentRenderDirty()), (this.__cacheAsBitmap = e);
                            },
                            get_cacheAsBitmapMatrix: function () {
                                return this.__cacheAsBitmapMatrix;
                            },
                            set_cacheAsBitmapMatrix: function (e) {
                                return this.__renderDirty || ((this.__renderDirty = !0), this.__setParentRenderDirty()), (this.__cacheAsBitmapMatrix = null != e ? e.clone() : e);
                            },
                            get_filters: function () {
                                return null == this.__filters ? [] : this.__filters.slice();
                            },
                            set_filters: function (e) {
                                return (
                                    null != e && 0 < e.length
                                        ? ((this.__filters = e), this.__renderDirty || ((this.__renderDirty = !0), this.__setParentRenderDirty()))
                                        : null != this.__filters && ((this.__filters = null), this.__renderDirty || ((this.__renderDirty = !0), this.__setParentRenderDirty())),
                                    e
                                );
                            },
                            get_height: function () {
                                var e = xe.__pool.get();
                                this.__getLocalBounds(e);
                                var t = e.height;
                                return xe.__pool.release(e), t;
                            },
                            set_height: function (e) {
                                var t = xe.__pool.get(),
                                    n = uh.__pool.get();
                                return n.identity(), this.__getBounds(t, n), e != t.height ? this.set_scaleY(e / t.height) : this.set_scaleY(1), xe.__pool.release(t), uh.__pool.release(n), e;
                            },
                            get_loaderInfo: function () {
                                return null != this.stage ? Ew.current.__loaderInfo : null;
                            },
                            get_mask: function () {
                                return this.__mask;
                            },
                            set_mask: function (e) {
                                if (e == this.__mask) return e;
                                if ((e != this.__mask && (this.__setTransformDirty(), this.__renderDirty || ((this.__renderDirty = !0), this.__setParentRenderDirty())), null != this.__mask)) {
                                    (this.__mask.__isMask = !1), (this.__mask.__maskTarget = null), this.__mask.__setTransformDirty();
                                    var t = this.__mask;
                                    t.__renderDirty || ((t.__renderDirty = !0), t.__setParentRenderDirty());
                                }
                                return (
                                    null != e && ((e.__isMask = !0), (e.__maskTarget = this), e.__setWorldTransformInvalid()),
                                    null != this.__cacheBitmap && this.__cacheBitmap.get_mask() != e && this.__cacheBitmap.set_mask(e),
                                    (this.__mask = e)
                                );
                            },
                            get_mouseX: function () {
                                var e = null != this.stage ? this.stage.__mouseX : Ew.current.stage.__mouseX,
                                    t = null != this.stage ? this.stage.__mouseY : Ew.current.stage.__mouseY,
                                    n = this.__getRenderTransform(),
                                    a = n.a * n.d - n.b * n.c;
                                return 0 == a ? -n.tx : (1 / a) * (n.c * (n.ty - t) + n.d * (e - n.tx));
                            },
                            get_mouseY: function () {
                                var e = null != this.stage ? this.stage.__mouseX : Ew.current.stage.__mouseX,
                                    t = null != this.stage ? this.stage.__mouseY : Ew.current.stage.__mouseY,
                                    n = this.__getRenderTransform(),
                                    a = n.a * n.d - n.b * n.c;
                                return 0 == a ? -n.ty : (1 / a) * (n.a * (t - n.ty) + n.b * (n.tx - e));
                            },
                            get_name: function () {
                                return this.__name;
                            },
                            set_name: function (e) {
                                return (this.__name = e);
                            },
                            get_root: function () {
                                return null != this.stage ? Ew.current : null;
                            },
                            get_rotation: function () {
                                return this.__rotation;
                            },
                            set_rotation: function (e) {
                                if (e != this.__rotation) {
                                    this.__rotation = e;
                                    var t = (Math.PI / 180) * this.__rotation;
                                    (this.__rotationSine = Math.sin(t)),
                                        (this.__rotationCosine = Math.cos(t)),
                                        (this.__transform.a = this.__rotationCosine * this.__scaleX),
                                        (this.__transform.b = this.__rotationSine * this.__scaleX),
                                        (this.__transform.c = -this.__rotationSine * this.__scaleY),
                                        (this.__transform.d = this.__rotationCosine * this.__scaleY),
                                        this.__setTransformDirty();
                                }
                                return e;
                            },
                            get_scale9Grid: function () {
                                return null == this.__scale9Grid ? null : this.__scale9Grid.clone();
                            },
                            set_scale9Grid: function (e) {
                                return (
                                    (null == e && null == this.__scale9Grid) ||
                                        (null != e && null != this.__scale9Grid && this.__scale9Grid.equals(e)) ||
                                        (null != e ? (null == this.__scale9Grid && (this.__scale9Grid = new xe()), this.__scale9Grid.copyFrom(e)) : (this.__scale9Grid = null),
                                        this.__renderDirty || ((this.__renderDirty = !0), this.__setParentRenderDirty())),
                                    e
                                );
                            },
                            get_scaleX: function () {
                                return this.__scaleX;
                            },
                            set_scaleX: function (e) {
                                if (e != this.__scaleX)
                                    if (((this.__scaleX = e), 0 == this.__transform.b)) e != this.__transform.a && this.__setTransformDirty(), (this.__transform.a = e);
                                    else {
                                        var t = this.__rotationCosine * e,
                                            n = this.__rotationSine * e;
                                        (this.__transform.a == t && this.__transform.b == n) || this.__setTransformDirty(), (this.__transform.a = t), (this.__transform.b = n);
                                    }
                                return e;
                            },
                            get_scaleY: function () {
                                return this.__scaleY;
                            },
                            set_scaleY: function (e) {
                                if (e != this.__scaleY)
                                    if (((this.__scaleY = e), 0 == this.__transform.c)) e != this.__transform.d && this.__setTransformDirty(), (this.__transform.d = e);
                                    else {
                                        var t = -this.__rotationSine * e,
                                            n = this.__rotationCosine * e;
                                        (this.__transform.d == n && this.__transform.c == t) || this.__setTransformDirty(), (this.__transform.c = t), (this.__transform.d = n);
                                    }
                                return e;
                            },
                            get_scrollRect: function () {
                                return null == this.__scrollRect ? null : this.__scrollRect.clone();
                            },
                            set_scrollRect: function (e) {
                                return (
                                    (null == e && null == this.__scrollRect) ||
                                        (null != e && null != this.__scrollRect && this.__scrollRect.equals(e)) ||
                                        (null != e ? (null == this.__scrollRect && (this.__scrollRect = new xe()), this.__scrollRect.copyFrom(e)) : (this.__scrollRect = null),
                                        this.__setTransformDirty(),
                                        gc.__supportDOM && !this.__renderDirty && ((this.__renderDirty = !0), this.__setParentRenderDirty())),
                                    e
                                );
                            },
                            get_shader: function () {
                                return this.__shader;
                            },
                            set_shader: function (e) {
                                return (this.__shader = e), this.__renderDirty || ((this.__renderDirty = !0), this.__setParentRenderDirty()), e;
                            },
                            get_transform: function () {
                                return null == this.__objectTransform && (this.__objectTransform = new s4(this)), this.__objectTransform;
                            },
                            set_transform: function (e) {
                                if (null == e) throw new Gc(new S2("Parameter transform must be non-null."));
                                return (
                                    null == this.__objectTransform && (this.__objectTransform = new s4(this)),
                                    this.__setTransformDirty(),
                                    this.__objectTransform.set_matrix(e.get_matrix()),
                                    (this.__objectTransform.get_colorTransform().__equals(e.get_colorTransform(), !0) &&
                                        (this.get_cacheAsBitmap() || this.__objectTransform.get_colorTransform().alphaMultiplier == e.get_colorTransform().alphaMultiplier)) ||
                                        (this.__objectTransform.get_colorTransform().__copyFrom(e.get_colorTransform()), this.__renderDirty || ((this.__renderDirty = !0), this.__setParentRenderDirty())),
                                    this.__objectTransform
                                );
                            },
                            get_visible: function () {
                                return this.__visible;
                            },
                            set_visible: function (e) {
                                return e == this.__visible || this.__renderDirty || ((this.__renderDirty = !0), this.__setParentRenderDirty()), (this.__visible = e);
                            },
                            get_width: function () {
                                var e = xe.__pool.get();
                                this.__getLocalBounds(e);
                                var t = e.width;
                                return xe.__pool.release(e), t;
                            },
                            set_width: function (e) {
                                var t = xe.__pool.get(),
                                    n = uh.__pool.get();
                                return n.identity(), this.__getBounds(t, n), e != t.width ? this.set_scaleX(e / t.width) : this.set_scaleX(1), xe.__pool.release(t), uh.__pool.release(n), e;
                            },
                            get_x: function () {
                                return this.__transform.tx;
                            },
                            set_x: function (e) {
                                return e != this.__transform.tx && this.__setTransformDirty(), (this.__transform.tx = e);
                            },
                            get_y: function () {
                                return this.__transform.ty;
                            },
                            set_y: function (e) {
                                return e != this.__transform.ty && this.__setTransformDirty(), (this.__transform.ty = e);
                            },
                            __class__: gc,
                            __properties__: {
                                set_y: "set_y",
                                get_y: "get_y",
                                set_x: "set_x",
                                get_x: "get_x",
                                set_width: "set_width",
                                get_width: "get_width",
                                set_visible: "set_visible",
                                get_visible: "get_visible",
                                set_transform: "set_transform",
                                get_transform: "get_transform",
                                set_shader: "set_shader",
                                get_shader: "get_shader",
                                set_scrollRect: "set_scrollRect",
                                get_scrollRect: "get_scrollRect",
                                set_scaleY: "set_scaleY",
                                get_scaleY: "get_scaleY",
                                set_scaleX: "set_scaleX",
                                get_scaleX: "get_scaleX",
                                set_scale9Grid: "set_scale9Grid",
                                get_scale9Grid: "get_scale9Grid",
                                set_rotation: "set_rotation",
                                get_rotation: "get_rotation",
                                get_root: "get_root",
                                set_name: "set_name",
                                get_name: "get_name",
                                get_mouseY: "get_mouseY",
                                get_mouseX: "get_mouseX",
                                set_mask: "set_mask",
                                get_mask: "get_mask",
                                get_loaderInfo: "get_loaderInfo",
                                set_height: "set_height",
                                get_height: "get_height",
                                set_filters: "set_filters",
                                get_filters: "get_filters",
                                set_cacheAsBitmapMatrix: "set_cacheAsBitmapMatrix",
                                get_cacheAsBitmapMatrix: "get_cacheAsBitmapMatrix",
                                set_cacheAsBitmap: "set_cacheAsBitmap",
                                get_cacheAsBitmap: "get_cacheAsBitmap",
                                set_blendMode: "set_blendMode",
                                get_blendMode: "get_blendMode",
                                set_alpha: "set_alpha",
                                get_alpha: "get_alpha",
                            },
                        }));
                    var Gi = function () {
                        gc.call(this), (this.doubleClickEnabled = !1), (this.mouseEnabled = !0), (this.needsSoftKeyboard = !1), (this.__tabEnabled = null), (this.__tabIndex = -1);
                    };
                    (v["openfl.display.InteractiveObject"] = Gi),
                        (Gi.__name__ = "openfl.display.InteractiveObject"),
                        (Gi.__super__ = gc),
                        (Gi.prototype = K(gc.prototype, {
                            doubleClickEnabled: null,
                            focusRect: null,
                            mouseEnabled: null,
                            needsSoftKeyboard: null,
                            softKeyboardInputAreaOfInterest: null,
                            __tabEnabled: null,
                            __tabIndex: null,
                            requestSoftKeyboard: function () {
                                return Ew.notImplemented({ fileName: "openfl/display/InteractiveObject.hx", lineNumber: 1251, className: "openfl.display.InteractiveObject", methodName: "requestSoftKeyboard" }), !1;
                            },
                            __allowMouseFocus: function () {
                                return this.get_tabEnabled();
                            },
                            __getInteractive: function (e) {
                                return null != e && (e.push(this), null != this.parent && this.parent.__getInteractive(e)), !0;
                            },
                            __hitTest: function (e, t, n, a, s, r) {
                                return !(!r.get_visible() || this.__isMask || (s && !this.mouseEnabled)) && gc.prototype.__hitTest.call(this, e, t, n, a, s, r);
                            },
                            __tabTest: function (e) {
                                this.get_tabEnabled() && e.push(this);
                            },
                            get_tabEnabled: function () {
                                return 1 == this.__tabEnabled;
                            },
                            set_tabEnabled: function (e) {
                                return this.__tabEnabled != e && ((this.__tabEnabled = e), this.dispatchEvent(new ef("tabEnabledChange", !0, !1))), this.__tabEnabled;
                            },
                            get_tabIndex: function () {
                                return this.__tabIndex;
                            },
                            set_tabIndex: function (e) {
                                if (this.__tabIndex != e) {
                                    if (-1 > e) throw new Gc(new tW("Parameter tabIndex must be a non-negative number; got " + e));
                                    (this.__tabIndex = e), this.dispatchEvent(new ef("tabIndexChange", !0, !1));
                                }
                                return this.__tabIndex;
                            },
                            __class__: Gi,
                            __properties__: K(gc.prototype.__properties__, { set_tabIndex: "set_tabIndex", get_tabIndex: "get_tabIndex", set_tabEnabled: "set_tabEnabled", get_tabEnabled: "get_tabEnabled" }),
                        }));
                    var cd = function () {
                        Gi.call(this), (this.__type = UU.DISPLAY_OBJECT_CONTAINER), (this.__tabChildren = this.mouseChildren = !0), (this.__children = []), (this.__removedChildren = zf.toObjectVector(null));
                    };
                    (v["openfl.display.DisplayObjectContainer"] = cd),
                        (cd.__name__ = "openfl.display.DisplayObjectContainer"),
                        (cd.__super__ = Gi),
                        (cd.prototype = K(Gi.prototype, {
                            mouseChildren: null,
                            __removedChildren: null,
                            __tabChildren: null,
                            addChild: function (e) {
                                return this.addChildAt(e, this.get_numChildren());
                            },
                            addChildAt: function (e, t) {
                                if (null == e) throw (((e = new S2("Error #2007: Parameter child must be non-null.")).errorID = 2007), new Gc(e));
                                if (e.stage == e) throw (((e = new HV("Error #3783: A Stage object cannot be added as the child of another object.")).errorID = 3783), new Gc(e));
                                if (t > this.__children.length || 0 > t) throw new Gc("Invalid index position " + t);
                                if (e.parent == this) this.__children[t] != e && (Qc.remove(this.__children, e), this.__children.splice(t, 0, e), this.__renderDirty || ((this.__renderDirty = !0), this.__setParentRenderDirty()));
                                else {
                                    null != e.parent && e.parent.removeChild(e),
                                        this.__children.splice(t, 0, e),
                                        (e.parent = this),
                                        (t = null != this.stage && null == e.stage) && this.__setStageReference(this.stage),
                                        e.__setTransformDirty(),
                                        e.__renderDirty || ((e.__renderDirty = !0), e.__setParentRenderDirty()),
                                        this.__renderDirty || ((this.__renderDirty = !0), this.__setParentRenderDirty());
                                    var n = ef.__pool.get();
                                    (n.type = "added"), (n.bubbles = !0), (n.target = e), e.__dispatchWithCapture(n), ef.__pool.release(n), t && ((n = new ef("addedToStage", !1, !1)), e.__dispatchWithCapture(n), e.__dispatchChildren(n));
                                }
                                return e;
                            },
                            areInaccessibleObjectsUnderPoint: function (e) {
                                return !1;
                            },
                            contains: function (e) {
                                for (; e != this && null != e; ) e = e.parent;
                                return e == this;
                            },
                            getChildAt: function (e) {
                                return 0 <= e && e < this.__children.length ? this.__children[e] : null;
                            },
                            getChildByName: function (e) {
                                for (var t = 0, n = this.__children; t < n.length; ) {
                                    var a = n[t];
                                    if ((++t, a.get_name() == e)) return a;
                                }
                                return null;
                            },
                            getChildIndex: function (e) {
                                for (var t = 0, n = this.__children.length; t < n; ) {
                                    var a = t++;
                                    if (this.__children[a] == e) return a;
                                }
                                return -1;
                            },
                            getObjectsUnderPoint: function (e) {
                                var t = [];
                                return this.__hitTest(e.x, e.y, !1, t, !1, this), t.reverse(), t;
                            },
                            removeChild: function (e) {
                                if (null != e && e.parent == this) {
                                    e.__setTransformDirty(), e.__renderDirty || ((e.__renderDirty = !0), e.__setParentRenderDirty()), this.__renderDirty || ((this.__renderDirty = !0), this.__setParentRenderDirty());
                                    var t = new ef("removed", !0);
                                    e.__dispatchWithCapture(t),
                                        null != this.stage &&
                                            (null != e.stage && this.stage.get_focus() == e && this.stage.set_focus(null),
                                            (t = new ef("removedFromStage", !1, !1)),
                                            e.__dispatchWithCapture(t),
                                            e.__dispatchChildren(t),
                                            e.__setStageReference(null)),
                                        (e.parent = null),
                                        Qc.remove(this.__children, e),
                                        this.__removedChildren.push(e),
                                        e.__setTransformDirty();
                                }
                                return e;
                            },
                            removeChildAt: function (e) {
                                return 0 <= e && e < this.__children.length ? this.removeChild(this.__children[e]) : null;
                            },
                            removeChildren: function (e, t) {
                                if ((null == t && (t = 2147483647), null == e && (e = 0), !((2147483647 == t && ((t = this.__children.length - 1), 0 > t)) || e > this.__children.length - 1))) {
                                    if (t < e || 0 > e || t > this.__children.length) throw new Gc(new tW("The supplied index is out of bounds."));
                                    for (t -= e; 0 <= t; ) this.removeChildAt(e), --t;
                                }
                            },
                            resolve: function (e) {
                                if (null == this.__children) return null;
                                for (var t = 0, n = this.__children; t < n.length; ) {
                                    var a = n[t];
                                    if ((++t, a.get_name() == e)) return a;
                                }
                                return null;
                            },
                            setChildIndex: function (e, t) {
                                0 <= t && t <= this.__children.length && e.parent == this && (Qc.remove(this.__children, e), this.__children.splice(t, 0, e));
                            },
                            stopAllMovieClips: function () {
                                this.__stopAllMovieClips();
                            },
                            swapChildren: function (e, t) {
                                if (e.parent == this && t.parent == this) {
                                    var n = this.__children.indexOf(e),
                                        a = this.__children.indexOf(t);
                                    (this.__children[n] = t), (this.__children[a] = e), this.__renderDirty || ((this.__renderDirty = !0), this.__setParentRenderDirty());
                                }
                            },
                            swapChildrenAt: function (e, t) {
                                var n = this.__children[e];
                                (this.__children[e] = this.__children[t]), (this.__children[t] = n), this.__renderDirty || ((this.__renderDirty = !0), this.__setParentRenderDirty());
                            },
                            __cleanup: function () {
                                Gi.prototype.__cleanup.call(this);
                                for (var e = 0, t = this.__children; e < t.length; ) {
                                    var n = t[e];
                                    ++e, n.__cleanup();
                                }
                                for (e = this.__removedChildren.iterator(); e.hasNext(); ) null == (t = e.next()).stage && t.__cleanup();
                                this.__removedChildren.set_length(0);
                            },
                            __cleanupRemovedChildren: function () {
                                for (var e = this.__removedChildren.iterator(); e.hasNext(); ) {
                                    var t = e.next();
                                    null == t.stage && t.__cleanup();
                                }
                                this.__removedChildren.set_length(0);
                            },
                            __dispatchChildren: function (e) {
                                if (null != this.__children)
                                    for (var t = 0, n = this.__children; t < n.length; ) {
                                        var a = n[t];
                                        if ((++t, (e.target = a), !a.__dispatchWithCapture(e))) break;
                                        a.__dispatchChildren(e);
                                    }
                            },
                            __enterFrame: function (e) {
                                for (var t = 0, n = this.__children; t < n.length; ) {
                                    var a = n[t];
                                    ++t, a.__enterFrame(e);
                                }
                            },
                            __getBounds: function (e, t) {
                                if ((Gi.prototype.__getBounds.call(this, e, t), 0 != this.__children.length)) {
                                    for (var n = uh.__pool.get(), a = 0, s = this.__children; a < s.length; ) {
                                        var r = s[a];
                                        if ((++a, 0 != r.__scaleX && 0 != r.__scaleY)) {
                                            var A = r.__transform;
                                            (n.a = A.a * t.a + A.b * t.c),
                                                (n.b = A.a * t.b + A.b * t.d),
                                                (n.c = A.c * t.a + A.d * t.c),
                                                (n.d = A.c * t.b + A.d * t.d),
                                                (n.tx = A.tx * t.a + A.ty * t.c + t.tx),
                                                (n.ty = A.tx * t.b + A.ty * t.d + t.ty),
                                                r.__getBounds(e, n);
                                        }
                                    }
                                    uh.__pool.release(n);
                                }
                            },
                            __getFilterBounds: function (e, t) {
                                if ((Gi.prototype.__getFilterBounds.call(this, e, t), null == this.__scrollRect && 0 != this.__children.length)) {
                                    for (var n = uh.__pool.get(), a = 0, s = this.__children; a < s.length; ) {
                                        var r = s[a];
                                        if ((++a, 0 != r.__scaleX && 0 != r.__scaleY && !r.__isMask)) {
                                            var A = r.__transform;
                                            (n.a = A.a * t.a + A.b * t.c),
                                                (n.b = A.a * t.b + A.b * t.d),
                                                (n.c = A.c * t.a + A.d * t.c),
                                                (n.d = A.c * t.b + A.d * t.d),
                                                (n.tx = A.tx * t.a + A.ty * t.c + t.tx),
                                                (n.ty = A.tx * t.b + A.ty * t.d + t.ty),
                                                r.__getFilterBounds(e, n);
                                        }
                                    }
                                    uh.__pool.release(n);
                                }
                            },
                            __getRenderBounds: function (e, t) {
                                if (null != this.__scrollRect) Gi.prototype.__getRenderBounds.call(this, e, t);
                                else if ((Gi.prototype.__getBounds.call(this, e, t), 0 != this.__children.length)) {
                                    for (var n = uh.__pool.get(), a = 0, s = this.__children; a < s.length; ) {
                                        var r = s[a];
                                        if ((++a, 0 != r.__scaleX && 0 != r.__scaleY && !r.__isMask)) {
                                            var A = r.__transform;
                                            (n.a = A.a * t.a + A.b * t.c),
                                                (n.b = A.a * t.b + A.b * t.d),
                                                (n.c = A.c * t.a + A.d * t.c),
                                                (n.d = A.c * t.b + A.d * t.d),
                                                (n.tx = A.tx * t.a + A.ty * t.c + t.tx),
                                                (n.ty = A.tx * t.b + A.ty * t.d + t.ty),
                                                r.__getRenderBounds(e, n);
                                        }
                                    }
                                    uh.__pool.release(n);
                                }
                            },
                            __hitTest: function (e, t, n, a, s, r) {
                                if (!r.get_visible() || this.__isMask || (s && !this.mouseEnabled && !this.mouseChildren) || (null != this.get_mask() && !this.get_mask().__hitTestMask(e, t))) return !1;
                                if (null != this.__scrollRect) {
                                    var A = wf.__pool.get();
                                    A.setTo(e, t);
                                    var l = this.__getRenderTransform(),
                                        o = l.a * l.d - l.b * l.c;
                                    if (0 == o) (A.x = -l.tx), (A.y = -l.ty);
                                    else {
                                        var i = (1 / o) * (l.c * (l.ty - A.y) + l.d * (A.x - l.tx));
                                        (A.y = (1 / o) * (l.a * (A.y - l.ty) + l.b * (l.tx - A.x))), (A.x = i);
                                    }
                                    if (!this.__scrollRect.containsPoint(A)) return wf.__pool.release(A), !1;
                                    wf.__pool.release(A);
                                }
                                if (((A = this.__children.length), !s)) {
                                    for (r = !1; 0 <= --A && (!this.__children[A].__hitTest(e, t, n, a, !1, this.__children[A]) || ((r = !0), null != a)); );
                                    return r;
                                }
                                if (null != a && this.mouseChildren) {
                                    if (null != a) {
                                        for (
                                            s = a.length, o = !1;
                                            0 <= --A && !(((l = this.__children[A].__getInteractive(null)) || (this.mouseEnabled && !o)) && this.__children[A].__hitTest(e, t, n, a, !0, this.__children[A]) && ((o = !0), l && a.length > s));

                                        );
                                        if (o) return a.splice(s, 0, r), !0;
                                    }
                                } else for (; 0 <= --A; ) if (this.__children[A].__hitTest(e, t, n, null, !0, this.__children[A])) return null != a && a.push(r), !0;
                                return !1;
                            },
                            __hitTestMask: function (e, t) {
                                for (var n = this.__children.length; 0 <= --n; ) if (this.__children[n].__hitTestMask(e, t)) return !0;
                                return !1;
                            },
                            __readGraphicsData: function (e, t) {
                                if ((Gi.prototype.__readGraphicsData.call(this, e, t), t))
                                    for (var n = 0, a = this.__children; n < a.length; ) {
                                        var s = a[n];
                                        ++n, s.__readGraphicsData(e, t);
                                    }
                            },
                            __setStageReference: function (e) {
                                if ((Gi.prototype.__setStageReference.call(this, e), null != this.__children))
                                    for (var t = 0, n = this.__children; t < n.length; ) {
                                        var a = n[t];
                                        ++t, a.__setStageReference(e);
                                    }
                            },
                            __setWorldTransformInvalid: function () {
                                if (!this.__worldTransformInvalid && ((this.__worldTransformInvalid = !0), null != this.__children))
                                    for (var e = 0, t = this.__children; e < t.length; ) {
                                        var n = t[e];
                                        ++e, n.__setWorldTransformInvalid();
                                    }
                            },
                            __stopAllMovieClips: function () {
                                for (var e = 0, t = this.__children; e < t.length; ) {
                                    var n = t[e];
                                    ++e, n.__stopAllMovieClips();
                                }
                            },
                            __tabTest: function (e) {
                                if ((Gi.prototype.__tabTest.call(this, e), this.get_tabChildren()))
                                    for (var t = 0, n = this.__children; t < n.length; ) {
                                        var a = n[t];
                                        ++t, a.__getInteractive(null) && a.__tabTest(e);
                                    }
                            },
                            __update: function (e, t) {
                                if ((Gi.prototype.__update.call(this, e, t), t)) {
                                    t = 0;
                                    for (var n = this.__children; t < n.length; ) {
                                        var a = n[t];
                                        ++t, a.__update(e, !0);
                                    }
                                }
                            },
                            get_numChildren: function () {
                                return this.__children.length;
                            },
                            get_tabChildren: function () {
                                return this.__tabChildren;
                            },
                            set_tabChildren: function (e) {
                                return this.__tabChildren != e && ((this.__tabChildren = e), this.dispatchEvent(new ef("tabChildrenChange", !0, !1))), this.__tabChildren;
                            },
                            __class__: cd,
                            __properties__: K(Gi.prototype.__properties__, { set_tabChildren: "set_tabChildren", get_tabChildren: "get_tabChildren", get_numChildren: "get_numChildren" }),
                        }));
                    var Yb = function () {
                        cd.call(this), (this.__buttonMode = !1), (this.useHandCursor = !0);
                    };
                    (v["openfl.display.Sprite"] = Yb),
                        (Yb.__name__ = "openfl.display.Sprite"),
                        (Yb.__super__ = cd),
                        (Yb.prototype = K(cd.prototype, {
                            dropTarget: null,
                            hitArea: null,
                            useHandCursor: null,
                            __buttonMode: null,
                            startDrag: function (e, t) {
                                null == e && (e = !1), null != this.stage && this.stage.__startDrag(this, e, t);
                            },
                            stopDrag: function () {
                                null != this.stage && this.stage.__stopDrag(this);
                            },
                            __getCursor: function () {
                                return this.__buttonMode && this.useHandCursor ? "button" : null;
                            },
                            __hitTest: function (e, t, n, a, s, r) {
                                if (s && !this.mouseEnabled && !this.mouseChildren) return !1;
                                if (!r.get_visible() || this.__isMask || (null != this.get_mask() && !this.get_mask().__hitTestMask(e, t))) return this.__hitTestHitArea(e, t, n, a, s, r);
                                if (null != this.__scrollRect) {
                                    var A = wf.__pool.get();
                                    A.setTo(e, t);
                                    var l = this.__getRenderTransform(),
                                        o = l.a * l.d - l.b * l.c;
                                    if (0 == o) (A.x = -l.tx), (A.y = -l.ty);
                                    else {
                                        var i = (1 / o) * (l.c * (l.ty - A.y) + l.d * (A.x - l.tx));
                                        (A.y = (1 / o) * (l.a * (A.y - l.ty) + l.b * (l.tx - A.x))), (A.x = i);
                                    }
                                    if (!this.__scrollRect.containsPoint(A)) return wf.__pool.release(A), this.__hitTestHitArea(e, t, n, a, !0, r);
                                    wf.__pool.release(A);
                                }
                                return cd.prototype.__hitTest.call(this, e, t, n, a, s, r)
                                    ? null == a || s
                                    : null == this.hitArea && null != this.__graphics && this.__graphics.__hitTest(e, t, n, this.__getRenderTransform())
                                    ? (null == a || (s && !this.mouseEnabled) || a.push(r), !0)
                                    : this.__hitTestHitArea(e, t, n, a, s, r);
                            },
                            __hitTestHitArea: function (e, t, n, a, s, r) {
                                return (
                                    null != this.hitArea &&
                                    !this.hitArea.mouseEnabled &&
                                    ((this.hitArea.mouseEnabled = !0), (e = this.hitArea.__hitTest(e, t, n, null, !0, r)), (this.hitArea.mouseEnabled = !1), null != a && e && (a[a.length] = r), e)
                                );
                            },
                            __hitTestMask: function (e, t) {
                                return !!(cd.prototype.__hitTestMask.call(this, e, t) || (null != this.__graphics && this.__graphics.__hitTest(e, t, !0, this.__getRenderTransform())));
                            },
                            get_graphics: function () {
                                return null == this.__graphics && (this.__graphics = new Ny(this)), this.__graphics;
                            },
                            get_tabEnabled: function () {
                                return null == this.__tabEnabled ? this.__buttonMode : this.__tabEnabled;
                            },
                            get_buttonMode: function () {
                                return this.__buttonMode;
                            },
                            set_buttonMode: function (e) {
                                return (this.__buttonMode = e);
                            },
                            __class__: Yb,
                            __properties__: K(cd.prototype.__properties__, { get_graphics: "get_graphics", set_buttonMode: "set_buttonMode", get_buttonMode: "get_buttonMode" }),
                        }));
                    var ke = function () {
                        Yb.call(this), this.addEventListener("addedToStage", N(this, this.onAdded));
                    };
                    (v.Universal = ke),
                        (ke.__name__ = "Universal"),
                        (ke.initWindow = function (e) {
                            (ke.window = e), (e.stage.align = 6), e.stage.set_scaleMode(2);
                        }),
                        (ke.setupTracing = function (e) {
                            null == e && (e = !1), null == ke.oldTrace && (ke.oldTrace = wU.trace), e || !x.releaseMode ? ((wU.trace = ke.oldTrace), (Vh.level = 5)) : ((wU.trace = function (e, t) {}), (Vh.level = 0));
                        }),
                        (ke.reloadGame = function () {
                            Fe.field(ke.am, "reloadGame").apply(ke.am, []);
                        }),
                        (ke.addReloadListener = function (e) {
                            Fe.field(ke.am, "reloadListeners").push(e);
                        }),
                        (ke.__super__ = Yb),
                        (ke.prototype = K(Yb.prototype, {
                            maskLayer: null,
                            onAdded: function (e) {
                                this.removeEventListener("addedToStage", N(this, this.onAdded)), this.initServices(), (this.maskLayer = new ly()), this.initScreen(x.startInFullScreen);
                            },
                            initServices: function () {},
                            initScreen: function (e) {
                                this.stage.set_displayState(2),
                                    this.stage.__setLogicalSize(0, 0),
                                    Hh.get_current().set_x(0),
                                    Hh.get_current().set_y(0),
                                    Hh.get_current().set_scaleX(1),
                                    Hh.get_current().set_scaleY(1),
                                    this.set_x(0),
                                    this.set_y(0),
                                    this.set_scaleX(1),
                                    this.set_scaleY(1),
                                    (a.stage = this.stage);
                                for (var t = new Ug(), n = 0, s = x.scales; n < s.length; ) {
                                    var r = s[n];
                                    ++n, t.set(r, !0);
                                }
                                (ke.windowWidth = x.stageWidth * x.gameScale),
                                    (ke.windowHeight = x.stageHeight * x.gameScale),
                                    (n = this.getDesiredScale(ke.windowWidth, ke.windowHeight, x.stageWidth, x.stageHeight)),
                                    (s = this.getDesiredScale(ee.toFloat(this.stage.get_fullScreenWidth()), ee.toFloat(this.stage.get_fullScreenHeight()), x.stageWidth, x.stageHeight)),
                                    4 == (s = x.forceHiResAssets ? s : n) && null != t.h.__keys__[AA._4X.__id__]
                                        ? ((a.SCALE = 4), (a.IMG_BASE = "4x"))
                                        : 3 <= s && null != t.h.__keys__[AA._3X.__id__]
                                        ? ((a.SCALE = 3), (a.IMG_BASE = "3x"))
                                        : 2 <= s && null != t.h.__keys__[AA._2X.__id__]
                                        ? ((a.SCALE = 2), (a.IMG_BASE = "2x"))
                                        : 1.5 <= s && null != t.h.__keys__[AA._1_5X.__id__]
                                        ? ((a.SCALE = 1.5), (a.IMG_BASE = "1.5x"))
                                        : ((a.SCALE = 1), (a.IMG_BASE = "1x")),
                                    (t = x.stageWidth * a.SCALE),
                                    (s = x.stageHeight * a.SCALE),
                                    (r = ke.windowWidth / t);
                                var A = ke.windowHeight / s;
                                (x.forceHiResAssets || ke.windowWidth != x.stageWidth || ke.windowHeight != x.stageHeight) &&
                                    (1 == x.scaleMode
                                        ? a.SCALE != n && (this.set_scaleX(n / a.SCALE), this.set_scaleY(this.get_scaleX()))
                                        : 2 == x.scaleMode
                                        ? (this.set_scaleX(r), this.set_scaleY(A))
                                        : 3 == x.scaleMode || 5 == x.scaleMode
                                        ? (this.set_scaleX(Math.min(r, A)), this.set_scaleY(this.get_scaleX()))
                                        : 4 == x.scaleMode
                                        ? (this.set_scaleX(Math.max(r, A)), this.set_scaleY(this.get_scaleX()))
                                        : 0 == x.scaleMode && a.SCALE != n && (this.set_scaleX(n / a.SCALE), this.set_scaleY(this.get_scaleX())),
                                    5 != x.scaleMode && 1 != x.scaleMode && (this.set_x(this.get_x() + (ke.windowWidth - t * this.get_scaleX()) / 2), this.set_y(this.get_y() + (ke.windowHeight - s * this.get_scaleY()) / 2))),
                                    (ke.logicalWidth = x.stageWidth),
                                    (ke.logicalHeight = x.stageHeight),
                                    (a.screenScaleX = this.get_scaleX()),
                                    (a.screenScaleY = this.get_scaleY()),
                                    this.maskLayer.get_graphics().clear();
                            },
                            getDesiredScale: function (e, t, n, a) {
                                var s = 2 * n,
                                    r = 2 * a;
                                return (n *= 3), (a *= 3), e >= 2 * s && t >= 2 * r ? 4 : e >= n && t >= a ? 3 : e >= s && t >= r ? 2 : e >= n / 2 && t >= a / 2 ? 1.5 : 1;
                            },
                            preloaderComplete: function () {
                                try {
                                    new a(this);
                                } catch (e) {
                                    (yf.lastException = e), this.stage.__handleError(e instanceof Gc ? e.val : e);
                                }
                                this.stage.dispatchEvent(new ef("resize", !1, !1)), this.stage.window.__fullscreen && this.stage.dispatchEvent(new hL("fullScreen", !1, !1, !0, !0));
                            },
                            __class__: ke,
                        }));
                    var og = {};
                    (v["_Xml.XmlType_Impl_"] = og),
                        (og.__name__ = "_Xml.XmlType_Impl_"),
                        (og.toString = function (e) {
                            switch (e) {
                                case 0:
                                    return "Element";
                                case 1:
                                    return "PCData";
                                case 2:
                                    return "CData";
                                case 3:
                                    return "Comment";
                                case 4:
                                    return "DocType";
                                case 5:
                                    return "ProcessingInstruction";
                                case 6:
                                    return "Document";
                            }
                        });
                    var Ne = function (e) {
                        (this.nodeType = e), (this.children = []), (this.attributeMap = new p());
                    };
                    (v.Xml = Ne),
                        (Ne.__name__ = "Xml"),
                        (Ne.parse = function (e) {
                            return VU.parse(e);
                        }),
                        (Ne.createElement = function (e) {
                            var t = new Ne(Ne.Element);
                            if (t.nodeType != Ne.Element) throw new Gc("Bad node type, expected Element but found " + og.toString(t.nodeType));
                            return (t.nodeName = e), t;
                        }),
                        (Ne.createPCData = function (e) {
                            var t = new Ne(Ne.PCData);
                            if (t.nodeType == Ne.Document || t.nodeType == Ne.Element) throw new Gc("Bad node type, unexpected " + og.toString(t.nodeType));
                            return (t.nodeValue = e), t;
                        }),
                        (Ne.createCData = function (e) {
                            var t = new Ne(Ne.CData);
                            if (t.nodeType == Ne.Document || t.nodeType == Ne.Element) throw new Gc("Bad node type, unexpected " + og.toString(t.nodeType));
                            return (t.nodeValue = e), t;
                        }),
                        (Ne.createComment = function (e) {
                            var t = new Ne(Ne.Comment);
                            if (t.nodeType == Ne.Document || t.nodeType == Ne.Element) throw new Gc("Bad node type, unexpected " + og.toString(t.nodeType));
                            return (t.nodeValue = e), t;
                        }),
                        (Ne.createDocType = function (e) {
                            var t = new Ne(Ne.DocType);
                            if (t.nodeType == Ne.Document || t.nodeType == Ne.Element) throw new Gc("Bad node type, unexpected " + og.toString(t.nodeType));
                            return (t.nodeValue = e), t;
                        }),
                        (Ne.createProcessingInstruction = function (e) {
                            var t = new Ne(Ne.ProcessingInstruction);
                            if (t.nodeType == Ne.Document || t.nodeType == Ne.Element) throw new Gc("Bad node type, unexpected " + og.toString(t.nodeType));
                            return (t.nodeValue = e), t;
                        }),
                        (Ne.createDocument = function () {
                            return new Ne(Ne.Document);
                        }),
                        (Ne.prototype = {
                            nodeType: null,
                            nodeName: null,
                            nodeValue: null,
                            parent: null,
                            children: null,
                            attributeMap: null,
                            get: function (t) {
                                if (this.nodeType != Ne.Element) throw new Gc("Bad node type, expected Element but found " + og.toString(this.nodeType));
                                var n = this.attributeMap;
                                return null != e[t] ? n.getReserved(t) : n.h[t];
                            },
                            set: function (t, n) {
                                if (this.nodeType != Ne.Element) throw new Gc("Bad node type, expected Element but found " + og.toString(this.nodeType));
                                var a = this.attributeMap;
                                null != e[t] ? a.setReserved(t, n) : (a.h[t] = n);
                            },
                            exists: function (t) {
                                if (this.nodeType != Ne.Element) throw new Gc("Bad node type, expected Element but found " + og.toString(this.nodeType));
                                var n = this.attributeMap;
                                return null != e[t] ? n.existsReserved(t) : n.h.hasOwnProperty(t);
                            },
                            attributes: function () {
                                if (this.nodeType != Ne.Element) throw new Gc("Bad node type, expected Element but found " + og.toString(this.nodeType));
                                return this.attributeMap.keys();
                            },
                            elements: function () {
                                if (this.nodeType != Ne.Document && this.nodeType != Ne.Element) throw new Gc("Bad node type, expected Element or Document but found " + og.toString(this.nodeType));
                                for (var e = [], t = 0, n = this.children; t < n.length; ) {
                                    var a = n[t];
                                    ++t, a.nodeType == Ne.Element && e.push(a);
                                }
                                return Qc.iter(e);
                            },
                            elementsNamed: function (e) {
                                if (this.nodeType != Ne.Document && this.nodeType != Ne.Element) throw new Gc("Bad node type, expected Element or Document but found " + og.toString(this.nodeType));
                                for (var t = [], n = 0, a = this.children; n < a.length; ) {
                                    var s = a[n];
                                    if ((++n, s.nodeType == Ne.Element)) {
                                        if (s.nodeType != Ne.Element) throw new Gc("Bad node type, expected Element but found " + og.toString(s.nodeType));
                                        var r = s.nodeName == e;
                                    } else r = !1;
                                    r && t.push(s);
                                }
                                return Qc.iter(t);
                            },
                            firstElement: function () {
                                if (this.nodeType != Ne.Document && this.nodeType != Ne.Element) throw new Gc("Bad node type, expected Element or Document but found " + og.toString(this.nodeType));
                                for (var e = 0, t = this.children; e < t.length; ) {
                                    var n = t[e];
                                    if ((++e, n.nodeType == Ne.Element)) return n;
                                }
                                return null;
                            },
                            addChild: function (e) {
                                if (this.nodeType != Ne.Document && this.nodeType != Ne.Element) throw new Gc("Bad node type, expected Element or Document but found " + og.toString(this.nodeType));
                                null != e.parent && e.parent.removeChild(e), this.children.push(e), (e.parent = this);
                            },
                            removeChild: function (e) {
                                if (this.nodeType != Ne.Document && this.nodeType != Ne.Element) throw new Gc("Bad node type, expected Element or Document but found " + og.toString(this.nodeType));
                                return !!Qc.remove(this.children, e) && ((e.parent = null), !0);
                            },
                            toString: function () {
                                return T2.print(this);
                            },
                            __class__: Ne,
                        });
                    var $h = function () {
                        (this.lowerBound = new td()), (this.upperBound = new td());
                    };
                    (v["box2D.collision.B2AABB"] = $h),
                        ($h.__name__ = "box2D.collision.B2AABB"),
                        ($h.prototype = {
                            isValid: function () {
                                var e = this.upperBound.y - this.lowerBound.y;
                                return 0 <= this.upperBound.x - this.lowerBound.x && 0 <= e && this.lowerBound.isValid() && this.upperBound.isValid();
                            },
                            getCenter: function () {
                                return new td((this.lowerBound.x + this.upperBound.x) / 2, (this.lowerBound.y + this.upperBound.y) / 2);
                            },
                            getExtents: function () {
                                return new td((this.upperBound.x - this.lowerBound.x) / 2, (this.upperBound.y - this.lowerBound.y) / 2);
                            },
                            contains: function (e) {
                                return this.lowerBound.x <= e.lowerBound.x && this.lowerBound.y <= e.lowerBound.y && e.upperBound.x <= this.upperBound.x && e.upperBound.y <= this.upperBound.y;
                            },
                            rayCast: function (e, t) {
                                var n = -Number.MAX_VALUE,
                                    a = Number.MAX_VALUE,
                                    s = t.p1.x,
                                    r = t.p1.y,
                                    A = t.p2.x - t.p1.x;
                                t = t.p2.y - t.p1.y;
                                var l = Math.abs(t),
                                    o = e.normal;
                                if (Math.abs(A) < Number.MIN_VALUE) {
                                    if (s < this.lowerBound.x || this.upperBound.x < s) return !1;
                                } else {
                                    var i = 1 / A;
                                    if (((A = (this.lowerBound.x - s) * i), (s = (this.upperBound.x - s) * i), (i = -1), A > s && ((i = A), (A = s), (s = i), (i = 1)), A > n && ((o.x = i), (o.y = 0), (n = A)), n > (a = Math.min(a, s))))
                                        return !1;
                                }
                                if (l < Number.MIN_VALUE) {
                                    if (r < this.lowerBound.y || this.upperBound.y < r) return !1;
                                } else if (
                                    ((i = 1 / t),
                                    (A = (this.lowerBound.y - r) * i),
                                    (s = (this.upperBound.y - r) * i),
                                    (i = -1),
                                    A > s && ((i = A), (A = s), (s = i), (i = 1)),
                                    A > n && ((o.y = i), (o.x = 0), (n = A)),
                                    n > (a = Math.min(a, s)))
                                )
                                    return !1;
                                return (e.fraction = n), !0;
                            },
                            testOverlap: function (e) {
                                var t = e.lowerBound.y - this.upperBound.y,
                                    n = this.lowerBound.y - e.upperBound.y;
                                return !(0 < e.lowerBound.x - this.upperBound.x || 0 < t || 0 < this.lowerBound.x - e.upperBound.x || 0 < n);
                            },
                            combine: function (e, t) {
                                (this.lowerBound.x = Math.min(e.lowerBound.x, t.lowerBound.x)),
                                    (this.lowerBound.y = Math.min(e.lowerBound.y, t.lowerBound.y)),
                                    (this.upperBound.x = Math.max(e.upperBound.x, t.upperBound.x)),
                                    (this.upperBound.y = Math.max(e.upperBound.y, t.upperBound.y));
                            },
                            reset: function () {
                                (this.lowerBound.x = 0), (this.lowerBound.y = 0), (this.upperBound.x = 0), (this.upperBound.y = 0);
                            },
                            setTo: function (e) {
                                (this.lowerBound.x = e.lowerBound.x), (this.lowerBound.y = e.lowerBound.y), (this.upperBound.x = e.upperBound.x), (this.upperBound.y = e.upperBound.y);
                            },
                            lowerBound: null,
                            upperBound: null,
                            __class__: $h,
                        });
                    var td = function (e, t) {
                        null == t && (t = 0), null == e && (e = 0), (this.x = e), (this.y = t);
                    };
                    (v["box2D.common.math.B2Vec2"] = td),
                        (td.__name__ = "box2D.common.math.B2Vec2"),
                        (td.make = function (e, t) {
                            return new td(e, t);
                        }),
                        (td.freePool = function () {
                            td.pooli = 0;
                        }),
                        (td.getFromPool = function () {
                            if ((500 < td.pooli && (td.pooli = 0), td.pooli < td.pool.length)) {
                                var e = td.pool[td.pooli];
                                return (e.x = 0), (e.y = 0), td.pooli++, e;
                            }
                            return (e = new td()), td.pool.push(e), td.pooli++, e;
                        }),
                        (td.prototype = {
                            setZero: function () {
                                this.y = this.x = 0;
                            },
                            set: function (e, t) {
                                null == t && (t = 0), null == e && (e = 0), (this.x = e), (this.y = t);
                            },
                            setV: function (e) {
                                (this.x = e.x), (this.y = e.y);
                            },
                            getNegative: function () {
                                return new td(-this.x, -this.y);
                            },
                            getNegativePooled: function () {
                                var e = td.getFromPool();
                                return (e.x = -this.x), (e.y = -this.y), e;
                            },
                            negativeSelf: function () {
                                (this.x = -this.x), (this.y = -this.y);
                            },
                            copy: function (e) {
                                if ((null == e && (e = !1), e)) {
                                    e = td.getFromPool();
                                    var t = this.x,
                                        n = this.y;
                                    null == n && (n = 0), null == t && (t = 0), (e.x = t), (e.y = n);
                                } else e = new td(this.x, this.y);
                                return e;
                            },
                            add: function (e) {
                                (this.x += e.x), (this.y += e.y);
                            },
                            subtract: function (e) {
                                (this.x -= e.x), (this.y -= e.y);
                            },
                            multiply: function (e) {
                                (this.x *= e), (this.y *= e);
                            },
                            mulM: function (e) {
                                var t = this.x;
                                (this.x = e.col1.x * t + e.col2.x * this.y), (this.y = e.col1.y * t + e.col2.y * this.y);
                            },
                            mulTM: function (e) {
                                var t = kd.dot(this, e.col1);
                                (this.y = kd.dot(this, e.col2)), (this.x = t);
                            },
                            crossVF: function (e) {
                                var t = this.x;
                                (this.x = e * this.y), (this.y = -e * t);
                            },
                            crossFV: function (e) {
                                var t = this.x;
                                (this.x = -e * this.y), (this.y = e * t);
                            },
                            minV: function (e) {
                                (this.x = this.x < e.x ? this.x : e.x), (this.y = this.y < e.y ? this.y : e.y);
                            },
                            maxV: function (e) {
                                (this.x = this.x > e.x ? this.x : e.x), (this.y = this.y > e.y ? this.y : e.y);
                            },
                            abs: function () {
                                0 > this.x && (this.x = -this.x), 0 > this.y && (this.y = -this.y);
                            },
                            length: function () {
                                return Math.sqrt(this.x * this.x + this.y * this.y);
                            },
                            lengthSquared: function () {
                                return this.x * this.x + this.y * this.y;
                            },
                            normalize: function () {
                                var e = Math.sqrt(this.x * this.x + this.y * this.y);
                                if (e < Number.MIN_VALUE) return 0;
                                var t = 1 / e;
                                return (this.x *= t), (this.y *= t), e;
                            },
                            perpDot: function (e) {
                                return -this.y * e.x + this.x * e.y;
                            },
                            winding: function (e, t) {
                                var n = e.copy();
                                return n.subtract(this), (t = t.copy()).subtract(e), n.perpDot(t);
                            },
                            isValid: function () {
                                return !!kd.isValid(this.x) && kd.isValid(this.y);
                            },
                            x: null,
                            y: null,
                            toString: function () {
                                return "(" + this.x + ", " + this.y + ")";
                            },
                            reset: function () {
                                this.y = this.x = 0;
                            },
                            __class__: td,
                        });
                    var Aq = function () {
                        (this.v = new td()), (this.id = new pv());
                    };
                    (v["box2D.collision.ClipVertex"] = Aq),
                        (Aq.__name__ = "box2D.collision.ClipVertex"),
                        (Aq.prototype = {
                            set: function (e) {
                                var t = this.v,
                                    n = e.v;
                                (t.x = n.x), (t.y = n.y), this.id.set(e.id);
                            },
                            v: null,
                            id: null,
                            __class__: Aq,
                        });
                    var pv = function () {
                        (this.features = new fJ()), (this.features._m_id = this);
                    };
                    (v["box2D.collision.B2ContactID"] = pv),
                        (pv.__name__ = "box2D.collision.B2ContactID"),
                        (pv.prototype = {
                            set: function (e) {
                                this.set_key(e._key);
                            },
                            copy: function () {
                                var e = new pv();
                                return e.set_key(this.get_key()), e;
                            },
                            get_key: function () {
                                return this._key;
                            },
                            set_key: function (e) {
                                return (
                                    (this._key = e),
                                    (this.features._referenceEdge = 255 & this._key),
                                    (this.features._incidentEdge = ((65280 & this._key) >> 8) & 255),
                                    (this.features._incidentVertex = ((16711680 & this._key) >> 16) & 255),
                                    (this.features._flip = ((-16777216 & this._key) >> 24) & 255),
                                    this._key
                                );
                            },
                            features: null,
                            _key: null,
                            indexA: null,
                            indexB: null,
                            typeA: null,
                            typeB: null,
                            __class__: pv,
                            __properties__: { set_key: "set_key", get_key: "get_key" },
                        });
                    var fJ = function () {};
                    (v["box2D.collision.Features"] = fJ),
                        (fJ.__name__ = "box2D.collision.Features"),
                        (fJ.prototype = {
                            get_referenceEdge: function () {
                                return this._referenceEdge;
                            },
                            set_referenceEdge: function (e) {
                                return (this._referenceEdge = e), (this._m_id._key = (-256 & this._m_id._key) | (255 & this._referenceEdge)), e;
                            },
                            _referenceEdge: null,
                            get_incidentEdge: function () {
                                return this._incidentEdge;
                            },
                            set_incidentEdge: function (e) {
                                return (this._incidentEdge = e), (this._m_id._key = (-65281 & this._m_id._key) | ((this._incidentEdge << 8) & 65280)), e;
                            },
                            _incidentEdge: null,
                            get_incidentVertex: function () {
                                return this._incidentVertex;
                            },
                            set_incidentVertex: function (e) {
                                return (this._incidentVertex = e), (this._m_id._key = (-16711681 & this._m_id._key) | ((this._incidentVertex << 16) & 16711680)), e;
                            },
                            _incidentVertex: null,
                            get_flip: function () {
                                return this._flip;
                            },
                            set_flip: function (e) {
                                return (this._flip = e), (this._m_id._key = (16777215 & this._m_id._key) | ((this._flip << 24) & -16777216)), e;
                            },
                            _flip: null,
                            _m_id: null,
                            __class__: fJ,
                            __properties__: {
                                set_flip: "set_flip",
                                get_flip: "get_flip",
                                set_incidentVertex: "set_incidentVertex",
                                get_incidentVertex: "get_incidentVertex",
                                set_incidentEdge: "set_incidentEdge",
                                get_incidentEdge: "get_incidentEdge",
                                set_referenceEdge: "set_referenceEdge",
                                get_referenceEdge: "get_referenceEdge",
                            },
                        });
                    var Nm = function () {};
                    (v["box2D.collision.B2Collision"] = Nm),
                        (Nm.__name__ = "box2D.collision.B2Collision"),
                        (Nm.clipSegmentToLine = function (e, t, n, a) {
                            var s = 0,
                                r = t[0],
                                A = r.v,
                                l = (r = t[1]).v,
                                o = n.x * A.x + n.y * A.y - a;
                            return (
                                (r = n.x * l.x + n.y * l.y - a),
                                0 >= o && e[s++].set(t[0]),
                                0 >= r && e[s++].set(t[1]),
                                0 > o * r && ((n = o / (o - r)), ((r = (r = e[s]).v).x = A.x + n * (l.x - A.x)), (r.y = A.y + n * (l.y - A.y)), ((r = e[s]).id = (0 < o ? t[0] : t[1]).id), ++s),
                                s
                            );
                        }),
                        (Nm.edgeSeparation = function (e, t, n, a, s) {
                            var r = e.m_vertices,
                                A = a.m_vertexCount;
                            a = a.m_vertices;
                            var l = t.R,
                                o = e.m_normals[n];
                            e = l.col1.x * o.x + l.col2.x * o.y;
                            var i = l.col1.y * o.x + l.col2.y * o.y,
                                u = (l = s.R).col1.x * e + l.col1.y * i;
                            l = l.col2.x * e + l.col2.y * i;
                            for (var g = 0, m = Number.MAX_VALUE, d = 0; d < A; ) {
                                var c = d++;
                                (o = (o = a[c]).x * u + o.y * l) < m && ((m = o), (g = c));
                            }
                            return (
                                (o = r[n]),
                                (l = t.R),
                                (n = t.position.x + (l.col1.x * o.x + l.col2.x * o.y)),
                                (t = t.position.y + (l.col1.y * o.x + l.col2.y * o.y)),
                                (o = a[g]),
                                (l = s.R),
                                (s.position.x + (l.col1.x * o.x + l.col2.x * o.y) - n) * e + (s.position.y + (l.col1.y * o.x + l.col2.y * o.y) - t) * i
                            );
                        }),
                        (Nm.findMaxSeparation = function (e, t, n, a, s) {
                            var r = t.m_vertexCount,
                                A = t.m_normals,
                                l = s.R,
                                o = a.m_centroid,
                                i = s.position.x + (l.col1.x * o.x + l.col2.x * o.y),
                                u = s.position.y + (l.col1.y * o.x + l.col2.y * o.y);
                            (l = n.R),
                                (o = t.m_centroid),
                                (i -= n.position.x + (l.col1.x * o.x + l.col2.x * o.y)),
                                (u -= n.position.y + (l.col1.y * o.x + l.col2.y * o.y)),
                                (l = i * n.R.col1.x + u * n.R.col1.y),
                                (u = i * n.R.col2.x + u * n.R.col2.y),
                                (i = 0);
                            for (var g = -Number.MAX_VALUE, m = 0; m < r; ) {
                                var d = m++;
                                (o = (o = A[d]).x * l + o.y * u) > g && ((g = o), (i = d));
                            }
                            if (((A = Nm.edgeSeparation(t, n, i, a, s)), (g = 0 <= i - 1 ? i - 1 : r - 1), (l = Nm.edgeSeparation(t, n, g, a, s)), (m = i + 1 < r ? i + 1 : 0), (u = Nm.edgeSeparation(t, n, m, a, s)), l > A && l > u)) o = -1;
                            else {
                                if (!(u > A)) return (e[0] = i), A;
                                (o = 1), (g = m), (l = u);
                            }
                            for (; (i = -1 == o ? (0 <= g - 1 ? g - 1 : r - 1) : g + 1 < r ? g + 1 : 0), (A = Nm.edgeSeparation(t, n, i, a, s)) > l; ) (g = i), (l = A);
                            return (e[0] = g), l;
                        }),
                        (Nm.findIncidentEdge = function (e, t, n, a, s, r) {
                            var A = s.m_vertexCount,
                                l = s.m_vertices;
                            s = s.m_normals;
                            var o = n.R;
                            (t = t.m_normals[a]), (n = o.col1.x * t.x + o.col2.x * t.y);
                            var i = o.col1.y * t.x + o.col2.y * t.y;
                            (t = (o = r.R).col1.x * n + o.col1.y * i), (i = o.col2.x * n + o.col2.y * i), (n = t), (o = 0);
                            for (var u = Number.MAX_VALUE, g = 0; g < A; ) {
                                var m = g++;
                                (t = n * (t = s[m]).x + i * t.y) < u && ((u = t), (o = m));
                            }
                            (A = (s = o) + 1 < A ? s + 1 : 0),
                                (n = e[0]),
                                (t = l[s]),
                                (o = r.R),
                                (n.v.x = r.position.x + (o.col1.x * t.x + o.col2.x * t.y)),
                                (n.v.y = r.position.y + (o.col1.y * t.x + o.col2.y * t.y)),
                                n.id.features.set_referenceEdge(a),
                                n.id.features.set_incidentEdge(s),
                                n.id.features.set_incidentVertex(0),
                                (n = e[1]),
                                (t = l[A]),
                                (o = r.R),
                                (n.v.x = r.position.x + (o.col1.x * t.x + o.col2.x * t.y)),
                                (n.v.y = r.position.y + (o.col1.y * t.x + o.col2.y * t.y)),
                                n.id.features.set_referenceEdge(a),
                                n.id.features.set_incidentEdge(A),
                                n.id.features.set_incidentVertex(1);
                        }),
                        (Nm.makeClipPointVector = function () {
                            var e = [];
                            return (e[0] = new Aq()), (e[1] = new Aq()), e;
                        }),
                        (Nm.collidePolygons = function (e, t, n, a, s) {
                            e.m_pointCount = 0;
                            var r = t.m_radius + a.m_radius;
                            Nm.s_edgeAO[0] = 0;
                            var A = Nm.findMaxSeparation(Nm.s_edgeAO, t, n, a, s),
                                l = Nm.s_edgeAO[0];
                            if (!(A > r)) {
                                Nm.s_edgeBO[0] = 0;
                                var o = Nm.findMaxSeparation(Nm.s_edgeBO, a, s, t, n),
                                    i = Nm.s_edgeBO[0];
                                if (!(o > r)) {
                                    o > 0.98 * A + 0.001 ? ((A = a), (a = t), (t = s), (o = i), (e.m_type = 4), (l = 1)) : ((A = t), (t = n), (n = s), (o = l), (e.m_type = 2), (l = 0)),
                                        (i = Nm.s_incidentEdge),
                                        Nm.findIncidentEdge(i, A, t, o, a, n),
                                        (s = (a = A.m_vertices)[o]);
                                    var u = o + 1 < A.m_vertexCount ? a[o + 1] : a[0];
                                    (A = Nm.s_localTangent), (a = u.x - s.x), null == (o = u.y - s.y) && (o = 0), null == a && (a = 0), (A.x = a), (A.y = o), A.normalize();
                                    var g = Nm.s_localNormal;
                                    (g.x = A.y), (g.y = -A.x), (a = Nm.s_planePoint), (o = 0.5 * (s.x + u.x));
                                    var m = 0.5 * (s.y + u.y);
                                    null == m && (m = 0), null == o && (o = 0), (a.x = o), (a.y = m), (m = Nm.s_tangent), (o = t.R), (m.x = o.col1.x * A.x + o.col2.x * A.y), (m.y = o.col1.y * A.x + o.col2.y * A.y);
                                    var d = Nm.s_tangent2;
                                    (d.x = -m.x), (d.y = -m.y), ((A = Nm.s_normal).x = m.y), (A.y = -m.x);
                                    var c = Nm.s_v11,
                                        p = Nm.s_v12;
                                    if (
                                        ((c.x = t.position.x + (o.col1.x * s.x + o.col2.x * s.y)),
                                        (c.y = t.position.y + (o.col1.y * s.x + o.col2.y * s.y)),
                                        (p.x = t.position.x + (o.col1.x * u.x + o.col2.x * u.y)),
                                        (p.y = t.position.y + (o.col1.y * u.x + o.col2.y * u.y)),
                                        (t = A.x * c.x + A.y * c.y),
                                        (o = m.x * p.x + m.y * p.y + r),
                                        (u = Nm.s_clipPoints1),
                                        (s = Nm.s_clipPoints2),
                                        !(2 > (i = Nm.clipSegmentToLine(u, i, d, -m.x * c.x - m.y * c.y + r)) || ((i = Nm.clipSegmentToLine(s, u, m, o)), 2 > i)))
                                    ) {
                                        for ((i = e.m_localPlaneNormal).x = g.x, i.y = g.y, (i = e.m_localPoint).x = a.x, i.y = a.y, a = i = 0, g = Me.b2_maxManifoldPoints; a < g; )
                                            (m = s[(o = a++)]),
                                                A.x * m.v.x + A.y * m.v.y - t <= r &&
                                                    ((u = e.m_points[i]),
                                                    (o = n.R),
                                                    (d = m.v.x - n.position.x),
                                                    (c = m.v.y - n.position.y),
                                                    (u.m_localPoint.x = d * o.col1.x + c * o.col1.y),
                                                    (u.m_localPoint.y = d * o.col2.x + c * o.col2.y),
                                                    u.m_id.set(m.id),
                                                    u.m_id.features.set_flip(l),
                                                    ++i);
                                        e.m_pointCount = i;
                                    }
                                }
                            }
                        }),
                        (Nm.collideCircles = function (e, t, n, a, s) {
                            e.m_pointCount = 0;
                            var r = n.R,
                                A = t.m_p,
                                l = n.position.x + (r.col1.x * A.x + r.col2.x * A.y);
                            (n = n.position.y + (r.col1.y * A.x + r.col2.y * A.y)),
                                (r = s.R),
                                (A = a.m_p),
                                (l = s.position.x + (r.col1.x * A.x + r.col2.x * A.y) - l) * l + (s = s.position.y + (r.col1.y * A.x + r.col2.y * A.y) - n) * s > (r = t.m_radius + a.m_radius) * r ||
                                    ((e.m_type = 1),
                                    (s = e.m_localPoint),
                                    (t = t.m_p),
                                    (s.x = t.x),
                                    (s.y = t.y),
                                    ((t = e.m_localPlaneNormal).x = 0),
                                    (t.y = 0),
                                    (e.m_pointCount = 1),
                                    (t = e.m_points[0].m_localPoint),
                                    (a = a.m_p),
                                    (t.x = a.x),
                                    (t.y = a.y),
                                    e.m_points[0].m_id.set_key(0));
                        }),
                        (Nm.collidePolygonAndCircle = function (e, t, n, a, s) {
                            e.m_pointCount = 0;
                            var r = s.R,
                                A = a.m_p,
                                l = s.position.x + (r.col1.x * A.x + r.col2.x * A.y) - n.position.x,
                                o = s.position.y + (r.col1.y * A.x + r.col2.y * A.y) - n.position.y;
                            (n = l * (r = n.R).col1.x + o * r.col1.y), (r = l * r.col2.x + o * r.col2.y);
                            var i = 0,
                                u = -Number.MAX_VALUE;
                            s = t.m_radius + a.m_radius;
                            var g = t.m_vertexCount,
                                m = t.m_vertices;
                            t = t.m_normals;
                            for (var d = 0; d < g; ) {
                                var c = d++;
                                if (((l = n - (A = m[c]).x), (o = r - A.y), (A = (A = t[c]).x * l + A.y * o) > s)) return;
                                A > u && ((u = A), (i = c));
                            }
                            if (((A = m[(l = i)]), (g = m[l + 1 < g ? l + 1 : 0]), u < Number.MIN_VALUE))
                                (e.m_pointCount = 1), (e.m_type = 2), (n = e.m_localPlaneNormal), (r = t[i]), (n.x = r.x), (n.y = r.y), (e.m_localPoint.x = 0.5 * (A.x + g.x)), (e.m_localPoint.y = 0.5 * (A.y + g.y));
                            else if (((u = (n - g.x) * (A.x - g.x) + (r - g.y) * (A.y - g.y)), 0 >= (n - A.x) * (g.x - A.x) + (r - A.y) * (g.y - A.y))) {
                                if ((n - A.x) * (n - A.x) + (r - A.y) * (r - A.y) > s * s) return;
                                (e.m_pointCount = 1), (e.m_type = 2), (e.m_localPlaneNormal.x = n - A.x), (e.m_localPlaneNormal.y = r - A.y), e.m_localPlaneNormal.normalize(), ((n = e.m_localPoint).x = A.x), (n.y = A.y);
                            } else if (0 >= u) {
                                if ((n - g.x) * (n - g.x) + (r - g.y) * (r - g.y) > s * s) return;
                                (e.m_pointCount = 1), (e.m_type = 2), (e.m_localPlaneNormal.x = n - g.x), (e.m_localPlaneNormal.y = r - g.y), e.m_localPlaneNormal.normalize(), ((n = e.m_localPoint).x = g.x), (n.y = g.y);
                            } else {
                                if (((i = 0.5 * (A.x + g.x)), (A = 0.5 * (A.y + g.y)), (u = (n - i) * t[l].x + (r - A) * t[l].y) > s)) return;
                                (e.m_pointCount = 1),
                                    (e.m_type = 2),
                                    (e.m_localPlaneNormal.x = t[l].x),
                                    (e.m_localPlaneNormal.y = t[l].y),
                                    e.m_localPlaneNormal.normalize(),
                                    null == (s = A) && (s = 0),
                                    null == (r = i) && (r = 0),
                                    ((n = e.m_localPoint).x = r),
                                    (n.y = s);
                            }
                            (n = e.m_points[0].m_localPoint), (a = a.m_p), (n.x = a.x), (n.y = a.y), e.m_points[0].m_id.set_key(0);
                        }),
                        (Nm.testOverlap = function (e, t) {
                            var n = t.lowerBound,
                                a = e.upperBound,
                                s = n.x - a.x,
                                r = n.y - a.y;
                            return (n = e.lowerBound), (a = t.upperBound), (e = n.y - a.y), !(0 < s || 0 < r || 0 < n.x - a.x || 0 < e);
                        });
                    var U4 = function () {
                        (this.position = new td()), (this.velocity = new td()), (this.normal = new td()), (this.id = new pv());
                    };
                    (v["box2D.collision.B2ContactPoint"] = U4),
                        (U4.__name__ = "box2D.collision.B2ContactPoint"),
                        (U4.prototype = { shape1: null, shape2: null, position: null, velocity: null, normal: null, separation: null, friction: null, restitution: null, id: null, __class__: U4 });
                    var V4 = function () {
                        (this.m_v1 = new U2()), (this.m_v2 = new U2()), (this.m_v3 = new U2()), (this.m_vertices = []), (this.m_vertices[0] = this.m_v1), (this.m_vertices[1] = this.m_v2), (this.m_vertices[2] = this.m_v3);
                    };
                    (v["box2D.collision.B2Simplex"] = V4),
                        (V4.__name__ = "box2D.collision.B2Simplex"),
                        (V4.prototype = {
                            readCache: function (e, t, n, a, s) {
                                Me.b2Assert(0 <= e.count && 3 >= e.count), (this.m_count = e.count);
                                var r = this.m_vertices;
                                if (e.useCache) {
                                    for (var A = 0, l = this.m_count; A < l; ) {
                                        var o = A++,
                                            i = r[o];
                                        (i.indexA = e.indexA[o]), (i.indexB = e.indexB[o]), (o = t.getVertex(i.indexA));
                                        var u = a.getVertex(i.indexB);
                                        (i.wA = kd.mulX(n, o, !0)), (i.wB = kd.mulX(s, u, !0)), (i.w = kd.subtractVVPooled(i.wB, i.wA)), (i.a = 0);
                                    }
                                    1 < this.m_count && ((e = e.metric), (i = this.getMetric()) < 0.5 * e || 2 * e < i || i < Number.MIN_VALUE) && (this.m_count = 0);
                                }
                                0 == this.m_count &&
                                    (((i = r[0]).indexA = 0), (i.indexB = 0), (o = t.getVertex(0)), (u = a.getVertex(0)), (i.wA = kd.mulX(n, o, !0)), (i.wB = kd.mulX(s, u, !0)), (i.w = kd.subtractVVPooled(i.wB, i.wA)), (this.m_count = 1));
                            },
                            writeCache: function (e) {
                                if (e.useCache) {
                                    (e.metric = this.getMetric()), (e.count = this.m_count);
                                    for (var t = this.m_vertices, n = 0, a = this.m_count; n < a; ) {
                                        var s = n++;
                                        (e.indexA[s] = t[s].indexA), (e.indexB[s] = t[s].indexB);
                                    }
                                }
                            },
                            getSearchDirection: function () {
                                switch (this.m_count) {
                                    case 1:
                                        return this.m_v1.w.getNegativePooled();
                                    case 2:
                                        var e = kd.subtractVVPooled(this.m_v2.w, this.m_v1.w);
                                        return 0 < kd.crossVV(e, this.m_v1.w.getNegativePooled()) ? kd.crossFV(1, e, !0) : kd.crossVF(e, 1, !0);
                                    default:
                                        return Me.b2Assert(!1), td.getFromPool();
                                }
                            },
                            getClosestPoint: function () {
                                switch (this.m_count) {
                                    case 0:
                                        return Me.b2Assert(!1), td.getFromPool();
                                    case 1:
                                        return this.m_v1.w;
                                    case 2:
                                        var e = td.getFromPool();
                                        return (e.x = this.m_v1.a * this.m_v1.w.x + this.m_v2.a * this.m_v2.w.x), (e.y = this.m_v1.a * this.m_v1.w.y + this.m_v2.a * this.m_v2.w.y), e;
                                    default:
                                        return Me.b2Assert(!1), td.getFromPool();
                                }
                            },
                            getWitnessPoints: function (e, t) {
                                switch (this.m_count) {
                                    case 0:
                                        Me.b2Assert(!1);
                                        break;
                                    case 1:
                                        var n = this.m_v1.wA;
                                        (e.x = n.x), (e.y = n.y), (e = this.m_v1.wB), (t.x = e.x), (t.y = e.y);
                                        break;
                                    case 2:
                                        (e.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x),
                                            (e.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y),
                                            (t.x = this.m_v1.a * this.m_v1.wB.x + this.m_v2.a * this.m_v2.wB.x),
                                            (t.y = this.m_v1.a * this.m_v1.wB.y + this.m_v2.a * this.m_v2.wB.y);
                                        break;
                                    case 3:
                                        (t.x = e.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x + this.m_v3.a * this.m_v3.wA.x),
                                            (t.y = e.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y + this.m_v3.a * this.m_v3.wA.y);
                                        break;
                                    default:
                                        Me.b2Assert(!1);
                                }
                            },
                            getMetric: function () {
                                switch (this.m_count) {
                                    case 0:
                                        return Me.b2Assert(!1), 0;
                                    case 1:
                                        return 0;
                                    case 2:
                                        return kd.subtractVVPooled(this.m_v1.w, this.m_v2.w).length();
                                    case 3:
                                        return kd.crossVV(kd.subtractVVPooled(this.m_v2.w, this.m_v1.w), kd.subtractVVPooled(this.m_v3.w, this.m_v1.w));
                                    default:
                                        return Me.b2Assert(!1), 0;
                                }
                            },
                            solve2: function () {
                                var e = this.m_v1.w,
                                    t = this.m_v2.w,
                                    n = kd.subtractVVPooled(t, e);
                                0 >= (e = -(e.x * n.x + e.y * n.y))
                                    ? (this.m_count = this.m_v1.a = 1)
                                    : 0 >= (t = t.x * n.x + t.y * n.y)
                                    ? ((this.m_count = this.m_v2.a = 1), this.m_v1.set(this.m_v2))
                                    : ((n = 1 / (t + e)), (this.m_v1.a = t * n), (this.m_v2.a = e * n), (this.m_count = 2));
                            },
                            solve3: function () {
                                var e = this.m_v1.w,
                                    t = this.m_v2.w,
                                    n = this.m_v3.w,
                                    a = kd.subtractVVPooled(t, e),
                                    s = kd.dot(e, a),
                                    r = kd.dot(t, a);
                                s = -s;
                                var A = kd.subtractVVPooled(n, e),
                                    l = kd.dot(e, A),
                                    o = kd.dot(n, A);
                                l = -l;
                                var i = kd.subtractVVPooled(n, t),
                                    u = kd.dot(t, i);
                                (i = kd.dot(n, i)),
                                    (u = -u),
                                    (a = (A = kd.crossVV(a, A)) * kd.crossVV(t, n)),
                                    (n = A * kd.crossVV(n, e)),
                                    (e = A * kd.crossVV(e, t)),
                                    0 >= s && 0 >= l
                                        ? (this.m_count = this.m_v1.a = 1)
                                        : 0 < r && 0 < s && 0 >= e
                                        ? ((o = 1 / (r + s)), (this.m_v1.a = r * o), (this.m_v2.a = s * o), (this.m_count = 2))
                                        : 0 < o && 0 < l && 0 >= n
                                        ? ((r = 1 / (o + l)), (this.m_v1.a = o * r), (this.m_v3.a = l * r), (this.m_count = 2), this.m_v2.set(this.m_v3))
                                        : 0 >= r && 0 >= u
                                        ? ((this.m_count = this.m_v2.a = 1), this.m_v1.set(this.m_v2))
                                        : 0 >= o && 0 >= i
                                        ? ((this.m_count = this.m_v3.a = 1), this.m_v1.set(this.m_v3))
                                        : 0 < i && 0 < u && 0 >= a
                                        ? ((r = 1 / (i + u)), (this.m_v2.a = i * r), (this.m_v3.a = u * r), (this.m_count = 2), this.m_v1.set(this.m_v3))
                                        : ((r = 1 / (a + n + e)), (this.m_v1.a = a * r), (this.m_v2.a = n * r), (this.m_v3.a = e * r), (this.m_count = 3));
                            },
                            m_v1: null,
                            m_v2: null,
                            m_v3: null,
                            m_vertices: null,
                            m_count: null,
                            __class__: V4,
                        });
                    var U2 = function () {};
                    (v["box2D.collision.B2SimplexVertex"] = U2),
                        (U2.__name__ = "box2D.collision.B2SimplexVertex"),
                        (U2.prototype = {
                            set: function (e) {
                                var t = this.wA,
                                    n = e.wA;
                                (t.x = n.x), (t.y = n.y), (t = this.wB), (n = e.wB), (t.x = n.x), (t.y = n.y), (t = this.w), (n = e.w), (t.x = n.x), (t.y = n.y), (this.a = e.a), (this.indexA = e.indexA), (this.indexB = e.indexB);
                            },
                            wA: null,
                            wB: null,
                            w: null,
                            a: null,
                            indexA: null,
                            indexB: null,
                            __class__: U2,
                        });
                    var xF = function () {};
                    (v["box2D.collision.B2Distance"] = xF),
                        (xF.__name__ = "box2D.collision.B2Distance"),
                        (xF.distance = function (e, t, n) {
                            ++xF.b2_gjkCalls;
                            var a = n.proxyA,
                                s = n.proxyB,
                                r = n.transformA,
                                A = n.transformB,
                                l = xF.s_simplex;
                            l.readCache(t, a, r, s, A);
                            var o = l.m_vertices,
                                i = xF.s_saveA,
                                u = xF.s_saveB;
                            l.getClosestPoint().lengthSquared();
                            for (var g, m = 0; 20 > m; ) {
                                var d = l.m_count;
                                g = 0;
                                for (var c = d; g < c; ) {
                                    var p = g++;
                                    (i[p] = o[p].indexA), (u[p] = o[p].indexB);
                                }
                                switch (l.m_count) {
                                    case 1:
                                        break;
                                    case 2:
                                        l.solve2();
                                        break;
                                    case 3:
                                        l.solve3();
                                        break;
                                    default:
                                        Me.b2Assert(!1);
                                }
                                if (3 == l.m_count) break;
                                if (((g = l.getClosestPoint()).lengthSquared(), (c = l.getSearchDirection()).lengthSquared() < Number.MIN_VALUE * Number.MIN_VALUE)) break;
                                for (
                                    (g = o[l.m_count]).indexA = 0 | a.getSupport(kd.mulTMV(r.R, c.getNegativePooled(), !0)),
                                        g.wA = kd.mulX(r, a.getVertex(g.indexA), !0),
                                        g.indexB = 0 | s.getSupport(kd.mulTMV(A.R, c, !0)),
                                        g.wB = kd.mulX(A, s.getVertex(g.indexB), !0),
                                        g.w = kd.subtractVVPooled(g.wB, g.wA),
                                        ++m,
                                        ++xF.b2_gjkIters,
                                        c = !1,
                                        p = 0;
                                    p < d;

                                ) {
                                    var h = p++;
                                    if (g.indexA == i[h] && g.indexB == u[h]) {
                                        c = !0;
                                        break;
                                    }
                                }
                                if (c) break;
                                ++l.m_count;
                            }
                            (xF.b2_gjkMaxIters = 0 | kd.max(xF.b2_gjkMaxIters, m)),
                                l.getWitnessPoints(e.pointA, e.pointB),
                                (e.distance = kd.subtractVVPooled(e.pointA, e.pointB).length()),
                                (e.iterations = m),
                                l.writeCache(t),
                                n.useRadii &&
                                    ((t = a.m_radius),
                                    (s = s.m_radius),
                                    e.distance > t + s && e.distance > Number.MIN_VALUE
                                        ? ((e.distance -= t + s), (n = kd.subtractVVPooled(e.pointB, e.pointA)).normalize(), (e.pointA.x += t * n.x), (e.pointA.y += t * n.y), (e.pointB.x -= s * n.x), (e.pointB.y -= s * n.y))
                                        : (((g = td.getFromPool()).x = 0.5 * (e.pointA.x + e.pointB.x)), (g.y = 0.5 * (e.pointA.y + e.pointB.y)), (e.pointA.x = e.pointB.x = g.x), (e.pointA.y = e.pointB.y = g.y), (e.distance = 0)));
                        });
                    var t4 = function () {};
                    (v["box2D.collision.B2DistanceInput"] = t4), (t4.__name__ = "box2D.collision.B2DistanceInput"), (t4.prototype = { proxyA: null, proxyB: null, transformA: null, transformB: null, useRadii: null, __class__: t4 });
                    var u4 = function () {
                        (this.pointA = new td()), (this.pointB = new td());
                    };
                    (v["box2D.collision.B2DistanceOutput"] = u4), (u4.__name__ = "box2D.collision.B2DistanceOutput"), (u4.prototype = { pointA: null, pointB: null, distance: null, iterations: null, __class__: u4 });
                    var uW = function () {
                        this.m_internalVertices = [];
                    };
                    (v["box2D.collision.B2DistanceProxy"] = uW),
                        (uW.__name__ = "box2D.collision.B2DistanceProxy"),
                        (uW.prototype = {
                            set: function (e) {
                                switch (e.getType()) {
                                    case 0:
                                        for (e = d.__cast(e, Rw), this.m_vertices = this.m_internalVertices; 1 < this.m_vertices.length; ) this.m_vertices.pop();
                                        (this.m_vertices[0] = e.m_p), (this.m_count = 1), (this.m_radius = e.m_radius);
                                        break;
                                    case 1:
                                        (e = d.__cast(e, ct)), (this.m_vertices = e.m_vertices), (this.m_count = e.m_vertexCount), (this.m_radius = e.m_radius);
                                        break;
                                    case 2:
                                        for (e = d.__cast(e, oQ), this.m_vertices = this.m_internalVertices; 2 < this.m_vertices.length; ) this.m_vertices.pop();
                                        (this.m_vertices[0] = e.m_v1), (this.m_vertices[1] = e.m_v2), (this.m_count = 2), (this.m_radius = e.m_radius);
                                        break;
                                    default:
                                        Me.b2Assert(!1);
                                }
                            },
                            getSupport: function (e) {
                                for (var t = 0, n = this.m_vertices[0].x * e.x + this.m_vertices[0].y * e.y, a = 1, s = this.m_count; a < s; ) {
                                    var r = a++,
                                        A = this.m_vertices[r].x * e.x + this.m_vertices[r].y * e.y;
                                    A > n && ((t = r), (n = A));
                                }
                                return t;
                            },
                            getSupportVertex: function (e) {
                                for (var t = 0, n = this.m_vertices[0].x * e.x + this.m_vertices[0].y * e.y, a = 1, s = this.m_count; a < s; ) {
                                    var r = a++,
                                        A = this.m_vertices[r].x * e.x + this.m_vertices[r].y * e.y;
                                    A > n && ((t = r), (n = A));
                                }
                                return this.m_vertices[t];
                            },
                            getVertexCount: function () {
                                return this.m_count;
                            },
                            getVertex: function (e) {
                                return Me.b2Assert(0 <= e && e < this.m_count), this.m_vertices[e];
                            },
                            m_internalVertices: null,
                            m_vertices: null,
                            m_count: null,
                            m_radius: null,
                            __class__: uW,
                        });
                    var D8 = function () {
                        (this.oldAABB = new $h()), (this.stackQueue = []), (this.stackQueuePos = 0), (this.m_freeList = this.m_root = null), (this.m_insertionCount = this.m_path = 0);
                    };
                    (v["box2D.collision.B2DynamicTree"] = D8),
                        (D8.__name__ = "box2D.collision.B2DynamicTree"),
                        (D8.prototype = {
                            createProxy: function (e, t) {
                                var n = this.allocateNode(),
                                    a = Me.b2_aabbExtension,
                                    s = Me.b2_aabbExtension;
                                return (
                                    (n.aabb.lowerBound.x = e.lowerBound.x - a),
                                    (n.aabb.lowerBound.y = e.lowerBound.y - s),
                                    (n.aabb.upperBound.x = e.upperBound.x + a),
                                    (n.aabb.upperBound.y = e.upperBound.y + s),
                                    (n.userData = t),
                                    this.insertLeaf(n),
                                    n
                                );
                            },
                            destroyProxy: function (e) {
                                this.removeLeaf(e), this.freeNode(e);
                            },
                            moveProxy: function (e, t, n) {
                                if ((Me.b2Assert(e.isLeaf()), e.aabb.contains(t))) return !1;
                                this.removeLeaf(e);
                                var a = Me.b2_aabbExtension + Me.b2_aabbMultiplier * (0 < n.x ? n.x : -n.x);
                                return (
                                    (n = Me.b2_aabbExtension + Me.b2_aabbMultiplier * (0 < n.y ? n.y : -n.y)),
                                    (e.aabb.lowerBound.x = t.lowerBound.x - a),
                                    (e.aabb.lowerBound.y = t.lowerBound.y - n),
                                    (e.aabb.upperBound.x = t.upperBound.x + a),
                                    (e.aabb.upperBound.y = t.upperBound.y + n),
                                    this.insertLeaf(e),
                                    !0
                                );
                            },
                            rebalance: function (e) {
                                if (null != this.m_root)
                                    for (var t = 0; t < e; ) {
                                        t++;
                                        for (var n = this.m_root, a = 0; 0 == n.isLeaf(); ) (n = 0 != ((this.m_path >> a) & 1) ? n.child2 : n.child1), (a = (a + 1) & 31);
                                        ++this.m_path, this.removeLeaf(n), this.insertLeaf(n);
                                    }
                            },
                            getFatAABB: function (e) {
                                return e.aabb;
                            },
                            getUserData: function (e) {
                                return e.userData;
                            },
                            stackQueuePos: null,
                            stackQueue: null,
                            query: function (e, t) {
                                if (null != this.m_root) {
                                    null == this.stackQueue[this.stackQueuePos] && (this.stackQueue[this.stackQueuePos] = []);
                                    var n = this.stackQueue[this.stackQueuePos++],
                                        a = 0;
                                    for (n[a++] = this.m_root; 0 < a; ) {
                                        var s = n[--a];
                                        if (s.aabb.testOverlap(t))
                                            if (s.isLeaf()) {
                                                if (!e.queryCallback(s)) break;
                                            } else (n[a++] = s.child1), (n[a++] = s.child2);
                                    }
                                    for (a = n.length; 0 < a--; ) n.pop();
                                    --this.stackQueuePos;
                                }
                            },
                            rayCast: function (e, t) {
                                if (null != this.m_root) {
                                    var n = t.p1,
                                        a = t.p2,
                                        s = kd.subtractVVPooled(n, a);
                                    s.normalize(), (s = kd.crossFV(1, s));
                                    var r = kd.absV(s),
                                        A = t.maxFraction,
                                        l = new $h(),
                                        o = n.x + A * (a.x - n.x);
                                    (A = n.y + A * (a.y - n.y)), (l.lowerBound.x = Math.min(n.x, o)), (l.lowerBound.y = Math.min(n.y, A)), (l.upperBound.x = Math.max(n.x, o)), (l.upperBound.y = Math.max(n.y, A));
                                    var i = [],
                                        u = 0;
                                    for (i[u++] = this.m_root; 0 < u; )
                                        if (0 != (o = i[--u]).aabb.testOverlap(l)) {
                                            A = o.aabb.getCenter();
                                            var g = o.aabb.getExtents();
                                            if (!(0 < Math.abs(s.x * (n.x - A.x) + s.y * (n.y - A.y)) - r.x * g.x - r.y * g.y))
                                                if (o.isLeaf()) {
                                                    if ((((A = new v4()).p1 = t.p1), (A.p2 = t.p2), (A.maxFraction = t.maxFraction), 0 == (A = e(A, o)))) break;
                                                    (o = n.x + A * (a.x - n.x)),
                                                        (A = n.y + A * (a.y - n.y)),
                                                        (l.lowerBound.x = Math.min(n.x, o)),
                                                        (l.lowerBound.y = Math.min(n.y, A)),
                                                        (l.upperBound.x = Math.max(n.x, o)),
                                                        (l.upperBound.y = Math.max(n.y, A));
                                                } else (i[u++] = o.child1), (i[u++] = o.child2);
                                        }
                                }
                            },
                            allocateNode: function () {
                                if (null != this.m_freeList) {
                                    var e = this.m_freeList;
                                    return (this.m_freeList = e.parent), (e.parent = null), (e.child1 = null), (e.child2 = null), e;
                                }
                                return new V2();
                            },
                            freeNode: function (e) {
                                (e.parent = this.m_freeList), (this.m_freeList = e);
                            },
                            insertLeaf: function (e) {
                                if ((++this.m_insertionCount, null == this.m_root)) (this.m_root = e), (this.m_root.parent = null);
                                else {
                                    var t = e.aabb.getCenter(),
                                        n = this.m_root;
                                    if (0 == n.isLeaf())
                                        for (;;) {
                                            var a = n.child1;
                                            if (
                                                ((n = n.child2),
                                                0 !=
                                                    (n =
                                                        Math.abs((a.aabb.lowerBound.x + a.aabb.upperBound.x) / 2 - t.x) + Math.abs((a.aabb.lowerBound.y + a.aabb.upperBound.y) / 2 - t.y) <
                                                        Math.abs((n.aabb.lowerBound.x + n.aabb.upperBound.x) / 2 - t.x) + Math.abs((n.aabb.lowerBound.y + n.aabb.upperBound.y) / 2 - t.y)
                                                            ? a
                                                            : n).isLeaf())
                                            )
                                                break;
                                        }
                                    if (((t = n.parent), ((a = this.allocateNode()).parent = t), (a.userData = null), a.aabb.combine(e.aabb, n.aabb), null != t))
                                        for (
                                            n.parent.child1 == n ? (t.child1 = a) : (t.child2 = a), a.child1 = n, a.child2 = e, n.parent = a, e.parent = a;
                                            !t.aabb.contains(a.aabb) && (t.aabb.combine(t.child1.aabb, t.child2.aabb), (a = t), null != (t = t.parent));

                                        );
                                    else (a.child1 = n), (a.child2 = e), (n.parent = a), (this.m_root = e.parent = a);
                                }
                            },
                            oldAABB: null,
                            removeLeaf: function (e) {
                                if (e == this.m_root) this.m_root = null;
                                else {
                                    var t = e.parent,
                                        n = t.parent;
                                    if (((e = t.child1 == e ? t.child2 : t.child1), null != n))
                                        for (
                                            n.child1 == t ? (n.child1 = e) : (n.child2 = e), e.parent = n, this.freeNode(t);
                                            null != n && (this.oldAABB.setTo(n.aabb), n.aabb.combine(n.child1.aabb, n.child2.aabb), !this.oldAABB.contains(n.aabb));

                                        )
                                            n = n.parent;
                                    else (this.m_root = e), (e.parent = null), this.freeNode(t);
                                }
                            },
                            m_root: null,
                            m_freeList: null,
                            m_path: null,
                            m_insertionCount: null,
                            __class__: D8,
                        });
                    var IV = function () {};
                    (v["box2D.collision.QueryCallback"] = IV), (IV.__name__ = "box2D.collision.QueryCallback"), (IV.__isInterface__ = !0), (IV.prototype = { queryCallback: null, __class__: IV });
                    var w4 = function () {};
                    (v["box2D.collision.IBroadPhase"] = w4),
                        (w4.__name__ = "box2D.collision.IBroadPhase"),
                        (w4.__isInterface__ = !0),
                        (w4.prototype = {
                            createProxy: null,
                            destroyProxy: null,
                            moveProxy: null,
                            testOverlap: null,
                            getUserData: null,
                            getFatAABB: null,
                            getProxyCount: null,
                            updatePairs: null,
                            query: null,
                            rayCast: null,
                            validate: null,
                            rebalance: null,
                            __class__: w4,
                        });
                    var x4 = function () {
                        (this.m_tree = new D8()), (this.m_moveBuffer = []), (this.m_pairBuffer = []), (this.m_proxyCount = this.m_pairCount = 0);
                    };
                    (v["box2D.collision.B2DynamicTreeBroadPhase"] = x4),
                        (x4.__name__ = "box2D.collision.B2DynamicTreeBroadPhase"),
                        (x4.__interfaces__ = [IV, w4]),
                        (x4.prototype = {
                            createProxy: function (e, t) {
                                return (e = this.m_tree.createProxy(e, t)), ++this.m_proxyCount, this.bufferMove(e), e;
                            },
                            destroyProxy: function (e) {
                                this.unBufferMove(e), --this.m_proxyCount, this.m_tree.destroyProxy(e);
                            },
                            moveProxy: function (e, t, n) {
                                this.m_tree.moveProxy(e, t, n) && this.bufferMove(e);
                            },
                            testOverlap: function (e, t) {
                                return (e = this.m_tree.getFatAABB(e)), (t = this.m_tree.getFatAABB(t)), e.testOverlap(t);
                            },
                            getUserData: function (e) {
                                return this.m_tree.getUserData(e);
                            },
                            getFatAABB: function (e) {
                                return this.m_tree.getFatAABB(e);
                            },
                            getProxyCount: function () {
                                return this.m_proxyCount;
                            },
                            updatePairs: function (e) {
                                for (var t = (this.m_pairCount = 0), n = this.m_moveBuffer; t < n.length; ) {
                                    var a = n[t];
                                    ++t, (this.cur_queryProxy = a), (a = this.m_tree.getFatAABB(a)), this.m_tree.query(this, a);
                                }
                                for (this.cur_queryProxy = null, t = this.m_moveBuffer.length; 0 <= --t; ) this.m_moveBuffer.pop();
                                for (n = !0, t = 0; n; )
                                    if (t >= this.m_pairCount) n = !1;
                                    else
                                        for (a = this.m_pairBuffer[t], e.addPair(this.m_tree.getUserData(a.proxyA), this.m_tree.getUserData(a.proxyB)), ++t; t < this.m_pairCount; ) {
                                            var s = this.m_pairBuffer[t];
                                            if (s.proxyA != a.proxyA || s.proxyB != a.proxyB) break;
                                            ++t;
                                        }
                            },
                            queryCallback: function (e) {
                                if (e == this.cur_queryProxy) return !0;
                                this.m_pairCount == this.m_pairBuffer.length && (this.m_pairBuffer[this.m_pairCount] = new E8());
                                var t = this.m_pairBuffer[this.m_pairCount];
                                return e.id < this.cur_queryProxy.id ? ((t.proxyA = e), (t.proxyB = this.cur_queryProxy)) : ((t.proxyA = this.cur_queryProxy), (t.proxyB = e)), ++this.m_pairCount, !0;
                            },
                            query: function (e, t) {
                                this.m_tree.query(e, t);
                            },
                            rayCast: function (e, t) {
                                this.m_tree.rayCast(e, t);
                            },
                            validate: function () {},
                            rebalance: function (e) {
                                this.m_tree.rebalance(e);
                            },
                            bufferMove: function (e) {
                                this.m_moveBuffer[this.m_moveBuffer.length] = e;
                            },
                            unBufferMove: function (e) {
                                Qc.remove(this.m_moveBuffer, e);
                            },
                            comparePairs: function (e, t) {
                                return 0;
                            },
                            m_tree: null,
                            m_proxyCount: null,
                            m_moveBuffer: null,
                            m_pairBuffer: null,
                            m_pairCount: null,
                            cur_queryProxy: null,
                            __class__: x4,
                        });
                    var V2 = function () {
                        (this.aabb = new $h()), (this.id = V2.currentID++);
                    };
                    (v["box2D.collision.B2DynamicTreeNode"] = V2),
                        (V2.__name__ = "box2D.collision.B2DynamicTreeNode"),
                        (V2.prototype = {
                            id: null,
                            isLeaf: function () {
                                return null == this.child1;
                            },
                            userData: null,
                            aabb: null,
                            parent: null,
                            child1: null,
                            child2: null,
                            __class__: V2,
                        });
                    var E8 = function () {};
                    (v["box2D.collision.B2DynamicTreePair"] = E8), (E8.__name__ = "box2D.collision.B2DynamicTreePair"), (E8.prototype = { proxyA: null, proxyB: null, __class__: E8 });
                    var WU = function () {
                        (this.m_pointCount = 0), (this.m_points = []);
                        for (var e = 0, t = Me.b2_maxManifoldPoints; e < t; ) {
                            var n = e++;
                            this.m_points[n] = new F8();
                        }
                        (this.m_localPlaneNormal = new td()), (this.m_localPoint = new td());
                    };
                    (v["box2D.collision.B2Manifold"] = WU),
                        (WU.__name__ = "box2D.collision.B2Manifold"),
                        (WU.prototype = {
                            reset: function () {
                                for (var e = 0, t = Me.b2_maxManifoldPoints; e < t; ) {
                                    var n = e++;
                                    this.m_points[n].reset();
                                }
                                ((e = this.m_localPlaneNormal).x = 0), (e.y = 0), ((e = this.m_localPoint).x = 0), (this.m_pointCount = this.m_type = e.y = 0);
                            },
                            set: function (e) {
                                this.m_pointCount = e.m_pointCount;
                                for (var t = 0, n = Me.b2_maxManifoldPoints; t < n; ) {
                                    var a = t++;
                                    this.m_points[a].set(e.m_points[a]);
                                }
                                (t = this.m_localPlaneNormal), (n = e.m_localPlaneNormal), (t.x = n.x), (t.y = n.y), (t = this.m_localPoint), (n = e.m_localPoint), (t.x = n.x), (t.y = n.y), (this.m_type = e.m_type);
                            },
                            copy: function () {
                                var e = new WU();
                                return e.set(this), e;
                            },
                            m_points: null,
                            m_localPlaneNormal: null,
                            m_localPoint: null,
                            m_type: null,
                            m_pointCount: null,
                            __class__: WU,
                        });
                    var F8 = function () {
                        (this.m_localPoint = new td()), (this.m_id = new pv()), this.reset();
                    };
                    (v["box2D.collision.B2ManifoldPoint"] = F8),
                        (F8.__name__ = "box2D.collision.B2ManifoldPoint"),
                        (F8.prototype = {
                            reset: function () {
                                var e = this.m_localPoint;
                                (e.x = 0), (this.m_tangentImpulse = this.m_normalImpulse = e.y = 0), this.m_id.set_key(0);
                            },
                            set: function (e) {
                                var t = this.m_localPoint,
                                    n = e.m_localPoint;
                                (t.x = n.x), (t.y = n.y), (this.m_normalImpulse = e.m_normalImpulse), (this.m_tangentImpulse = e.m_tangentImpulse), this.m_id.set(e.m_id);
                            },
                            m_localPoint: null,
                            m_normalImpulse: null,
                            m_tangentImpulse: null,
                            m_id: null,
                            __class__: F8,
                        });
                    var qca = function () {
                        (this.R = new Tv()), (this.center = new td()), (this.extents = new td());
                    };
                    (v["box2D.collision.B2OBB"] = qca), (qca.__name__ = "box2D.collision.B2OBB"), (qca.prototype = { R: null, center: null, extents: null, __class__: qca });
                    var v4 = function (e, t, n) {
                        if ((null == n && (n = 1), (this.p1 = new td()), (this.p2 = new td()), null != e)) {
                            var a = this.p1;
                            (a.x = e.x), (a.y = e.y);
                        }
                        null != t && (((e = this.p2).x = t.x), (e.y = t.y)), (this.maxFraction = n);
                    };
                    (v["box2D.collision.B2RayCastInput"] = v4), (v4.__name__ = "box2D.collision.B2RayCastInput"), (v4.prototype = { p1: null, p2: null, maxFraction: null, __class__: v4 });
                    var G8 = function () {
                        this.normal = new td();
                    };
                    (v["box2D.collision.B2RayCastOutput"] = G8), (G8.__name__ = "box2D.collision.B2RayCastOutput"), (G8.prototype = { normal: null, fraction: null, __class__: G8 });
                    var bF = function () {
                        (this.m_localPoint = new td()), (this.m_axis = new td());
                    };
                    (v["box2D.collision.B2SeparationFunction"] = bF),
                        (bF.__name__ = "box2D.collision.B2SeparationFunction"),
                        (bF.prototype = {
                            initialize: function (e, t, n, a, s) {
                                (this.m_proxyA = t), (this.m_proxyB = a), (t = e.count), Me.b2Assert(0 < t && 3 > t);
                                var r = new td(),
                                    A = new td();
                                if (1 == t) {
                                    (this.m_type = bF.e_points), (r = this.m_proxyA.getVertex(e.indexA[0])), (A = this.m_proxyB.getVertex(e.indexB[0]));
                                    var l = r,
                                        o = n.R;
                                    (r = n.position.x + (o.col1.x * l.x + o.col2.x * l.y)),
                                        (n = n.position.y + (o.col1.y * l.x + o.col2.y * l.y)),
                                        (l = A),
                                        (o = s.R),
                                        (A = s.position.x + (o.col1.x * l.x + o.col2.x * l.y)),
                                        (s = s.position.y + (o.col1.y * l.x + o.col2.y * l.y)),
                                        (this.m_axis.x = A - r),
                                        (this.m_axis.y = s - n),
                                        this.m_axis.normalize();
                                } else if (e.indexB[0] == e.indexB[1])
                                    (this.m_type = bF.e_faceA),
                                        (t = this.m_proxyA.getVertex(e.indexA[0])),
                                        (a = this.m_proxyA.getVertex(e.indexA[1])),
                                        (A = this.m_proxyB.getVertex(e.indexB[0])),
                                        (this.m_localPoint.x = 0.5 * (t.x + a.x)),
                                        (this.m_localPoint.y = 0.5 * (t.y + a.y)),
                                        (this.m_axis = kd.crossVF(kd.subtractVV(a, t), 1)),
                                        this.m_axis.normalize(),
                                        (l = this.m_axis),
                                        (t = (o = n.R).col1.x * l.x + o.col2.x * l.y),
                                        (a = o.col1.y * l.x + o.col2.y * l.y),
                                        (l = this.m_localPoint),
                                        (o = n.R),
                                        (r = n.position.x + (o.col1.x * l.x + o.col2.x * l.y)),
                                        (n = n.position.y + (o.col1.y * l.x + o.col2.y * l.y)),
                                        (l = A),
                                        (o = s.R),
                                        0 > ((A = s.position.x + (o.col1.x * l.x + o.col2.x * l.y)) - r) * t + ((s = s.position.y + (o.col1.y * l.x + o.col2.y * l.y)) - n) * a && (((s = this.m_axis).x = -s.x), (s.y = -s.y));
                                else if (e.indexA[0] == e.indexA[0])
                                    (this.m_type = bF.e_faceB),
                                        (o = this.m_proxyB.getVertex(e.indexB[0])),
                                        (l = this.m_proxyB.getVertex(e.indexB[1])),
                                        (r = this.m_proxyA.getVertex(e.indexA[0])),
                                        (this.m_localPoint.x = 0.5 * (o.x + l.x)),
                                        (this.m_localPoint.y = 0.5 * (o.y + l.y)),
                                        (this.m_axis = kd.crossVF(kd.subtractVV(l, o), 1)),
                                        this.m_axis.normalize(),
                                        (l = this.m_axis),
                                        (t = (o = s.R).col1.x * l.x + o.col2.x * l.y),
                                        (a = o.col1.y * l.x + o.col2.y * l.y),
                                        (l = this.m_localPoint),
                                        (o = s.R),
                                        (A = s.position.x + (o.col1.x * l.x + o.col2.x * l.y)),
                                        (s = s.position.y + (o.col1.y * l.x + o.col2.y * l.y)),
                                        (l = r),
                                        (o = n.R),
                                        0 > ((r = n.position.x + (o.col1.x * l.x + o.col2.x * l.y)) - A) * t + ((n = n.position.y + (o.col1.y * l.x + o.col2.y * l.y)) - s) * a && (((s = this.m_axis).x = -s.x), (s.y = -s.y));
                                else {
                                    (t = this.m_proxyA.getVertex(e.indexA[0])),
                                        (a = this.m_proxyA.getVertex(e.indexA[1])),
                                        (o = this.m_proxyB.getVertex(e.indexB[0])),
                                        (l = this.m_proxyB.getVertex(e.indexB[1])),
                                        kd.mulX(n, r, !0),
                                        (r = kd.mulMV(n.R, kd.subtractVVPooled(a, t), !0)),
                                        kd.mulX(s, A, !0),
                                        (e = kd.mulMV(s.R, kd.subtractVVPooled(l, o), !0)),
                                        (s = r.x * r.x + r.y * r.y),
                                        (n = e.x * e.x + e.y * e.y);
                                    var i = kd.subtractVVPooled(e, r);
                                    (A = r.x * i.x + r.y * i.y), (i = e.x * i.x + e.y * i.y);
                                    var u = s * n - (r = r.x * e.x + r.y * e.y) * r;
                                    (e = 0),
                                        0 != u && (e = kd.clamp((r * i - A * n) / u, 0, 1)),
                                        0 > (r * e + i) / n && (e = kd.clamp((r - A) / s, 0, 1)),
                                        ((r = new td()).x = t.x + e * (a.x - t.x)),
                                        (r.y = t.y + e * (a.y - t.y)),
                                        ((A = new td()).x = o.x + e * (l.x - o.x)),
                                        (A.y = o.y + e * (l.y - o.y)),
                                        0 == e || 1 == e
                                            ? ((this.m_type = bF.e_faceB), (this.m_axis = kd.crossVF(kd.subtractVV(l, o), 1)), this.m_axis.normalize(), (this.m_localPoint = A))
                                            : ((this.m_type = bF.e_faceA), (this.m_axis = kd.crossVF(kd.subtractVV(a, t), 1)), (this.m_localPoint = r)),
                                        0 > e && (((s = this.m_axis).x = -s.x), (s.y = -s.y));
                                }
                            },
                            evaluate: function (e, t) {
                                var n;
                                if (this.m_type == bF.e_points) {
                                    var a = kd.mulTMV(e.R, this.m_axis, !0),
                                        s = kd.mulTMV(t.R, this.m_axis.getNegativePooled(), !0);
                                    return (a = this.m_proxyA.getSupportVertex(a)), (s = this.m_proxyB.getSupportVertex(s)), (e = kd.mulX(e, a, !0)), ((t = kd.mulX(t, s, !0)).x - e.x) * this.m_axis.x + (t.y - e.y) * this.m_axis.y;
                                }
                                return this.m_type == bF.e_faceA
                                    ? ((n = kd.mulMV(e.R, this.m_axis, !0)),
                                      (e = kd.mulX(e, this.m_localPoint, !0)),
                                      (s = kd.mulTMV(t.R, n.getNegativePooled())),
                                      (s = this.m_proxyB.getSupportVertex(s)),
                                      ((t = kd.mulX(t, s, !0)).x - e.x) * n.x + (t.y - e.y) * n.y)
                                    : this.m_type == bF.e_faceB
                                    ? ((n = kd.mulMV(t.R, this.m_axis, !0)),
                                      (t = kd.mulX(t, this.m_localPoint, !0)),
                                      (a = kd.mulTMV(e.R, n.getNegativePooled(), !0)),
                                      (a = this.m_proxyA.getSupportVertex(a)),
                                      ((e = kd.mulX(e, a, !0)).x - t.x) * n.x + (e.y - t.y) * n.y)
                                    : (Me.b2Assert(!1), 0);
                            },
                            m_proxyA: null,
                            m_proxyB: null,
                            m_type: null,
                            m_localPoint: null,
                            m_axis: null,
                            __class__: bF,
                        });
                    var y4 = function () {
                        (this.useCache = !1), (this.indexA = []), (this.indexB = []);
                    };
                    (v["box2D.collision.B2SimplexCache"] = y4), (y4.__name__ = "box2D.collision.B2SimplexCache"), (y4.prototype = { metric: null, count: null, indexA: null, indexB: null, useCache: null, __class__: y4 });
                    var H8 = function () {
                        (this.proxyA = new uW()), (this.proxyB = new uW()), (this.sweepA = new XU()), (this.sweepB = new XU());
                    };
                    (v["box2D.collision.B2TOIInput"] = H8), (H8.__name__ = "box2D.collision.B2TOIInput"), (H8.prototype = { proxyA: null, proxyB: null, sweepA: null, sweepB: null, tolerance: null, __class__: H8 });
                    var wJ = function (e, t) {
                        if (((this.position = new td()), (this.R = new Tv()), null != e)) {
                            var n = this.position;
                            (n.x = e.x), (n.y = e.y), this.R.setM(t);
                        }
                    };
                    (v["box2D.common.math.B2Transform"] = wJ),
                        (wJ.__name__ = "box2D.common.math.B2Transform"),
                        (wJ.prototype = {
                            initialize: function (e, t) {
                                var n = this.position;
                                (n.x = e.x), (n.y = e.y), this.R.setM(t);
                            },
                            setIdentity: function () {
                                var e = this.position;
                                (e.x = 0), (e.y = 0), this.R.setIdentity();
                            },
                            set: function (e) {
                                var t = this.position,
                                    n = e.position;
                                (t.x = n.x), (t.y = n.y), this.R.setM(e.R);
                            },
                            getAngle: function () {
                                return Math.atan2(this.R.col1.y, this.R.col1.x);
                            },
                            multiply: function (e) {
                                return (e = this.R.multiplyV(e)).add(this.position), e;
                            },
                            position: null,
                            R: null,
                            __class__: wJ,
                        });
                    var Tv = function () {
                        (this.col1 = new td(0, 1)), (this.col2 = new td(0, 1));
                    };
                    (v["box2D.common.math.B2Mat22"] = Tv),
                        (Tv.__name__ = "box2D.common.math.B2Mat22"),
                        (Tv.fromAngle = function (e) {
                            var t = new Tv();
                            return t.set(e), t;
                        }),
                        (Tv.fromVV = function (e, t) {
                            var n = new Tv();
                            return n.setVV(e, t), n;
                        }),
                        (Tv.prototype = {
                            set: function (e) {
                                var t = Math.cos(e);
                                (e = Math.sin(e)), (this.col1.x = t), (this.col2.x = -e), (this.col1.y = e), (this.col2.y = t);
                            },
                            setVV: function (e, t) {
                                var n = this.col1;
                                (n.x = e.x), (n.y = e.y), ((e = this.col2).x = t.x), (e.y = t.y);
                            },
                            copy: function () {
                                var e = new Tv();
                                return e.setM(this), e;
                            },
                            setM: function (e) {
                                var t = this.col1,
                                    n = e.col1;
                                (t.x = n.x), (t.y = n.y), (t = this.col2), (e = e.col2), (t.x = e.x), (t.y = e.y);
                            },
                            addM: function (e) {
                                (this.col1.x += e.col1.x), (this.col1.y += e.col1.y), (this.col2.x += e.col2.x), (this.col2.y += e.col2.y);
                            },
                            multiplyV: function (e) {
                                return new td(this.col1.x * e.x + this.col2.x * e.y, this.col1.y * e.x + this.col2.y * e.y);
                            },
                            setIdentity: function () {
                                (this.col1.x = 1), (this.col2.x = 0), (this.col1.y = 0), (this.col2.y = 1);
                            },
                            setZero: function () {
                                (this.col1.x = 0), (this.col2.x = 0), (this.col1.y = 0), (this.col2.y = 0);
                            },
                            setAngle: function (e) {
                                (this.col1.x = Math.cos(e)), (this.col1.y = Math.sin(e)), (this.col2.x = -this.col1.y), (this.col2.y = this.col1.x);
                            },
                            getAngle: function () {
                                return Math.atan2(this.col1.y, this.col1.x);
                            },
                            getInverse: function (e) {
                                var t = this.col1.x,
                                    n = this.col2.x,
                                    a = this.col1.y,
                                    s = this.col2.y,
                                    r = t * s - n * a;
                                return 0 != r && (r = 1 / r), (e.col1.x = r * s), (e.col2.x = -r * n), (e.col1.y = -r * a), (e.col2.y = r * t), e;
                            },
                            solve: function (e, t, n) {
                                var a = this.col1.x,
                                    s = this.col2.x,
                                    r = this.col1.y,
                                    A = this.col2.y,
                                    l = a * A - s * r;
                                return 0 != l && (l = 1 / l), (e.x = l * (A * t - s * n)), (e.y = l * (a * n - r * t)), e;
                            },
                            abs: function () {
                                this.col1.abs(), this.col2.abs();
                            },
                            col1: null,
                            col2: null,
                            __class__: Tv,
                        });
                    var gr = function () {};
                    (v["box2D.collision.B2TimeOfImpact"] = gr),
                        (gr.__name__ = "box2D.collision.B2TimeOfImpact"),
                        (gr.timeOfImpact = function (e) {
                            ++gr.b2_toiCalls;
                            var t = e.proxyA,
                                n = e.proxyB,
                                a = e.sweepA,
                                s = e.sweepB;
                            Me.b2Assert(a.t0 == s.t0), Me.b2Assert(1 - a.t0 > Number.MIN_VALUE);
                            var r = t.m_radius + n.m_radius;
                            e = e.tolerance;
                            var A = 0,
                                l = 0,
                                o = 0;
                            for (gr.s_cache.count = 0, gr.s_distanceInput.useRadii = !1; ; ) {
                                if (
                                    (a.getTransform(gr.s_xfA, A),
                                    s.getTransform(gr.s_xfB, A),
                                    (gr.s_distanceInput.proxyA = t),
                                    (gr.s_distanceInput.proxyB = n),
                                    (gr.s_distanceInput.transformA = gr.s_xfA),
                                    (gr.s_distanceInput.transformB = gr.s_xfB),
                                    xF.distance(gr.s_distanceOutput, gr.s_cache, gr.s_distanceInput),
                                    0 >= gr.s_distanceOutput.distance)
                                ) {
                                    A = 1;
                                    break;
                                }
                                gr.s_fcn.initialize(gr.s_cache, t, gr.s_xfA, n, gr.s_xfB);
                                var i = gr.s_fcn.evaluate(gr.s_xfA, gr.s_xfB);
                                if (0 >= i) {
                                    A = 1;
                                    break;
                                }
                                if ((0 == l && (o = i > r ? kd.max(r - e, 0.75 * r) : kd.max(i - e, 0.02 * r)), i - o < 0.5 * e)) {
                                    if (0 == l) {
                                        A = 1;
                                        break;
                                    }
                                    break;
                                }
                                var u = A,
                                    g = A,
                                    m = 1;
                                a.getTransform(gr.s_xfA, m), s.getTransform(gr.s_xfB, m);
                                var d = gr.s_fcn.evaluate(gr.s_xfA, gr.s_xfB);
                                if (d >= o) {
                                    A = 1;
                                    break;
                                }
                                for (var c = 0; ; ) {
                                    var p = 0 != (1 & c) ? g + ((o - i) * (m - g)) / (d - i) : 0.5 * (g + m);
                                    a.getTransform(gr.s_xfA, p), s.getTransform(gr.s_xfB, p);
                                    var h = gr.s_fcn.evaluate(gr.s_xfA, gr.s_xfB);
                                    if (kd.abs(h - o) < 0.025 * e) {
                                        u = p;
                                        break;
                                    }
                                    if ((h > o ? ((g = p), (i = h)) : ((m = p), (d = h)), ++c, ++gr.b2_toiRootIters, 50 == c)) break;
                                }
                                if (((gr.b2_toiMaxRootIters = 0 | kd.max(gr.b2_toiMaxRootIters, c)), u < (1 + 100 * Number.MIN_VALUE) * A)) break;
                                if (((A = u), ++l, ++gr.b2_toiIters, 1e3 == l)) break;
                            }
                            return (gr.b2_toiMaxIters = 0 | kd.max(gr.b2_toiMaxIters, l)), A;
                        });
                    var W2 = function () {
                        (this.m_normal = new td()), (this.m_points = []);
                        for (var e = 0, t = Me.b2_maxManifoldPoints; e < t; ) {
                            var n = e++;
                            this.m_points[n] = new td();
                        }
                    };
                    (v["box2D.collision.B2WorldManifold"] = W2),
                        (W2.__name__ = "box2D.collision.B2WorldManifold"),
                        (W2.prototype = {
                            reset: function () {
                                (this.m_normal = new td()), (this.m_points = []);
                                for (var e = 0, t = Me.b2_maxManifoldPoints; e < t; ) {
                                    var n = e++;
                                    this.m_points[n] = new td();
                                }
                            },
                            initialize: function (e, t, n, a, s) {
                                if (0 != e.m_pointCount) {
                                    (this.m_normal = new td()), (this.m_points = []);
                                    for (var r = 0, A = Me.b2_maxManifoldPoints; r < A; ) {
                                        var l = r++;
                                        this.m_points[l] = new td();
                                    }
                                    switch (e.m_type) {
                                        case 1:
                                            (A = t.R),
                                                (r = e.m_localPoint),
                                                (l = t.position.x + A.col1.x * r.x + A.col2.x * r.y),
                                                (t = t.position.y + A.col1.y * r.x + A.col2.y * r.y),
                                                (A = a.R),
                                                (r = e.m_points[0].m_localPoint),
                                                (e = a.position.x + A.col1.x * r.x + A.col2.x * r.y),
                                                (a = a.position.y + A.col1.y * r.x + A.col2.y * r.y);
                                            var o = (r = e - l) * r + (A = a - t) * A;
                                            o > Number.MIN_VALUE * Number.MIN_VALUE ? ((o = Math.sqrt(o)), (this.m_normal.x = r / o), (this.m_normal.y = A / o)) : ((this.m_normal.x = 1), (this.m_normal.y = 0)),
                                                (r = t + n * this.m_normal.y),
                                                (a -= s * this.m_normal.y),
                                                (this.m_points[0].x = 0.5 * (l + n * this.m_normal.x + (e - s * this.m_normal.x))),
                                                (this.m_points[0].y = 0.5 * (r + a));
                                            break;
                                        case 2:
                                            (A = t.R), (r = e.m_localPlaneNormal), (l = A.col1.x * r.x + A.col2.x * r.y), (o = A.col1.y * r.x + A.col2.y * r.y), (A = t.R), (r = e.m_localPoint);
                                            var i = t.position.x + A.col1.x * r.x + A.col2.x * r.y,
                                                u = t.position.y + A.col1.y * r.x + A.col2.y * r.y;
                                            (this.m_normal.x = l), (this.m_normal.y = o), (t = 0);
                                            for (var g = e.m_pointCount; t < g; ) {
                                                var m = t++;
                                                (A = a.R), (r = e.m_points[m].m_localPoint);
                                                var d = a.position.x + A.col1.x * r.x + A.col2.x * r.y;
                                                (r = a.position.y + A.col1.y * r.x + A.col2.y * r.y),
                                                    (this.m_points[m].x = d + 0.5 * (n - (d - i) * l - (r - u) * o - s) * l),
                                                    (this.m_points[m].y = r + 0.5 * (n - (d - i) * l - (r - u) * o - s) * o);
                                            }
                                            break;
                                        case 4:
                                            for (
                                                A = a.R,
                                                    r = e.m_localPlaneNormal,
                                                    l = A.col1.x * r.x + A.col2.x * r.y,
                                                    o = A.col1.y * r.x + A.col2.y * r.y,
                                                    A = a.R,
                                                    r = e.m_localPoint,
                                                    i = a.position.x + A.col1.x * r.x + A.col2.x * r.y,
                                                    u = a.position.y + A.col1.y * r.x + A.col2.y * r.y,
                                                    this.m_normal.x = -l,
                                                    this.m_normal.y = -o,
                                                    a = 0,
                                                    g = e.m_pointCount;
                                                a < g;

                                            )
                                                (m = a++),
                                                    (A = t.R),
                                                    (r = e.m_points[m].m_localPoint),
                                                    (d = t.position.x + A.col1.x * r.x + A.col2.x * r.y),
                                                    (r = t.position.y + A.col1.y * r.x + A.col2.y * r.y),
                                                    (this.m_points[m].x = d + 0.5 * (s - (d - i) * l - (r - u) * o - n) * l),
                                                    (this.m_points[m].y = r + 0.5 * (s - (d - i) * l - (r - u) * o - n) * o);
                                    }
                                }
                            },
                            getPoint: function () {
                                return 0 == this.m_points.length ? null : 1 == this.m_points.length ? this.m_points[0] : new td((this.m_points[0].x + this.m_points[1].x) / 2, (this.m_points[0].y + this.m_points[1].y) / 2);
                            },
                            m_normal: null,
                            m_points: null,
                            __class__: W2,
                        });
                    var rt = function () {
                        (this.m_type = -1), (this.m_radius = Me.b2_linearSlop);
                    };
                    (v["box2D.collision.shapes.B2Shape"] = rt),
                        (rt.__name__ = "box2D.collision.shapes.B2Shape"),
                        (rt.testOverlap = function (e, t, n, a) {
                            return (
                                rt.initialized || ((rt.distanceInput.proxyA = rt.proxyA), (rt.distanceInput.proxyB = rt.proxyB), (rt.distanceInput.useRadii = !0), (rt.initialized = !0)),
                                rt.proxyA.set(e),
                                rt.proxyB.set(n),
                                (rt.distanceInput.transformA = t),
                                (rt.distanceInput.transformB = a),
                                (rt.simplexCache.count = 0),
                                xF.distance(rt.distanceOutput, rt.simplexCache, rt.distanceInput),
                                rt.distanceOutput.distance < 10 * Number.MIN_VALUE
                            );
                        }),
                        (rt.prototype = {
                            copy: function () {
                                return null;
                            },
                            set: function (e) {
                                this.m_radius = e.m_radius;
                            },
                            getType: function () {
                                return this.m_type;
                            },
                            testPoint: function (e, t) {
                                return !1;
                            },
                            rayCast: function (e, t, n) {
                                return !1;
                            },
                            computeAABB: function (e, t) {},
                            computeMass: function (e, t) {},
                            computeSubmergedArea: function (e, t, n, a) {
                                return 0;
                            },
                            m_type: null,
                            m_radius: null,
                            __class__: rt,
                        });
                    var Rw = function (e) {
                        null == e && (e = 0), rt.call(this), (this.m_p = new td()), (this.m_type = 0), (this.m_radius = e);
                    };
                    (v["box2D.collision.shapes.B2CircleShape"] = Rw),
                        (Rw.__name__ = "box2D.collision.shapes.B2CircleShape"),
                        (Rw.__super__ = rt),
                        (Rw.prototype = K(rt.prototype, {
                            copy: function () {
                                var e = new Rw();
                                return e.set(this), e;
                            },
                            set: function (e) {
                                if ((rt.prototype.set.call(this, e), e instanceof Rw)) {
                                    var t = d.__cast(e, Rw);
                                    (e = this.m_p), (t = t.m_p), (e.x = t.x), (e.y = t.y);
                                }
                            },
                            testPoint: function (e, t) {
                                var n = e.R,
                                    a = e.position.x + (n.col1.x * this.m_p.x + n.col2.x * this.m_p.y);
                                return (e = e.position.y + (n.col1.y * this.m_p.x + n.col2.y * this.m_p.y)), (a = t.x - a) * a + (e = t.y - e) * e <= this.m_radius * this.m_radius;
                            },
                            rayCast: function (e, t, n) {
                                var a = n.R,
                                    s = t.p1.x - (n.position.x + (a.col1.x * this.m_p.x + a.col2.x * this.m_p.y));
                                (n = t.p1.y - (n.position.y + (a.col1.y * this.m_p.x + a.col2.y * this.m_p.y))), (a = t.p2.x - t.p1.x);
                                var r = t.p2.y - t.p1.y,
                                    A = s * a + n * r,
                                    l = a * a + r * r,
                                    o = A * A - l * (s * s + n * n - this.m_radius * this.m_radius);
                                return (
                                    !(0 > o || l < Number.MIN_VALUE) && 0 <= (A = -(A + Math.sqrt(o))) && A <= t.maxFraction * l && ((A /= l), (e.fraction = A), (e.normal.x = s + A * a), (e.normal.y = n + A * r), e.normal.normalize(), !0)
                                );
                            },
                            computeAABB: function (e, t) {
                                var n = t.R,
                                    a = t.position.x + (n.col1.x * this.m_p.x + n.col2.x * this.m_p.y);
                                (t = t.position.y + (n.col1.y * this.m_p.x + n.col2.y * this.m_p.y)), (n = e.lowerBound);
                                var s = a - this.m_radius,
                                    r = t - this.m_radius;
                                null == r && (r = 0), null == s && (s = 0), (n.x = s), (n.y = r), (e = e.upperBound), (a += this.m_radius), null == (t += this.m_radius) && (t = 0), null == a && (a = 0), (e.x = a), (e.y = t);
                            },
                            computeMass: function (e, t) {
                                (e.mass = t * Me.b2_pi * this.m_radius * this.m_radius), (t = e.center);
                                var n = this.m_p;
                                (t.x = n.x), (t.y = n.y), (e.I = e.mass * (0.5 * this.m_radius * this.m_radius + (this.m_p.x * this.m_p.x + this.m_p.y * this.m_p.y)));
                            },
                            computeSubmergedArea: function (e, t, n, a) {
                                n = kd.mulX(n, this.m_p, !0);
                                var s = -(kd.dot(e, n) - t);
                                if (s < -this.m_radius + Number.MIN_VALUE) return 0;
                                if (s > this.m_radius) return (a.x = n.x), (a.y = n.y), Math.PI * this.m_radius * this.m_radius;
                                var r = s * s;
                                return (
                                    (s = (t = this.m_radius * this.m_radius) * (Math.asin(s / this.m_radius) + Math.PI / 2) + s * Math.sqrt(t - r)),
                                    (t = (-0.6666666666666666 * Math.pow(t - r, 1.5)) / s),
                                    (a.x = n.x + e.x * t),
                                    (a.y = n.y + e.y * t),
                                    s
                                );
                            },
                            getLocalPosition: function () {
                                return this.m_p;
                            },
                            setLocalPosition: function (e) {
                                var t = this.m_p;
                                (t.x = e.x), (t.y = e.y);
                            },
                            getRadius: function () {
                                return this.m_radius;
                            },
                            setRadius: function (e) {
                                this.m_radius = e;
                            },
                            m_p: null,
                            __class__: Rw,
                        }));
                    var oQ = function (e, t) {
                        rt.call(this),
                            (this.s_supportVec = new td()),
                            new td(),
                            new td(),
                            (this.m_v0 = new td()),
                            (this.m_v3 = new td()),
                            (this.m_hasVertex3 = this.m_hasVertex0 = !1),
                            (this.m_coreV1 = new td()),
                            (this.m_coreV2 = new td()),
                            (this.m_normal = new td()),
                            (this.m_direction = new td()),
                            (this.m_cornerDir1 = new td()),
                            (this.m_cornerDir2 = new td()),
                            (this.m_type = 2),
                            (this.m_nextEdge = this.m_prevEdge = null),
                            (this.m_v1 = e),
                            (this.m_v2 = t),
                            (e = this.m_direction),
                            (t = this.m_v2.x - this.m_v1.x);
                        var n = this.m_v2.y - this.m_v1.y;
                        null == n && (n = 0),
                            null == t && (t = 0),
                            (e.x = t),
                            (e.y = n),
                            (this.m_length = this.m_direction.normalize()),
                            (e = this.m_normal),
                            (t = this.m_direction.y),
                            null == (n = -this.m_direction.x) && (n = 0),
                            null == t && (t = 0),
                            (e.x = t),
                            (e.y = n),
                            (e = this.m_coreV1),
                            (t = -Me.b2_toiSlop * (this.m_normal.x - this.m_direction.x) + this.m_v1.x),
                            null == (n = -Me.b2_toiSlop * (this.m_normal.y - this.m_direction.y) + this.m_v1.y) && (n = 0),
                            null == t && (t = 0),
                            (e.x = t),
                            (e.y = n),
                            (e = this.m_coreV2),
                            (t = -Me.b2_toiSlop * (this.m_normal.x + this.m_direction.x) + this.m_v2.x),
                            null == (n = -Me.b2_toiSlop * (this.m_normal.y + this.m_direction.y) + this.m_v2.y) && (n = 0),
                            null == t && (t = 0),
                            (e.x = t),
                            (e.y = n),
                            (this.m_cornerDir1 = this.m_normal),
                            (e = this.m_cornerDir2),
                            (t = -this.m_normal.x),
                            null == (n = -this.m_normal.y) && (n = 0),
                            null == t && (t = 0),
                            (e.x = t),
                            (e.y = n);
                    };
                    (v["box2D.collision.shapes.B2EdgeShape"] = oQ),
                        (oQ.__name__ = "box2D.collision.shapes.B2EdgeShape"),
                        (oQ.__super__ = rt),
                        (oQ.prototype = K(rt.prototype, {
                            testPoint: function (e, t) {
                                return !1;
                            },
                            rayCast: function (e, t, n) {
                                var a = t.p2.x - t.p1.x,
                                    s = t.p2.y - t.p1.y,
                                    r = n.R,
                                    A = n.position.x + (r.col1.x * this.m_v1.x + r.col2.x * this.m_v1.y),
                                    l = n.position.y + (r.col1.y * this.m_v1.x + r.col2.y * this.m_v1.y),
                                    o = n.position.y + (r.col1.y * this.m_v2.x + r.col2.y * this.m_v2.y) - l,
                                    i = -(a * o + s * (n = -(n.position.x + (r.col1.x * this.m_v2.x + r.col2.x * this.m_v2.y) - A)));
                                if (i > (r = 100 * Number.MIN_VALUE)) {
                                    A = t.p1.x - A;
                                    var u = t.p1.y - l;
                                    if (0 <= (l = A * o + u * n) && l <= t.maxFraction * i && -r * i <= (t = -a * u + s * A) && t <= i * (1 + r))
                                        return (e.fraction = l / i), (t = Math.sqrt(o * o + n * n)), (e.normal.x = o / t), (e.normal.y = n / t), !0;
                                }
                                return !1;
                            },
                            computeAABB: function (e, t) {
                                var n = t.R,
                                    a = t.position.x + (n.col1.x * this.m_v1.x + n.col2.x * this.m_v1.y),
                                    s = t.position.y + (n.col1.y * this.m_v1.x + n.col2.y * this.m_v1.y),
                                    r = t.position.x + (n.col1.x * this.m_v2.x + n.col2.x * this.m_v2.y);
                                (t = t.position.y + (n.col1.y * this.m_v2.x + n.col2.y * this.m_v2.y)),
                                    a < r ? ((e.lowerBound.x = a), (e.upperBound.x = r)) : ((e.lowerBound.x = r), (e.upperBound.x = a)),
                                    s < t ? ((e.lowerBound.y = s), (e.upperBound.y = t)) : ((e.lowerBound.y = t), (e.upperBound.y = s));
                            },
                            computeMass: function (e, t) {
                                (e.mass = 0), (t = e.center);
                                var n = this.m_v1;
                                (t.x = n.x), (t.y = n.y), (e.I = 0);
                            },
                            computeSubmergedArea: function (e, t, n, a) {
                                var s = new td(e.x * t, e.y * t),
                                    r = kd.mulX(n, this.m_v1, !0);
                                n = kd.mulX(n, this.m_v2, !0);
                                var A = kd.dot(e, r) - t;
                                if (((e = kd.dot(e, n) - t), 0 < A)) {
                                    if (0 < e) return 0;
                                    (r.x = (-e / (A - e)) * r.x + (A / (A - e)) * n.x), (r.y = (-e / (A - e)) * r.y + (A / (A - e)) * n.y);
                                } else 0 < e && ((n.x = (-e / (A - e)) * r.x + (A / (A - e)) * n.x), (n.y = (-e / (A - e)) * r.y + (A / (A - e)) * n.y));
                                return (a.x = (s.x + r.x + n.x) / 3), (a.y = (s.y + r.y + n.y) / 3), 0.5 * ((r.x - s.x) * (n.y - s.y) - (r.y - s.y) * (n.x - s.x));
                            },
                            getLength: function () {
                                return this.m_length;
                            },
                            getVertex1: function () {
                                return this.m_v1;
                            },
                            getVertex2: function () {
                                return this.m_v2;
                            },
                            getCoreVertex1: function () {
                                return this.m_coreV1;
                            },
                            getCoreVertex2: function () {
                                return this.m_coreV2;
                            },
                            getNormalVector: function () {
                                return this.m_normal;
                            },
                            getDirectionVector: function () {
                                return this.m_direction;
                            },
                            getCorner1Vector: function () {
                                return this.m_cornerDir1;
                            },
                            getCorner2Vector: function () {
                                return this.m_cornerDir2;
                            },
                            corner1IsConvex: function () {
                                return this.m_cornerConvex1;
                            },
                            corner2IsConvex: function () {
                                return this.m_cornerConvex2;
                            },
                            getFirstVertex: function (e) {
                                var t = e.R;
                                return new td(e.position.x + (t.col1.x * this.m_coreV1.x + t.col2.x * this.m_coreV1.y), e.position.y + (t.col1.y * this.m_coreV1.x + t.col2.y * this.m_coreV1.y));
                            },
                            getNextEdge: function () {
                                return this.m_nextEdge;
                            },
                            getPrevEdge: function () {
                                return this.m_prevEdge;
                            },
                            s_supportVec: null,
                            support: function (e, t, n) {
                                var a = e.R,
                                    s = e.position.x + (a.col1.x * this.m_coreV1.x + a.col2.x * this.m_coreV1.y),
                                    r = e.position.y + (a.col1.y * this.m_coreV1.x + a.col2.y * this.m_coreV1.y),
                                    A = e.position.x + (a.col1.x * this.m_coreV2.x + a.col2.x * this.m_coreV2.y);
                                return (
                                    s * t + r * n > A * t + (e = e.position.y + (a.col1.y * this.m_coreV2.x + a.col2.y * this.m_coreV2.y)) * n
                                        ? ((this.s_supportVec.x = s), (this.s_supportVec.y = r))
                                        : ((this.s_supportVec.x = A), (this.s_supportVec.y = e)),
                                    this.s_supportVec
                                );
                            },
                            copy: function () {
                                var e = new oQ(this.m_v1, this.m_v2);
                                e.set(this);
                                var t = d.__cast(e, oQ),
                                    n = t.m_v0,
                                    a = this.m_v0;
                                return (n.x = a.x), (n.y = a.y), (n = t.m_v3), (a = this.m_v3), (n.x = a.x), (n.y = a.y), (t.m_hasVertex0 = this.m_hasVertex0), (t.m_hasVertex3 = this.m_hasVertex3), e;
                            },
                            setPrevEdge: function (e, t, n, a) {
                                (this.m_prevEdge = e), (this.m_coreV1 = t), (this.m_cornerDir1 = n), (this.m_cornerConvex1 = a);
                            },
                            setNextEdge: function (e, t, n, a) {
                                (this.m_nextEdge = e), (this.m_coreV2 = t), (this.m_cornerDir2 = n), (this.m_cornerConvex2 = a);
                            },
                            m_v1: null,
                            m_v2: null,
                            m_v0: null,
                            m_v3: null,
                            m_hasVertex0: null,
                            m_hasVertex3: null,
                            m_coreV1: null,
                            m_coreV2: null,
                            m_length: null,
                            m_normal: null,
                            m_direction: null,
                            m_cornerDir1: null,
                            m_cornerDir2: null,
                            m_cornerConvex1: null,
                            m_cornerConvex2: null,
                            m_nextEdge: null,
                            m_prevEdge: null,
                            __class__: oQ,
                        }));
                    var X2 = function () {
                        (this.mass = 0), (this.center = new td(0, 0)), (this.I = 0);
                    };
                    (v["box2D.collision.shapes.B2MassData"] = X2), (X2.__name__ = "box2D.collision.shapes.B2MassData"), (X2.prototype = { mass: null, center: null, I: null, __class__: X2 });
                    var ct = function () {
                        rt.call(this), (this.m_type = 1), (this.m_centroid = new td()), (this.m_vertices = []), (this.m_normals = []);
                    };
                    (v["box2D.collision.shapes.B2PolygonShape"] = ct),
                        (ct.__name__ = "box2D.collision.shapes.B2PolygonShape"),
                        (ct.asArray = function (e, t) {
                            var n = new ct();
                            return n.setAsArray(e, t), n;
                        }),
                        (ct.asVector = function (e, t) {
                            var n = new ct();
                            return n.setAsVector(e, t), n;
                        }),
                        (ct.asBox = function (e, t) {
                            var n = new ct();
                            return n.setAsBox(e, t), n;
                        }),
                        (ct.asOrientedBox = function (e, t, n, a) {
                            null == a && (a = 0);
                            var s = new ct();
                            return s.setAsOrientedBox(e, t, n, a), s;
                        }),
                        (ct.asEdge = function (e, t) {
                            var n = new ct();
                            return n.setAsEdge(e, t), n;
                        }),
                        (ct.computeCentroid = function (e, t) {
                            for (var n = new td(), a = 0, s = 0; s < t; ) {
                                var r = s++,
                                    A = e[r];
                                r = r + 1 < t ? e[(r + 1) | 0] : e[0];
                                var l = 0.5 * ((A.x - 0) * (r.y - 0) - (A.y - 0) * (r.x - 0));
                                (a += l), (n.x += 0.3333333333333333 * l * (0 + A.x + r.x)), (n.y += 0.3333333333333333 * l * (0 + A.y + r.y));
                            }
                            return (n.x *= 1 / a), (n.y *= 1 / a), n;
                        }),
                        (ct.computeOBB = function (e, t, n) {
                            for (var a = [], s = 0; s < n; ) {
                                var r = s++;
                                a[r] = t[r];
                            }
                            for (a[n] = a[0], t = Number.MAX_VALUE, s = 1, r = n + 1; s < r; ) {
                                for (
                                    var A = s++,
                                        l = a[(A - 1) | 0],
                                        o = a[A].x - l.x,
                                        i = a[A].y - l.y,
                                        u = -(i /= A = Math.sqrt(o * o + i * i)),
                                        g = (o /= A),
                                        m = (A = Number.MAX_VALUE),
                                        d = -Number.MAX_VALUE,
                                        c = -Number.MAX_VALUE,
                                        p = 0,
                                        h = n;
                                    p < h;

                                ) {
                                    var f = p++,
                                        y = a[f].x - l.x,
                                        R = a[f].y - l.y;
                                    (f = o * y + i * R) < A && (A = f), (y = u * y + g * R) < m && (m = y), f > d && (d = f), y > c && (c = y);
                                }
                                (p = (d - A) * (c - m)) < 0.95 * t &&
                                    ((t = p),
                                    (e.R.col1.x = o),
                                    (e.R.col1.y = i),
                                    (e.R.col2.x = u),
                                    (e.R.col2.y = g),
                                    (o = 0.5 * (A + d)),
                                    (i = 0.5 * (m + c)),
                                    (u = e.R),
                                    (e.center.x = l.x + (u.col1.x * o + u.col2.x * i)),
                                    (e.center.y = l.y + (u.col1.y * o + u.col2.y * i)),
                                    (e.extents.x = 0.5 * (d - A)),
                                    (e.extents.y = 0.5 * (c - m)));
                            }
                        }),
                        (ct.__super__ = rt),
                        (ct.prototype = K(rt.prototype, {
                            copy: function () {
                                var e = new ct();
                                return e.set(this), e;
                            },
                            set: function (e) {
                                if ((rt.prototype.set.call(this, e), e instanceof ct)) {
                                    e = d.__cast(e, ct);
                                    var t = this.m_centroid,
                                        n = e.m_centroid;
                                    for (t.x = n.x, t.y = n.y, this.m_vertexCount = e.m_vertexCount, this.reserve(this.m_vertexCount), t = 0, n = this.m_vertexCount; t < n; ) {
                                        var a = t++,
                                            s = this.m_vertices[a],
                                            r = e.m_vertices[a];
                                        (s.x = r.x), (s.y = r.y), (s = this.m_normals[a]), (a = e.m_normals[a]), (s.x = a.x), (s.y = a.y);
                                    }
                                }
                            },
                            setAsArray: function (e, t) {
                                null == t && (t = 0);
                                for (var n = [], a = 0; a < e.length; ) {
                                    var s = e[a];
                                    ++a, n.push(s);
                                }
                                this.setAsVector(n, t);
                            },
                            setAsVector: function (e, t) {
                                null == t && (t = 0), 0 == t && (t = e.length), Me.b2Assert(2 <= t), (this.m_vertexCount = t), this.reserve(t), (t = 0);
                                for (var n = this.m_vertexCount; t < n; ) {
                                    var a = t++,
                                        s = this.m_vertices[a];
                                    (a = e[a]), (s.x = a.x), (s.y = a.y);
                                }
                                for (e = 0, t = this.m_vertexCount; e < t; )
                                    (n = e++),
                                        (a = kd.subtractVVPooled(this.m_vertices[n + 1 < this.m_vertexCount ? n + 1 : 0], this.m_vertices[n])),
                                        Me.b2Assert(a.lengthSquared() > Number.MIN_VALUE),
                                        (s = this.m_normals[n]),
                                        (a = kd.crossVF(a, 1)),
                                        (s.x = a.x),
                                        (s.y = a.y),
                                        this.m_normals[n].normalize();
                                this.m_centroid = ct.computeCentroid(this.m_vertices, this.m_vertexCount);
                            },
                            setAsBox: function (e, t) {
                                (this.m_vertexCount = 4), this.reserve(4);
                                var n = this.m_vertices[0],
                                    a = -e,
                                    s = -t;
                                null == s && (s = 0),
                                    null == a && (a = 0),
                                    (n.x = a),
                                    (n.y = s),
                                    null == (s = -t) && (s = 0),
                                    null == (a = e) && (a = 0),
                                    ((n = this.m_vertices[1]).x = a),
                                    (n.y = s),
                                    null == (s = t) && (s = 0),
                                    null == (a = e) && (a = 0),
                                    ((n = this.m_vertices[2]).x = a),
                                    (n.y = s),
                                    null == t && (t = 0),
                                    null == (e = -e) && (e = 0),
                                    ((n = this.m_vertices[3]).x = e),
                                    (n.y = t),
                                    null == (n = -1) && (n = 0),
                                    null == (e = 0) && (e = 0),
                                    ((t = this.m_normals[0]).x = e),
                                    (t.y = n),
                                    null == (n = 0) && (n = 0),
                                    null == (e = 1) && (e = 0),
                                    ((t = this.m_normals[1]).x = e),
                                    (t.y = n),
                                    null == (n = 1) && (n = 0),
                                    null == (e = 0) && (e = 0),
                                    ((t = this.m_normals[2]).x = e),
                                    (t.y = n),
                                    null == (n = 0) && (n = 0),
                                    null == (e = -1) && (e = 0),
                                    ((t = this.m_normals[3]).x = e),
                                    (t.y = n),
                                    ((t = this.m_centroid).x = 0),
                                    (t.y = 0);
                            },
                            setAsOrientedBox: function (e, t, n, a) {
                                null == a && (a = 0), (this.m_vertexCount = 4), this.reserve(4);
                                var s = this.m_vertices[0],
                                    r = -e,
                                    A = -t;
                                for (
                                    null == A && (A = 0),
                                        null == r && (r = 0),
                                        s.x = r,
                                        s.y = A,
                                        null == (A = -t) && (A = 0),
                                        null == (r = e) && (r = 0),
                                        (s = this.m_vertices[1]).x = r,
                                        s.y = A,
                                        null == (A = t) && (A = 0),
                                        null == (r = e) && (r = 0),
                                        (s = this.m_vertices[2]).x = r,
                                        s.y = A,
                                        null == t && (t = 0),
                                        null == (e = -e) && (e = 0),
                                        (s = this.m_vertices[3]).x = e,
                                        s.y = t,
                                        null == (s = -1) && (s = 0),
                                        null == (e = 0) && (e = 0),
                                        (t = this.m_normals[0]).x = e,
                                        t.y = s,
                                        null == (s = 0) && (s = 0),
                                        null == (e = 1) && (e = 0),
                                        (t = this.m_normals[1]).x = e,
                                        t.y = s,
                                        null == (s = 1) && (s = 0),
                                        null == (e = 0) && (e = 0),
                                        (t = this.m_normals[2]).x = e,
                                        t.y = s,
                                        null == (s = 0) && (s = 0),
                                        null == (e = -1) && (e = 0),
                                        (t = this.m_normals[3]).x = e,
                                        t.y = s,
                                        this.m_centroid = n,
                                        (t = new wJ()).position = n,
                                        t.R.set(a),
                                        n = 0,
                                        a = this.m_vertexCount;
                                    n < a;

                                )
                                    (e = n++), (this.m_vertices[e] = kd.mulX(t, this.m_vertices[e])), (this.m_normals[e] = kd.mulMV(t.R, this.m_normals[e]));
                            },
                            setAsEdge: function (e, t) {
                                (this.m_vertexCount = 2), this.reserve(2);
                                var n = this.m_vertices[0];
                                (n.x = e.x),
                                    (n.y = e.y),
                                    ((n = this.m_vertices[1]).x = t.x),
                                    (n.y = t.y),
                                    (this.m_centroid.x = 0.5 * (e.x + t.x)),
                                    (this.m_centroid.y = 0.5 * (e.y + t.y)),
                                    (this.m_normals[0] = kd.crossVF(kd.subtractVV(t, e), 1)),
                                    this.m_normals[0].normalize(),
                                    (this.m_normals[1].x = -this.m_normals[0].x),
                                    (this.m_normals[1].y = -this.m_normals[0].y);
                            },
                            testPoint: function (e, t) {
                                var n = e.R,
                                    a = t.x - e.position.x;
                                (e = t.y - e.position.y), (t = a * n.col1.x + e * n.col1.y);
                                for (var s = a * n.col2.x + e * n.col2.y, r = 0, A = this.m_vertexCount; r < A; ) {
                                    var l = r++;
                                    if (((a = t - (n = this.m_vertices[l]).x), (e = s - n.y), 0 < (n = this.m_normals[l]).x * a + n.y * e)) return !1;
                                }
                                return !0;
                            },
                            rayCast: function (e, t, n) {
                                var a = 0,
                                    s = t.maxFraction,
                                    r = t.p1.x - n.position.x,
                                    A = t.p1.y - n.position.y,
                                    l = n.R,
                                    o = r * l.col1.x + A * l.col1.y,
                                    i = r * l.col2.x + A * l.col2.y;
                                (r = t.p2.x - n.position.x), (A = t.p2.y - n.position.y), (t = r * (l = n.R).col1.x + A * l.col1.y - o), (l = r * l.col2.x + A * l.col2.y - i);
                                for (var u = -1, g = 0, m = this.m_vertexCount; g < m; ) {
                                    var d = g++,
                                        c = this.m_vertices[d];
                                    if (((r = c.x - o), (A = c.y - i), (r = (c = this.m_normals[d]).x * r + c.y * A), 0 == (c = c.x * t + c.y * l))) {
                                        if (0 > r) return !1;
                                    } else 0 > c && r < a * c ? ((a = r / c), (u = d)) : 0 < c && r < s * c && (s = r / c);
                                    if (s < a - Number.MIN_VALUE) return !1;
                                }
                                return 0 <= u && ((e.fraction = a), (l = n.R), (c = this.m_normals[u]), (e.normal.x = l.col1.x * c.x + l.col2.x * c.y), (e.normal.y = l.col1.y * c.x + l.col2.y * c.y), !0);
                            },
                            computeAABB: function (e, t) {
                                for (var n = t.R, a = this.m_vertices[0], s = t.position.x + (n.col1.x * a.x + n.col2.x * a.y), r = t.position.y + (n.col1.y * a.x + n.col2.y * a.y), A = s, l = r, o = 1, i = this.m_vertexCount; o < i; ) {
                                    var u = o++;
                                    (a = this.m_vertices[u]),
                                        (s = s < (u = t.position.x + (n.col1.x * a.x + n.col2.x * a.y)) ? s : u),
                                        (r = r < (a = t.position.y + (n.col1.y * a.x + n.col2.y * a.y)) ? r : a),
                                        (A = A > u ? A : u),
                                        (l = l > a ? l : a);
                                }
                                (e.lowerBound.x = s - this.m_radius), (e.lowerBound.y = r - this.m_radius), (e.upperBound.x = A + this.m_radius), (e.upperBound.y = l + this.m_radius);
                            },
                            computeMass: function (e, t) {
                                if (2 == this.m_vertexCount) (e.center.x = 0.5 * (this.m_vertices[0].x + this.m_vertices[1].x)), (e.center.y = 0.5 * (this.m_vertices[0].y + this.m_vertices[1].y)), (e.mass = 0), (e.I = 0);
                                else {
                                    for (var n = 0, a = 0, s = 0, r = 0, A = 0, l = this.m_vertexCount; A < l; ) {
                                        var o = A++,
                                            i = this.m_vertices[o],
                                            u = o + 1 < this.m_vertexCount ? this.m_vertices[(o + 1) | 0] : this.m_vertices[0],
                                            g = i.x - 0,
                                            m = i.y - 0,
                                            d = u.x - 0,
                                            c = u.y - 0,
                                            p = 0.5 * (o = g * c - m * d);
                                        (s += p),
                                            (n += 0.3333333333333333 * p * (0 + i.x + u.x)),
                                            (a += 0.3333333333333333 * p * (0 + i.y + u.y)),
                                            (r += o * (0.3333333333333333 * (0.25 * ((i = g) * i + d * i + d * d) + (0 * i + 0 * d)) + 0 + (0.3333333333333333 * (0.25 * (m * m + c * m + c * c) + (0 * m + 0 * c)) + 0)));
                                    }
                                    (e.mass = t * s), null == (a *= 1 / s) && (a = 0), null == (n *= 1 / s) && (n = 0), ((A = e.center).x = n), (A.y = a), (e.I = t * r);
                                }
                            },
                            computeSubmergedArea: function (e, t, n, a) {
                                var s = kd.mulTMV(n.R, e, !0),
                                    r = t - kd.dot(e, n.position),
                                    A = [],
                                    l = 0;
                                e = t = -1;
                                for (var o = !1, i = 0, u = this.m_vertexCount; i < u; ) {
                                    var g = i++;
                                    A[g] = kd.dot(s, this.m_vertices[g]) - r;
                                    var m = A[g] < -Number.MIN_VALUE;
                                    0 < g && (m ? o || ((t = g - 1), ++l) : o && ((e = g - 1), ++l)), (o = m);
                                }
                                switch (l) {
                                    case 0:
                                        return o ? ((e = new X2()), this.computeMass(e, 1), (n = kd.mulX(n, e.center)), (a.x = n.x), (a.y = n.y), e.mass) : 0;
                                    case 1:
                                        -1 == t ? (t = this.m_vertexCount - 1) : (e = this.m_vertexCount - 1);
                                }
                                for (
                                    r = (t + 1) % this.m_vertexCount,
                                        s = (e + 1) % this.m_vertexCount,
                                        l = (0 - A[t]) / (A[r] - A[t]),
                                        A = (0 - A[e]) / (A[s] - A[e]),
                                        t = new td(this.m_vertices[t].x * (1 - l) + this.m_vertices[r].x * l, this.m_vertices[t].y * (1 - l) + this.m_vertices[r].y * l),
                                        A = new td(this.m_vertices[e].x * (1 - A) + this.m_vertices[s].x * A, this.m_vertices[e].y * (1 - A) + this.m_vertices[s].y * A),
                                        e = 0,
                                        l = new td(),
                                        o = this.m_vertices[r],
                                        i = r;
                                    i != s;

                                )
                                    (r = (i = (i + 1) % this.m_vertexCount) == s ? A : this.m_vertices[i]),
                                        (e += u = 0.5 * ((o.x - t.x) * (r.y - t.y) - (o.y - t.y) * (r.x - t.x))),
                                        (l.x += (u * (t.x + o.x + r.x)) / 3),
                                        (l.y += (u * (t.y + o.y + r.y)) / 3),
                                        (o = r);
                                return l.multiply(1 / e), (n = kd.mulX(n, l)), (a.x = n.x), (a.y = n.y), e;
                            },
                            getVertexCount: function () {
                                return this.m_vertexCount;
                            },
                            getVertices: function () {
                                return this.m_vertices;
                            },
                            getNormals: function () {
                                return this.m_normals;
                            },
                            getSupport: function (e) {
                                for (var t = 0, n = this.m_vertices[0].x * e.x + this.m_vertices[0].y * e.y, a = 1, s = this.m_vertexCount; a < s; ) {
                                    var r = a++,
                                        A = this.m_vertices[r].x * e.x + this.m_vertices[r].y * e.y;
                                    A > n && ((t = r), (n = A));
                                }
                                return t;
                            },
                            getSupportVertex: function (e) {
                                for (var t = 0, n = this.m_vertices[0].x * e.x + this.m_vertices[0].y * e.y, a = 1, s = this.m_vertexCount; a < s; ) {
                                    var r = a++,
                                        A = this.m_vertices[r].x * e.x + this.m_vertices[r].y * e.y;
                                    A > n && ((t = r), (n = A));
                                }
                                return this.m_vertices[t];
                            },
                            validate: function () {
                                return !1;
                            },
                            reserve: function (e) {
                                for (var t = this.m_vertices.length; t < e; ) {
                                    var n = t++;
                                    (this.m_vertices[n] = new td()), (this.m_normals[n] = new td());
                                }
                            },
                            m_centroid: null,
                            m_vertices: null,
                            m_normals: null,
                            m_vertexCount: null,
                            __class__: ct,
                        }));
                    var z4 = function (e, t, n) {
                        (this._r = (255 * kd.clamp(e, 0, 1)) | 0), (this._g = (255 * kd.clamp(t, 0, 1)) | 0), (this._b = (255 * kd.clamp(n, 0, 1)) | 0);
                    };
                    (v["box2D.common.B2Color"] = z4),
                        (z4.__name__ = "box2D.common.B2Color"),
                        (z4.prototype = {
                            set: function (e, t, n) {
                                (this._r = (255 * kd.clamp(e, 0, 1)) | 0), (this._g = (255 * kd.clamp(t, 0, 1)) | 0), (this._b = (255 * kd.clamp(n, 0, 1)) | 0);
                            },
                            r: null,
                            g: null,
                            b: null,
                            color: null,
                            set_r: function (e) {
                                return (this._r = (255 * kd.clamp(e, 0, 1)) | 0);
                            },
                            set_g: function (e) {
                                return (this._g = (255 * kd.clamp(e, 0, 1)) | 0);
                            },
                            set_b: function (e) {
                                return (this._b = (255 * kd.clamp(e, 0, 1)) | 0);
                            },
                            get_color: function () {
                                return (this._r << 16) | (this._g << 8) | this._b;
                            },
                            _r: null,
                            _g: null,
                            _b: null,
                            __class__: z4,
                            __properties__: { get_color: "get_color", set_b: "set_b", set_g: "set_g", set_r: "set_r" },
                        });
                    var Me = function () {};
                    (v["box2D.common.B2Settings"] = Me),
                        (Me.__name__ = "box2D.common.B2Settings"),
                        (Me.b2MixFriction = function (e, t) {
                            return Math.sqrt(e * t);
                        }),
                        (Me.b2MixRestitution = function (e, t) {
                            return e > t ? e : t;
                        }),
                        (Me.b2Assert = function (e) {
                            if (!e) throw new Gc("Assertion Failed");
                        });
                    var JV = function (e, t, n) {
                        (this.col1 = new qz()),
                            (this.col2 = new qz()),
                            (this.col3 = new qz()),
                            null == e && null == t && null == n ? (this.col1.setZero(), this.col2.setZero(), this.col3.setZero()) : (this.col1.setV(e), this.col2.setV(t), this.col3.setV(n));
                    };
                    (v["box2D.common.math.B2Mat33"] = JV),
                        (JV.__name__ = "box2D.common.math.B2Mat33"),
                        (JV.prototype = {
                            setVVV: function (e, t, n) {
                                this.col1.setV(e), this.col2.setV(t), this.col3.setV(n);
                            },
                            copy: function () {
                                return new JV(this.col1, this.col2, this.col3);
                            },
                            setM: function (e) {
                                this.col1.setV(e.col1), this.col2.setV(e.col2), this.col3.setV(e.col3);
                            },
                            addM: function (e) {
                                (this.col1.x += e.col1.x),
                                    (this.col1.y += e.col1.y),
                                    (this.col1.z += e.col1.z),
                                    (this.col2.x += e.col2.x),
                                    (this.col2.y += e.col2.y),
                                    (this.col2.z += e.col2.z),
                                    (this.col3.x += e.col3.x),
                                    (this.col3.y += e.col3.y),
                                    (this.col3.z += e.col3.z);
                            },
                            setIdentity: function () {
                                (this.col1.x = 1), (this.col2.x = 0), (this.col3.x = 0), (this.col1.y = 0), (this.col2.y = 1), (this.col3.y = 0), (this.col1.z = 0), (this.col2.z = 0), (this.col3.z = 1);
                            },
                            setZero: function () {
                                (this.col1.x = 0), (this.col2.x = 0), (this.col3.x = 0), (this.col1.y = 0), (this.col2.y = 0), (this.col3.y = 0), (this.col1.z = 0), (this.col2.z = 0), (this.col3.z = 0);
                            },
                            solve22: function (e, t, n) {
                                var a = this.col1.x,
                                    s = this.col2.x,
                                    r = this.col1.y,
                                    A = this.col2.y,
                                    l = a * A - s * r;
                                return 0 != l && (l = 1 / l), (e.x = l * (A * t - s * n)), (e.y = l * (a * n - r * t)), e;
                            },
                            solve33: function (e, t, n, a) {
                                var s = this.col1.x,
                                    r = this.col1.y,
                                    A = this.col1.z,
                                    l = this.col2.x,
                                    o = this.col2.y,
                                    i = this.col2.z,
                                    u = this.col3.x,
                                    g = this.col3.y,
                                    m = this.col3.z,
                                    d = s * (o * m - i * g) + r * (i * u - l * m) + A * (l * g - o * u);
                                return (
                                    0 != d && (d = 1 / d),
                                    (e.x = d * (t * (o * m - i * g) + n * (i * u - l * m) + a * (l * g - o * u))),
                                    (e.y = d * (s * (n * m - a * g) + r * (a * u - t * m) + A * (t * g - n * u))),
                                    (e.z = d * (s * (o * a - i * n) + r * (i * t - l * a) + A * (l * n - o * t))),
                                    e
                                );
                            },
                            col1: null,
                            col2: null,
                            col3: null,
                            __class__: JV,
                        });
                    var kd = function () {};
                    (v["box2D.common.math.B2Math"] = kd),
                        (kd.__name__ = "box2D.common.math.B2Math"),
                        (kd.__properties__ = { get_MIN_VALUE: "get_MIN_VALUE", get_MAX_VALUE: "get_MAX_VALUE" }),
                        (kd.isValid = function (e) {
                            return !isNaN(e) && -1 / 0 != e && 1 / 0 != e;
                        }),
                        (kd.dot = function (e, t) {
                            return e.x * t.x + e.y * t.y;
                        }),
                        (kd.crossVV = function (e, t) {
                            return e.x * t.y - e.y * t.x;
                        }),
                        (kd.crossVF = function (e, t, n) {
                            if ((null == n && (n = !1), n)) {
                                n = td.getFromPool();
                                var a = t * e.y;
                                null == (e = -t * e.x) && (e = 0), null == a && (a = 0), (n.x = a), (n.y = e);
                            } else n = new td(t * e.y, -t * e.x);
                            return n;
                        }),
                        (kd.crossFV = function (e, t, n) {
                            if ((null == n && (n = !1), n)) {
                                n = td.getFromPool();
                                var a = -e * t.y;
                                null == (e *= t.x) && (e = 0), null == a && (a = 0), (n.x = a), (n.y = e);
                            } else n = new td(-e * t.y, e * t.x);
                            return n;
                        }),
                        (kd.mulMV = function (e, t, n) {
                            if ((null == n && (n = !1), n)) {
                                n = td.getFromPool();
                                var a = e.col1.x * t.x + e.col2.x * t.y;
                                null == (e = e.col1.y * t.x + e.col2.y * t.y) && (e = 0), null == a && (a = 0), (n.x = a), (n.y = e);
                            } else n = new td(e.col1.x * t.x + e.col2.x * t.y, e.col1.y * t.x + e.col2.y * t.y);
                            return n;
                        }),
                        (kd.mulTMV = function (e, t, n) {
                            if ((null == n && (n = !1), n)) {
                                n = td.getFromPool();
                                var a = kd.dot(t, e.col1);
                                null == (e = kd.dot(t, e.col2)) && (e = 0), null == a && (a = 0), (n.x = a), (n.y = e);
                            } else n = new td(kd.dot(t, e.col1), kd.dot(t, e.col2));
                            return n;
                        }),
                        (kd.mulX = function (e, t, n) {
                            return null == n && (n = !1), ((t = kd.mulMV(e.R, t, n)).x += e.position.x), (t.y += e.position.y), t;
                        }),
                        (kd.mulXT = function (e, t, n) {
                            return (n = (t = kd.subtractVVPooled(t, e.position)).x * e.R.col1.x + t.y * e.R.col1.y), (t.y = t.x * e.R.col2.x + t.y * e.R.col2.y), (t.x = n), t;
                        }),
                        (kd.addVV = function (e, t) {
                            return new td(e.x + t.x, e.y + t.y);
                        }),
                        (kd.subtractVV = function (e, t) {
                            return new td(e.x - t.x, e.y - t.y);
                        }),
                        (kd.subtractVVPooled = function (e, t) {
                            var n = td.getFromPool(),
                                a = e.x - t.x;
                            return null == (e = e.y - t.y) && (e = 0), null == a && (a = 0), (n.x = a), (n.y = e), n;
                        }),
                        (kd.distance = function (e, t) {
                            var n = e.x - t.x;
                            return (e = e.y - t.y), Math.sqrt(n * n + e * e);
                        }),
                        (kd.distanceSquared = function (e, t) {
                            var n = e.x - t.x;
                            return n * n + (e = e.y - t.y) * e;
                        }),
                        (kd.mulFV = function (e, t) {
                            return new td(e * t.x, e * t.y);
                        }),
                        (kd.addMM = function (e, t) {
                            return Tv.fromVV(kd.addVV(e.col1, t.col1), kd.addVV(e.col2, t.col2));
                        }),
                        (kd.mulMM = function (e, t) {
                            return Tv.fromVV(kd.mulMV(e, t.col1), kd.mulMV(e, t.col2));
                        }),
                        (kd.mulTMM = function (e, t) {
                            var n = new td(kd.dot(e.col1, t.col1), kd.dot(e.col2, t.col1));
                            return (e = new td(kd.dot(e.col1, t.col2), kd.dot(e.col2, t.col2))), Tv.fromVV(n, e);
                        }),
                        (kd.abs = function (e) {
                            return 0 < e ? e : -e;
                        }),
                        (kd.absV = function (e) {
                            return new td(kd.abs(e.x), kd.abs(e.y));
                        }),
                        (kd.absM = function (e) {
                            return Tv.fromVV(kd.absV(e.col1), kd.absV(e.col2));
                        }),
                        (kd.min = function (e, t) {
                            return e < t ? e : t;
                        }),
                        (kd.minV = function (e, t) {
                            return new td(kd.min(e.x, t.x), kd.min(e.y, t.y));
                        }),
                        (kd.max = function (e, t) {
                            return e > t ? e : t;
                        }),
                        (kd.maxV = function (e, t) {
                            return new td(kd.max(e.x, t.x), kd.max(e.y, t.y));
                        }),
                        (kd.clamp = function (e, t, n) {
                            return e < t ? t : e > n ? n : e;
                        }),
                        (kd.clampV = function (e, t, n) {
                            return kd.maxV(t, kd.minV(e, n));
                        }),
                        (kd.swap = function (e, t) {
                            var n = e[0];
                            (e[0] = t[0]), (t[0] = n);
                        }),
                        (kd.random = function () {
                            return 2 * Math.random() - 1;
                        }),
                        (kd.randomRange = function (e, t) {
                            return (t - e) * Math.random() + e;
                        }),
                        (kd.nextPowerOfTwo = function (e) {
                            return (e |= (e >> 1) & 2147483647), (e |= (e >> 2) & 1073741823), (e |= (e >> 4) & 268435455), 1 + ((e |= (e >> 8) & 16777215) | ((e >> 16) & 65535));
                        }),
                        (kd.isPowerOfTwo = function (e) {
                            return 0 < e && 0 == (e & (e - 1));
                        }),
                        (kd.get_MAX_VALUE = function () {
                            return Number.MAX_VALUE;
                        }),
                        (kd.get_MIN_VALUE = function () {
                            return Number.MIN_VALUE;
                        });
                    var XU = function () {
                        (this.localCenter = new td()), (this.c0 = new td()), (this.c = new td());
                    };
                    (v["box2D.common.math.B2Sweep"] = XU),
                        (XU.__name__ = "box2D.common.math.B2Sweep"),
                        (XU.prototype = {
                            set: function (e) {
                                var t = this.localCenter,
                                    n = e.localCenter;
                                (t.x = n.x), (t.y = n.y), (t = this.c0), (n = e.c0), (t.x = n.x), (t.y = n.y), (t = this.c), (n = e.c), (t.x = n.x), (t.y = n.y), (this.a0 = e.a0), (this.a = e.a), (this.t0 = e.t0);
                            },
                            copy: function () {
                                var e = new XU(),
                                    t = e.localCenter,
                                    n = this.localCenter;
                                return (t.x = n.x), (t.y = n.y), (t = e.c0), (n = this.c0), (t.x = n.x), (t.y = n.y), (t = e.c), (n = this.c), (t.x = n.x), (t.y = n.y), (e.a0 = this.a0), (e.a = this.a), (e.t0 = this.t0), e;
                            },
                            getTransform: function (e, t) {
                                (e.position.x = (1 - t) * this.c0.x + t * this.c.x),
                                    (e.position.y = (1 - t) * this.c0.y + t * this.c.y),
                                    e.R.set((1 - t) * this.a0 + t * this.a),
                                    (t = e.R),
                                    (e.position.x -= t.col1.x * this.localCenter.x + t.col2.x * this.localCenter.y),
                                    (e.position.y -= t.col1.y * this.localCenter.x + t.col2.y * this.localCenter.y);
                            },
                            advance: function (e) {
                                if (this.t0 < e && 1 - this.t0 > Number.MIN_VALUE) {
                                    var t = (e - this.t0) / (1 - this.t0);
                                    (this.c0.x = (1 - t) * this.c0.x + t * this.c.x), (this.c0.y = (1 - t) * this.c0.y + t * this.c.y), (this.a0 = (1 - t) * this.a0 + t * this.a), (this.t0 = e);
                                }
                            },
                            localCenter: null,
                            c0: null,
                            c: null,
                            a0: null,
                            a: null,
                            t0: null,
                            __class__: XU,
                        });
                    var qz = function (e, t, n) {
                        null == n && (n = 0), null == t && (t = 0), null == e && (e = 0), (this.x = e), (this.y = t), (this.z = n);
                    };
                    (v["box2D.common.math.B2Vec3"] = qz),
                        (qz.__name__ = "box2D.common.math.B2Vec3"),
                        (qz.prototype = {
                            setZero: function () {
                                this.x = this.y = this.z = 0;
                            },
                            set: function (e, t, n) {
                                (this.x = e), (this.y = t), (this.z = n);
                            },
                            setV: function (e) {
                                (this.x = e.x), (this.y = e.y), (this.z = e.z);
                            },
                            getNegative: function () {
                                return new qz(-this.x, -this.y, -this.z);
                            },
                            negativeSelf: function () {
                                (this.x = -this.x), (this.y = -this.y), (this.z = -this.z);
                            },
                            copy: function () {
                                return new qz(this.x, this.y, this.z);
                            },
                            add: function (e) {
                                (this.x += e.x), (this.y += e.y), (this.z += e.z);
                            },
                            subtract: function (e) {
                                (this.x -= e.x), (this.y -= e.y), (this.z -= e.z);
                            },
                            multiply: function (e) {
                                (this.x *= e), (this.y *= e), (this.z *= e);
                            },
                            x: null,
                            y: null,
                            z: null,
                            __class__: qz,
                        });
                    var Ig = function (e, t) {
                        (this.m_xf = new wJ()),
                            (this.m_sweep = new XU()),
                            (this.m_linearVelocity = new td()),
                            (this.m_force = new td()),
                            (this.m_flags = 0),
                            e.bullet && (this.m_flags |= Ig.e_bulletFlag),
                            e.fixedRotation && (this.m_flags |= Ig.e_fixedRotationFlag),
                            e.allowSleep && (this.m_flags |= Ig.e_allowSleepFlag),
                            e.awake && (this.m_flags |= Ig.e_awakeFlag),
                            e.active && (this.m_flags |= Ig.e_activeFlag),
                            e.ignoreGravity && (this.m_flags |= Ig.e_ignoreGravityFlag),
                            (this.m_world = t),
                            (t = this.m_xf.position);
                        var n = e.position;
                        (t.x = n.x),
                            (t.y = n.y),
                            this.m_xf.R.set(e.angle),
                            ((t = this.m_sweep.localCenter).x = 0),
                            (t.y = 0),
                            (this.m_sweep.t0 = 1),
                            (this.m_sweep.a0 = this.m_sweep.a = e.angle),
                            (t = this.m_xf.R),
                            (n = this.m_sweep.localCenter),
                            (this.m_sweep.c.x = t.col1.x * n.x + t.col2.x * n.y),
                            (this.m_sweep.c.y = t.col1.y * n.x + t.col2.y * n.y),
                            (this.m_sweep.c.x += this.m_xf.position.x),
                            (this.m_sweep.c.y += this.m_xf.position.y),
                            (t = this.m_sweep.c0),
                            (n = this.m_sweep.c),
                            (t.x = n.x),
                            (t.y = n.y),
                            (this.m_contactList = this.m_controllerList = this.m_jointList = null),
                            (this.m_controllerCount = 0),
                            (this.m_next = this.m_prev = null),
                            (t = this.m_linearVelocity),
                            (n = e.linearVelocity),
                            (t.x = n.x),
                            (t.y = n.y),
                            (this.m_angularVelocity = e.angularVelocity),
                            (this.m_linearDamping = e.linearDamping),
                            (this.m_angularDamping = e.angularDamping);
                        var a = (n = 0);
                        null == a && (a = 0),
                            null == n && (n = 0),
                            ((t = this.m_force).x = n),
                            (t.y = a),
                            (this.m_sleepTime = this.m_torque = 0),
                            (this.m_type = e.type),
                            (this.m_invMass = this.m_type == Ig.b2_dynamicBody ? (this.m_mass = 1) : (this.m_mass = 0)),
                            (this.m_invI = this.m_I = 0),
                            (this.m_inertiaScale = e.inertiaScale),
                            (this.m_userData = e.userData),
                            (this.m_fixtureList = null),
                            (this.m_fixtureCount = 0),
                            (this.groupID = e.groupID),
                            (this.origin = new td()),
                            (this.size = new td());
                    };
                    (v["box2D.dynamics.B2Body"] = Ig),
                        (Ig.__name__ = "box2D.dynamics.B2Body"),
                        (Ig.prototype = {
                            connectEdges: function (e, t, n) {
                                var a = Math.atan2(t.getDirectionVector().y, t.getDirectionVector().x);
                                (n = kd.mulFV(Math.tan(0.5 * (a - n)), t.getDirectionVector())), (n = kd.subtractVV(n, t.getNormalVector())), (n = kd.mulFV(Me.b2_toiSlop, n)), (n = kd.addVV(n, t.getVertex1()));
                                var s = kd.addVV(e.getDirectionVector(), t.getDirectionVector());
                                s.normalize();
                                var r = 0 < kd.dot(e.getDirectionVector(), t.getNormalVector());
                                return e.setNextEdge(t, n, s, r), t.setPrevEdge(e, n, s, r), a;
                            },
                            createFixture: function (e) {
                                if (1 == this.m_world.isLocked()) return null;
                                var t = new $A();
                                return (
                                    t.create(this, this.m_xf, e),
                                    0 != (this.m_flags & Ig.e_activeFlag) && t.createProxy(this.m_world.m_contactManager.m_broadPhase, this.m_xf),
                                    (t.m_next = this.m_fixtureList),
                                    (this.m_fixtureList = t),
                                    ++this.m_fixtureCount,
                                    (t.m_body = this),
                                    0 < t.m_density && this.resetMassData(),
                                    (this.m_world.m_flags |= zs.e_newFixture),
                                    t
                                );
                            },
                            createFixture2: function (e, t) {
                                null == t && (t = 0);
                                var n = new iL();
                                return (n.shape = e), (n.density = t), this.createFixture(n);
                            },
                            DestroyFixture: function (e) {
                                if (1 != this.m_world.isLocked()) {
                                    for (var t = this.m_fixtureList, n = null; null != t; ) {
                                        if (t == e) {
                                            null != n ? (n.m_next = e.m_next) : (this.m_fixtureList = e.m_next);
                                            break;
                                        }
                                        (n = t), (t = t.m_next);
                                    }
                                    for (t = this.m_contactList; null != t; ) {
                                        (n = t.contact), (t = t.next);
                                        var a = n.getFixtureA(),
                                            s = n.getFixtureB();
                                        (e != a && e != s) || this.m_world.m_contactManager.destroy(n);
                                    }
                                    0 != (this.m_flags & Ig.e_activeFlag) && e.destroyProxy(this.m_world.m_contactManager.m_broadPhase), e.destroy(), (e.m_body = null), (e.m_next = null), --this.m_fixtureCount, this.resetMassData();
                                }
                            },
                            setPositionAndAngle: function (e, t) {
                                if (1 != this.m_world.isLocked()) {
                                    this.m_xf.R.set(t);
                                    var n = this.m_xf.position;
                                    for (
                                        n.x = e.x,
                                            n.y = e.y,
                                            e = this.m_xf.R,
                                            n = this.m_sweep.localCenter,
                                            this.m_sweep.c.x = e.col1.x * n.x + e.col2.x * n.y,
                                            this.m_sweep.c.y = e.col1.y * n.x + e.col2.y * n.y,
                                            this.m_sweep.c.x += this.m_xf.position.x,
                                            this.m_sweep.c.y += this.m_xf.position.y,
                                            e = this.m_sweep.c0,
                                            n = this.m_sweep.c,
                                            e.x = n.x,
                                            e.y = n.y,
                                            this.m_sweep.a0 = this.m_sweep.a = t,
                                            t = this.m_world.m_contactManager.m_broadPhase,
                                            e = this.m_fixtureList;
                                        null != e;

                                    )
                                        e.synchronize(t, this.m_xf, this.m_xf), (e = e.m_next);
                                    this.m_world.m_contactManager.findNewContacts();
                                }
                            },
                            setPositionFast: function (e) {
                                if (1 != this.m_world.isLocked()) {
                                    var t = this.m_xf.position;
                                    (t.x = e.x),
                                        (t.y = e.y),
                                        (e = this.m_xf.R),
                                        (t = this.m_sweep.localCenter),
                                        (this.m_sweep.c.x = e.col1.x * t.x + e.col2.x * t.y),
                                        (this.m_sweep.c.y = e.col1.y * t.x + e.col2.y * t.y),
                                        (this.m_sweep.c.x += this.m_xf.position.x),
                                        (this.m_sweep.c.y += this.m_xf.position.y),
                                        (e = this.m_sweep.c0),
                                        (t = this.m_sweep.c),
                                        (e.x = t.x),
                                        (e.y = t.y);
                                }
                            },
                            setTransform: function (e) {
                                this.setPositionAndAngle(e.position, e.getAngle());
                            },
                            getTransform: function () {
                                return this.m_xf;
                            },
                            getPosition: function () {
                                return this.m_xf.position;
                            },
                            setPosition: function (e) {
                                this.setPositionAndAngle(e, this.getAngle());
                            },
                            getAngle: function () {
                                return this.m_sweep.a;
                            },
                            setAngle: function (e) {
                                this.setPositionAndAngle(this.getPosition(), e);
                            },
                            getWorldCenter: function () {
                                return this.m_sweep.c;
                            },
                            getLocalCenter: function () {
                                return this.m_sweep.localCenter;
                            },
                            setLinearVelocity: function (e) {
                                if (this.m_type != Ig.b2_staticBody) {
                                    var t = this.m_linearVelocity;
                                    (t.x = e.x), (t.y = e.y);
                                }
                            },
                            getLinearVelocity: function () {
                                return this.m_linearVelocity;
                            },
                            setAngularVelocity: function (e) {
                                this.m_type != Ig.b2_staticBody && (this.m_angularVelocity = e);
                            },
                            getAngularVelocity: function () {
                                return this.m_angularVelocity;
                            },
                            getDefinition: function () {
                                var e = new vW();
                                (e.type = this.getType()),
                                    (e.allowSleep = (this.m_flags & Ig.e_allowSleepFlag) == Ig.e_allowSleepFlag),
                                    (e.angle = this.getAngle()),
                                    (e.angularDamping = this.m_angularDamping),
                                    (e.angularVelocity = this.m_angularVelocity),
                                    (e.fixedRotation = (this.m_flags & Ig.e_fixedRotationFlag) == Ig.e_fixedRotationFlag),
                                    (e.bullet = (this.m_flags & Ig.e_bulletFlag) == Ig.e_bulletFlag),
                                    (e.awake = (this.m_flags & Ig.e_awakeFlag) == Ig.e_awakeFlag),
                                    (e.linearDamping = this.m_linearDamping);
                                var t = e.linearVelocity,
                                    n = this.getLinearVelocity();
                                return (t.x = n.x), (t.y = n.y), (e.position = this.getPosition()), (e.userData = this.getUserData()), e;
                            },
                            applyForce: function (e, t) {
                                this.m_type == Ig.b2_dynamicBody &&
                                    (0 == this.isAwake() && this.setAwake(!0), (this.m_force.x += e.x), (this.m_force.y += e.y), (this.m_torque += (t.x - this.m_sweep.c.x) * e.y - (t.y - this.m_sweep.c.y) * e.x));
                            },
                            applyTorque: function (e) {
                                this.m_type == Ig.b2_dynamicBody && (0 == this.isAwake() && this.setAwake(!0), (this.m_torque += e));
                            },
                            applyImpulse: function (e, t) {
                                this.m_type == Ig.b2_dynamicBody &&
                                    (0 == this.isAwake() && this.setAwake(!0),
                                    (this.m_linearVelocity.x += this.m_invMass * e.x),
                                    (this.m_linearVelocity.y += this.m_invMass * e.y),
                                    (this.m_angularVelocity += this.m_invI * ((t.x - this.m_sweep.c.x) * e.y - (t.y - this.m_sweep.c.y) * e.x)));
                            },
                            split: function (e) {
                                for (var t = this.getLinearVelocity().copy(), n = this.getAngularVelocity(), a = this.getWorldCenter(), s = this.m_world.createBody(this.getDefinition()), r = null, A = this.m_fixtureList; null != A; )
                                    if (e(A)) {
                                        var l = A.m_next;
                                        null != r ? (r.m_next = l) : (this.m_fixtureList = l), this.m_fixtureCount--, (A.m_next = s.m_fixtureList), (s.m_fixtureList = A), s.m_fixtureCount++, (A.m_body = s), (A = l);
                                    } else (r = A), (A = A.m_next);
                                return (
                                    this.resetMassData(),
                                    s.resetMassData(),
                                    (r = this.getWorldCenter()),
                                    (e = s.getWorldCenter()),
                                    (r = kd.addVV(t, kd.crossFV(n, kd.subtractVV(r, a)))),
                                    (t = kd.addVV(t, kd.crossFV(n, kd.subtractVV(e, a)))),
                                    this.setLinearVelocity(r),
                                    s.setLinearVelocity(t),
                                    this.setAngularVelocity(n),
                                    s.setAngularVelocity(n),
                                    this.synchronizeFixtures(),
                                    s.synchronizeFixtures(),
                                    s
                                );
                            },
                            merge: function (e) {
                                for (var t = e.m_fixtureList; null != t; ) {
                                    var n = t.m_next;
                                    e.m_fixtureCount--, (t.m_next = this.m_fixtureList), (this.m_fixtureList = t), this.m_fixtureCount++, (t.m_body = e), (t = n);
                                }
                                (this.m_fixtureCount = 0),
                                    this.getWorldCenter(),
                                    e.getWorldCenter(),
                                    this.getLinearVelocity().copy(),
                                    e.getLinearVelocity().copy(),
                                    this.getAngularVelocity(),
                                    e.getAngularVelocity(),
                                    this.resetMassData(),
                                    this.synchronizeFixtures();
                            },
                            getMass: function () {
                                return this.m_mass;
                            },
                            getInertia: function () {
                                return this.m_I;
                            },
                            getMassData: function (e) {
                                (e.mass = this.m_mass), (e.I = this.m_I), (e = e.center);
                                var t = this.m_sweep.localCenter;
                                (e.x = t.x), (e.y = t.y);
                            },
                            setMassData: function (e) {
                                if ((Me.b2Assert(0 == this.m_world.isLocked()), 1 != this.m_world.isLocked() && this.m_type == Ig.b2_dynamicBody)) {
                                    (this.m_invI = this.m_I = this.m_invMass = 0),
                                        (this.m_mass = e.mass),
                                        0 >= this.m_mass && (this.m_mass = 1),
                                        (this.m_invMass = 1 / this.m_mass),
                                        0 < e.I && 0 == (this.m_flags & Ig.e_fixedRotationFlag) && ((this.m_I = e.I - this.m_mass * (e.center.x * e.center.x + e.center.y * e.center.y)), (this.m_invI = 1 / this.m_I));
                                    var t = this.m_sweep.c.copy(),
                                        n = this.m_sweep.localCenter;
                                    (e = e.center),
                                        (n.x = e.x),
                                        (n.y = e.y),
                                        (n = this.m_sweep.c0),
                                        (e = kd.mulX(this.m_xf, this.m_sweep.localCenter)),
                                        (n.x = e.x),
                                        (n.y = e.y),
                                        (n = this.m_sweep.c),
                                        (e = this.m_sweep.c0),
                                        (n.x = e.x),
                                        (n.y = e.y),
                                        (this.m_linearVelocity.x += this.m_angularVelocity * -(this.m_sweep.c.y - t.y)),
                                        (this.m_linearVelocity.y += this.m_angularVelocity * (this.m_sweep.c.x - t.x));
                                }
                            },
                            resetMassData: function () {
                                this.m_invI = this.m_I = this.m_invMass = this.m_mass = 0;
                                var e = this.m_sweep.localCenter;
                                if (((e.x = 0), (e.y = 0), this.m_type != Ig.b2_staticBody && this.m_type != Ig.b2_kinematicBody)) {
                                    var t = td.make(0, 0);
                                    for (e = this.m_fixtureList; null != e; )
                                        if (0 != e.m_density) {
                                            var n = e.getMassData();
                                            (this.m_mass += n.mass), (t.x += n.center.x * n.mass), (t.y += n.center.y * n.mass), (this.m_I += n.I), (e = e.m_next);
                                        }
                                    0 < this.m_mass ? ((this.m_invMass = 1 / this.m_mass), (t.x *= this.m_invMass), (t.y *= this.m_invMass)) : (this.m_invMass = this.m_mass = 1),
                                        0 < this.m_I && 0 == (this.m_flags & Ig.e_fixedRotationFlag)
                                            ? ((this.m_I -= this.m_mass * (t.x * t.x + t.y * t.y)), (this.m_I *= this.m_inertiaScale), Me.b2Assert(0 < this.m_I), (this.m_invI = 1 / this.m_I))
                                            : (this.m_invI = this.m_I = 0),
                                        (e = this.m_sweep.c.copy()),
                                        ((n = this.m_sweep.localCenter).x = t.x),
                                        (n.y = t.y),
                                        (t = this.m_sweep.c0),
                                        (n = kd.mulX(this.m_xf, this.m_sweep.localCenter)),
                                        (t.x = n.x),
                                        (t.y = n.y),
                                        (t = this.m_sweep.c),
                                        (n = this.m_sweep.c0),
                                        (t.x = n.x),
                                        (t.y = n.y),
                                        (this.m_linearVelocity.x += this.m_angularVelocity * -(this.m_sweep.c.y - e.y)),
                                        (this.m_linearVelocity.y += this.m_angularVelocity * (this.m_sweep.c.x - e.x));
                                }
                            },
                            getWorldPoint: function (e) {
                                var t = this.m_xf.R;
                                return ((e = new td(t.col1.x * e.x + t.col2.x * e.y, t.col1.y * e.x + t.col2.y * e.y)).x += this.m_xf.position.x), (e.y += this.m_xf.position.y), e;
                            },
                            getWorldVector: function (e) {
                                return kd.mulMV(this.m_xf.R, e);
                            },
                            getLocalPoint: function (e) {
                                return kd.mulXT(this.m_xf, e);
                            },
                            getLocalVector: function (e) {
                                return kd.mulTMV(this.m_xf.R, e);
                            },
                            getLinearVelocityFromWorldPoint: function (e) {
                                return new td(this.m_linearVelocity.x - this.m_angularVelocity * (e.y - this.m_sweep.c.y), this.m_linearVelocity.y + this.m_angularVelocity * (e.x - this.m_sweep.c.x));
                            },
                            getLinearVelocityFromLocalPoint: function (e) {
                                var t = this.m_xf.R;
                                return (
                                    ((e = new td(t.col1.x * e.x + t.col2.x * e.y, t.col1.y * e.x + t.col2.y * e.y)).x += this.m_xf.position.x),
                                    (e.y += this.m_xf.position.y),
                                    new td(this.m_linearVelocity.x - this.m_angularVelocity * (e.y - this.m_sweep.c.y), this.m_linearVelocity.y + this.m_angularVelocity * (e.x - this.m_sweep.c.x))
                                );
                            },
                            getLinearDamping: function () {
                                return this.m_linearDamping;
                            },
                            setLinearDamping: function (e) {
                                this.m_linearDamping = e;
                            },
                            getAngularDamping: function () {
                                return this.m_angularDamping;
                            },
                            setAngularDamping: function (e) {
                                this.m_angularDamping = e;
                            },
                            setType: function (e) {
                                if (this.m_type != e)
                                    for (
                                        this.m_type = e,
                                            this.resetMassData(),
                                            this.m_type == Ig.b2_staticBody && (((e = this.m_linearVelocity).x = 0), (this.m_angularVelocity = e.y = 0)),
                                            this.setAwake(!0),
                                            (e = this.m_force).x = 0,
                                            this.m_torque = e.y = 0,
                                            e = this.m_contactList;
                                        null != e;

                                    )
                                        e.contact.flagForFiltering(), (e = e.next);
                            },
                            getType: function () {
                                return this.m_type;
                            },
                            setBullet: function (e) {
                                this.m_flags = e ? this.m_flags | Ig.e_bulletFlag : this.m_flags & ~Ig.e_bulletFlag;
                            },
                            isBullet: function () {
                                return (this.m_flags & Ig.e_bulletFlag) == Ig.e_bulletFlag;
                            },
                            setSleepingAllowed: function (e) {
                                e ? (this.m_flags |= Ig.e_allowSleepFlag) : ((this.m_flags &= ~Ig.e_allowSleepFlag), this.setAwake(!0));
                            },
                            setAwake: function (e) {
                                e
                                    ? ((this.m_flags |= Ig.e_awakeFlag), (this.m_sleepTime = 0))
                                    : ((this.m_flags &= ~Ig.e_awakeFlag), (this.m_sleepTime = 0), ((e = this.m_linearVelocity).x = 0), (this.m_angularVelocity = e.y = 0), ((e = this.m_force).x = 0), (this.m_torque = e.y = 0));
                            },
                            isAwake: function () {
                                return (this.m_flags & Ig.e_awakeFlag) == Ig.e_awakeFlag;
                            },
                            setFixedRotation: function (e) {
                                (this.m_flags = e ? this.m_flags | Ig.e_fixedRotationFlag : this.m_flags & ~Ig.e_fixedRotationFlag), this.resetMassData();
                            },
                            isFixedRotation: function () {
                                return (this.m_flags & Ig.e_fixedRotationFlag) == Ig.e_fixedRotationFlag;
                            },
                            setActive: function (e) {
                                var t;
                                if (e != this.isActive())
                                    if (e) for (this.m_flags |= Ig.e_activeFlag, e = this.m_world.m_contactManager.m_broadPhase, t = this.m_fixtureList; null != t; ) t.createProxy(e, this.m_xf), (t = t.m_next);
                                    else {
                                        for (this.m_flags &= ~Ig.e_activeFlag, e = this.m_world.m_contactManager.m_broadPhase, t = this.m_fixtureList; null != t; ) t.destroyProxy(e), (t = t.m_next);
                                        for (e = this.m_contactList; null != e; ) (t = e), (e = e.next), this.m_world.m_contactManager.destroy(t.contact);
                                        this.m_contactList = null;
                                    }
                            },
                            isActive: function () {
                                return (this.m_flags & Ig.e_activeFlag) == Ig.e_activeFlag;
                            },
                            isSleepingAllowed: function () {
                                return (this.m_flags & Ig.e_allowSleepFlag) == Ig.e_allowSleepFlag;
                            },
                            getFixtureList: function () {
                                return this.m_fixtureList;
                            },
                            getJointList: function () {
                                return this.m_jointList;
                            },
                            getControllerList: function () {
                                return this.m_controllerList;
                            },
                            getContactList: function () {
                                return this.m_contactList;
                            },
                            getNext: function () {
                                return this.m_next;
                            },
                            getUserData: function () {
                                return this.m_userData;
                            },
                            setUserData: function (e) {
                                this.m_userData = e;
                            },
                            getWorld: function () {
                                return this.m_world;
                            },
                            setFriction: function (e) {
                                for (var t = this.m_fixtureList; null != t; ) (t.m_friction = e), (t = t.m_next);
                            },
                            setBounciness: function (e) {
                                for (var t = this.m_fixtureList; null != t; ) (t.m_restitution = e), (t = t.m_next);
                            },
                            setPaused: function (e) {
                                this.m_flags = e ? this.m_flags | Ig.e_pausedFlag : this.m_flags & ~Ig.e_pausedFlag;
                            },
                            isPaused: function () {
                                return (this.m_flags & Ig.e_pausedFlag) == Ig.e_pausedFlag;
                            },
                            setIgnoreGravity: function (e) {
                                this.m_flags = e ? this.m_flags | Ig.e_ignoreGravityFlag : this.m_flags & ~Ig.e_ignoreGravityFlag;
                            },
                            isIgnoringGravity: function () {
                                return (this.m_flags & Ig.e_ignoreGravityFlag) == Ig.e_ignoreGravityFlag;
                            },
                            setAlwaysActive: function (e) {
                                this.m_flags = e ? this.m_flags | Ig.e_alwaysActiveFlag : this.m_flags & ~Ig.e_alwaysActiveFlag;
                            },
                            isAlwaysActive: function () {
                                return (this.m_flags & Ig.e_alwaysActiveFlag) == Ig.e_alwaysActiveFlag;
                            },
                            synchronizeFixtures: function () {
                                var e = Ig.s_xf1;
                                e.R.set(this.m_sweep.a0);
                                var t = e.R,
                                    n = this.m_sweep.localCenter;
                                for (
                                    e.position.x = this.m_sweep.c0.x - (t.col1.x * n.x + t.col2.x * n.y),
                                        e.position.y = this.m_sweep.c0.y - (t.col1.y * n.x + t.col2.y * n.y),
                                        t = this.m_world.m_contactManager.m_broadPhase,
                                        n = this.m_fixtureList;
                                    null != n;

                                )
                                    n.synchronize(t, e, this.m_xf), (n = n.m_next);
                            },
                            synchronizeTransform: function () {
                                this.m_xf.R.set(this.m_sweep.a);
                                var e = this.m_xf.R,
                                    t = this.m_sweep.localCenter;
                                (this.m_xf.position.x = this.m_sweep.c.x - (e.col1.x * t.x + e.col2.x * t.y)), (this.m_xf.position.y = this.m_sweep.c.y - (e.col1.y * t.x + e.col2.y * t.y));
                            },
                            shouldCollide: function (e) {
                                if (this.m_type != Ig.b2_dynamicBody && e.m_type != Ig.b2_dynamicBody) return !1;
                                for (var t = this.m_jointList; null != t; ) {
                                    if (t.other == e && 0 == t.joint.m_collideConnected) return !1;
                                    t = t.next;
                                }
                                return !0;
                            },
                            advance: function (e) {
                                this.m_sweep.advance(e), (e = this.m_sweep.c);
                                var t = this.m_sweep.c0;
                                (e.x = t.x), (e.y = t.y), (this.m_sweep.a = this.m_sweep.a0), this.synchronizeTransform();
                            },
                            m_flags: null,
                            m_type: null,
                            m_islandIndex: null,
                            m_xf: null,
                            m_sweep: null,
                            m_linearVelocity: null,
                            m_angularVelocity: null,
                            m_force: null,
                            m_torque: null,
                            m_world: null,
                            m_prev: null,
                            m_next: null,
                            m_fixtureList: null,
                            m_fixtureCount: null,
                            m_controllerList: null,
                            m_controllerCount: null,
                            m_jointList: null,
                            m_contactList: null,
                            m_mass: null,
                            m_invMass: null,
                            m_I: null,
                            m_invI: null,
                            m_inertiaScale: null,
                            m_linearDamping: null,
                            m_angularDamping: null,
                            m_sleepTime: null,
                            m_userData: null,
                            groupID: null,
                            origin: null,
                            size: null,
                            __class__: Ig,
                        });
                    var vW = function () {
                        (this.position = new td()),
                            (this.linearVelocity = new td()),
                            (this.userData = null),
                            (this.angularDamping = this.linearDamping = this.angularVelocity = this.angle = 0),
                            (this.awake = this.allowSleep = !0),
                            (this.bullet = this.fixedRotation = !1),
                            (this.type = Ig.b2_staticBody),
                            (this.active = !0),
                            (this.inertiaScale = 1),
                            (this.groupID = 3);
                    };
                    (v["box2D.dynamics.B2BodyDef"] = vW),
                        (vW.__name__ = "box2D.dynamics.B2BodyDef"),
                        (vW.prototype = {
                            type: null,
                            position: null,
                            angle: null,
                            linearVelocity: null,
                            angularVelocity: null,
                            linearDamping: null,
                            angularDamping: null,
                            allowSleep: null,
                            awake: null,
                            fixedRotation: null,
                            bullet: null,
                            active: null,
                            userData: null,
                            inertiaScale: null,
                            groupID: null,
                            ignoreGravity: null,
                            friction: null,
                            bounciness: null,
                            mass: null,
                            aMass: null,
                            __class__: vW,
                        });
                    var Y2 = function () {};
                    (v["box2D.dynamics.B2ContactFilter"] = Y2),
                        (Y2.__name__ = "box2D.dynamics.B2ContactFilter"),
                        (Y2.prototype = {
                            shouldCollide: function (e, t) {
                                var n = e.m_body.groupID,
                                    a = t.m_body.groupID;
                                return -1e3 != (e = e.groupID) && (n = e), -1e3 != (t = t.groupID) && (a = t), -1 != n && -1 != a && (-2 == n || -2 == a ? 1 != n && 1 != a : Fi.collisionMap[n][a]);
                            },
                            rayCollide: function (e, t) {
                                return null == e || this.shouldCollide(d.__cast(e, $A), t);
                            },
                            __class__: Y2,
                        });
                    var I8 = function () {
                        (this.normalImpulses = []), (this.tangentImpulses = []);
                    };
                    (v["box2D.dynamics.B2ContactImpulse"] = I8), (I8.__name__ = "box2D.dynamics.B2ContactImpulse"), (I8.prototype = { normalImpulses: null, tangentImpulses: null, __class__: I8 });
                    var xU = function () {};
                    (v["box2D.dynamics.B2ContactListener"] = xU),
                        (xU.__name__ = "box2D.dynamics.B2ContactListener"),
                        (xU.prototype = {
                            beginContact: function (e) {
                                2147483647 < xU.KEY_LOCK && (xU.KEY_LOCK = -2147483648), (e.key = xU.KEY_LOCK++);
                                var t = e.getFixtureA().getUserData(),
                                    n = e.getFixtureB().getUserData(),
                                    a = t instanceof rz,
                                    s = n instanceof rz;
                                !a || s || n instanceof yU
                                    ? !s || a || t instanceof yU
                                        ? (null != t.contacts && (t.contacts.set(e.key, e), t.contactCount++), null != n.contacts && (n.contacts.set(e.key, e), n.contactCount++))
                                        : (d.__cast(n, rz).addActor(t), null != t.regionContacts && t.regionContacts.set(e.key, e))
                                    : (d.__cast(t, rz).addActor(n), null != n.regionContacts && n.regionContacts.set(e.key, e));
                            },
                            endContact: function (e) {
                                var t = e.getFixtureA().getUserData(),
                                    n = e.getFixtureB().getUserData(),
                                    a = t instanceof rz,
                                    s = n instanceof rz;
                                if (a && !s) {
                                    for (a = !1, null != n.regionContacts && n.regionContacts.unset(e.key), e = n.regionContacts.iterator(); e.hasNext(); ) {
                                        if ((s = e.next()).getFixtureA().getUserData() instanceof rz && s.getFixtureA().getUserData() == t) {
                                            a = !0;
                                            break;
                                        }
                                        if (s.getFixtureB().getUserData() instanceof rz && s.getFixtureB().getUserData() == t) {
                                            a = !0;
                                            break;
                                        }
                                    }
                                    (a && !n.recycled) || d.__cast(t, rz).removeActor(n);
                                } else if (s && !a) {
                                    for (a = !1, null != t.regionContacts && t.regionContacts.unset(e.key), e = t.regionContacts.iterator(); e.hasNext(); ) {
                                        if ((s = e.next()).getFixtureA().getUserData() instanceof rz && s.getFixtureA().getUserData() == n) {
                                            a = !0;
                                            break;
                                        }
                                        if (s.getFixtureB().getUserData() instanceof rz && s.getFixtureB().getUserData() == n) {
                                            a = !0;
                                            break;
                                        }
                                    }
                                    (a && !t.recycled) || d.__cast(n, rz).removeActor(t);
                                } else {
                                    if (null != t.collisions) {
                                        (a = t.collisions), (s = e.key);
                                        var r = a.mH,
                                            A = r.mHash[(73856093 * s) & r.mMask];
                                        if (-1 == A) s = -2147483648;
                                        else if ((r = r.mData)[A] == s) s = r[A + 1];
                                        else {
                                            var l = -2147483648;
                                            for (A = r[A + 2]; -1 != A; ) {
                                                if (r[A] == s) {
                                                    l = r[A + 1];
                                                    break;
                                                }
                                                A = r[A + 2];
                                            }
                                            s = l;
                                        }
                                        if (null != (a = -2147483648 == s ? null : a.mVals[s])) for (t.collisions.unset(e.key), t.collisionsCount--; 0 < a.points.length; ) Qw.free(a.points.pop());
                                    }
                                    if ((null != t.contacts && t.contacts.unset(e.key) && t.contactCount--, null != n.collisions)) {
                                        if (((t = n.collisions), (a = e.key), -1 == (s = (A = t.mH).mHash[(73856093 * a) & A.mMask]))) a = -2147483648;
                                        else if ((A = A.mData)[s] == a) a = A[s + 1];
                                        else {
                                            for (r = -2147483648, s = A[s + 2]; -1 != s; ) {
                                                if (A[s] == a) {
                                                    r = A[s + 1];
                                                    break;
                                                }
                                                s = A[s + 2];
                                            }
                                            a = r;
                                        }
                                        if (null != (t = -2147483648 == a ? null : t.mVals[a])) for (n.collisions.unset(e.key), n.collisionsCount--; 0 < t.points.length; ) Qw.free(t.points.pop());
                                    }
                                    null != n.contacts && n.contacts.unset(e.key) && n.contactCount--;
                                }
                            },
                            preSolve: function (e, t) {
                                ov.preSolve(e, t);
                            },
                            postSolve: function (e, t) {},
                            __class__: xU,
                        });
                    var A4 = function () {
                        (this.m_world = null),
                            (this.m_contactCount = 0),
                            (this.m_contactFilter = Y2.b2_defaultFilter),
                            (this.m_contactListener = xU.b2_defaultListener),
                            (this.m_contactFactory = new J8(this.m_allocator)),
                            (this.m_broadPhase = new x4());
                    };
                    (v["box2D.dynamics.B2ContactManager"] = A4),
                        (A4.__name__ = "box2D.dynamics.B2ContactManager"),
                        (A4.prototype = {
                            addPair: function (e, t) {
                                var n = e.getBody(),
                                    a = t.getBody();
                                if (n != a) {
                                    for (var s = a.getContactList(); null != s; ) {
                                        if (s.other == n) {
                                            var r = s.contact.getFixtureA(),
                                                A = s.contact.getFixtureB();
                                            if ((r == e && A == t) || (r == t && A == e)) return;
                                        }
                                        s = s.next;
                                    }
                                    0 != a.shouldCollide(n) &&
                                        0 != this.m_contactFilter.shouldCollide(e, t) &&
                                        ((e = (s = this.m_contactFactory.create(e, t)).getFixtureA()),
                                        (t = s.getFixtureB()),
                                        (n = e.m_body),
                                        (a = t.m_body),
                                        (s.m_prev = null),
                                        (s.m_next = this.m_world.m_contactList),
                                        null != this.m_world.m_contactList && (this.m_world.m_contactList.m_prev = s),
                                        (this.m_world.m_contactList = s),
                                        (s.m_nodeA.contact = s),
                                        (s.m_nodeA.other = a),
                                        (s.m_nodeA.prev = null),
                                        (s.m_nodeA.next = n.m_contactList),
                                        null != n.m_contactList && (n.m_contactList.prev = s.m_nodeA),
                                        (n.m_contactList = s.m_nodeA),
                                        (s.m_nodeB.contact = s),
                                        (s.m_nodeB.other = n),
                                        (s.m_nodeB.prev = null),
                                        (s.m_nodeB.next = a.m_contactList),
                                        null != a.m_contactList && (a.m_contactList.prev = s.m_nodeB),
                                        (a.m_contactList = s.m_nodeB),
                                        ++this.m_world.m_contactCount);
                                }
                            },
                            findNewContacts: function () {
                                this.m_broadPhase.updatePairs(this);
                            },
                            destroy: function (e) {
                                var t = e.getFixtureA(),
                                    n = e.getFixtureB();
                                (t = t.getBody()),
                                    (n = n.getBody()),
                                    e.isTouching() && this.m_contactListener.endContact(e),
                                    null != e.m_prev && (e.m_prev.m_next = e.m_next),
                                    null != e.m_next && (e.m_next.m_prev = e.m_prev),
                                    e == this.m_world.m_contactList && (this.m_world.m_contactList = e.m_next),
                                    null != e.m_nodeA.prev && (e.m_nodeA.prev.next = e.m_nodeA.next),
                                    null != e.m_nodeA.next && (e.m_nodeA.next.prev = e.m_nodeA.prev),
                                    e.m_nodeA == t.m_contactList && (t.m_contactList = e.m_nodeA.next),
                                    null != e.m_nodeB.prev && (e.m_nodeB.prev.next = e.m_nodeB.next),
                                    null != e.m_nodeB.next && (e.m_nodeB.next.prev = e.m_nodeB.prev),
                                    e.m_nodeB == n.m_contactList && (n.m_contactList = e.m_nodeB.next),
                                    this.m_contactFactory.destroy(e),
                                    --this.m_contactCount;
                            },
                            collide: function () {
                                for (var e = this.m_world.m_contactList; null != e; ) {
                                    var t = e.getFixtureA(),
                                        n = e.getFixtureB(),
                                        a = t.getBody(),
                                        s = n.getBody();
                                    if (0 == a.isAwake() && 0 == s.isAwake()) e = e.getNext();
                                    else {
                                        if (0 != (e.m_flags & xl.e_filterFlag)) {
                                            if (0 == s.shouldCollide(a)) {
                                                (e = (t = e).getNext()), this.destroy(t);
                                                continue;
                                            }
                                            if (0 == this.m_contactFilter.shouldCollide(t, n)) {
                                                (e = (t = e).getNext()), this.destroy(t);
                                                continue;
                                            }
                                            e.m_flags &= ~xl.e_filterFlag;
                                        }
                                        0 == this.m_broadPhase.testOverlap(t.m_proxy, n.m_proxy) ? ((e = (t = e).getNext()), this.destroy(t)) : (e.update(this.m_contactListener), (e = e.getNext()));
                                    }
                                }
                            },
                            m_world: null,
                            m_broadPhase: null,
                            m_contactList: null,
                            m_contactCount: null,
                            m_contactFilter: null,
                            m_contactListener: null,
                            m_contactFactory: null,
                            m_allocator: null,
                            __class__: A4,
                        });
                    var gJ = function () {
                        (this.m_xformScale = this.m_fillAlpha = this.m_alpha = this.m_lineThickness = this.m_drawScale = 1), (this.m_drawFlags = 0);
                    };
                    (v["box2D.dynamics.B2DebugDraw"] = gJ),
                        (gJ.__name__ = "box2D.dynamics.B2DebugDraw"),
                        (gJ.prototype = {
                            setFlags: function (e) {
                                this.m_drawFlags = e;
                            },
                            getFlags: function () {
                                return this.m_drawFlags;
                            },
                            appendFlags: function (e) {
                                this.m_drawFlags |= e;
                            },
                            clearFlags: function (e) {
                                this.m_drawFlags &= ~e;
                            },
                            setSprite: function (e) {
                                this.m_sprite = e;
                            },
                            getSprite: function () {
                                return this.m_sprite;
                            },
                            setDrawScale: function (e) {
                                this.m_drawScale = e;
                            },
                            getDrawScale: function () {
                                return this.m_drawScale;
                            },
                            setLineThickness: function (e) {
                                this.m_lineThickness = e;
                            },
                            getLineThickness: function () {
                                return this.m_lineThickness;
                            },
                            setAlpha: function (e) {
                                this.m_alpha = e;
                            },
                            getAlpha: function () {
                                return this.m_alpha;
                            },
                            setFillAlpha: function (e) {
                                this.m_fillAlpha = e;
                            },
                            getFillAlpha: function () {
                                return this.m_fillAlpha;
                            },
                            setXFormScale: function (e) {
                                this.m_xformScale = e;
                            },
                            getXFormScale: function () {
                                return this.m_xformScale;
                            },
                            drawPolygon: function (e, t, n) {
                                for (this.m_sprite.get_graphics().lineStyle(this.m_lineThickness, n.get_color(), this.m_alpha), this.m_sprite.get_graphics().moveTo(e[0].x * this.m_drawScale, e[0].y * this.m_drawScale), n = 0; n < t; ) {
                                    var a = n++;
                                    this.m_sprite.get_graphics().lineTo(e[a].x * this.m_drawScale, e[a].y * this.m_drawScale);
                                }
                                this.m_sprite.get_graphics().lineTo(e[0].x * this.m_drawScale, e[0].y * this.m_drawScale);
                            },
                            drawSolidPolygon: function (e, t, n) {
                                for (
                                    this.m_sprite.get_graphics().lineStyle(this.m_lineThickness, n.get_color(), this.m_alpha),
                                        this.m_sprite.get_graphics().moveTo(e[0].x * this.m_drawScale, e[0].y * this.m_drawScale),
                                        this.m_sprite.get_graphics().beginFill(n.get_color(), this.m_fillAlpha),
                                        n = 0;
                                    n < t;

                                ) {
                                    var a = n++;
                                    this.m_sprite.get_graphics().lineTo(e[a].x * this.m_drawScale, e[a].y * this.m_drawScale);
                                }
                                this.m_sprite.get_graphics().lineTo(e[0].x * this.m_drawScale, e[0].y * this.m_drawScale), this.m_sprite.get_graphics().endFill();
                            },
                            drawCircle: function (e, t, n) {
                                this.m_sprite.get_graphics().lineStyle(this.m_lineThickness, n.get_color(), this.m_alpha), this.m_sprite.get_graphics().drawCircle(e.x * this.m_drawScale, e.y * this.m_drawScale, t * this.m_drawScale);
                            },
                            drawSolidCircle: function (e, t, n, a) {
                                this.m_sprite.get_graphics().lineStyle(this.m_lineThickness, a.get_color(), this.m_alpha),
                                    this.m_sprite.get_graphics().moveTo(0, 0),
                                    this.m_sprite.get_graphics().beginFill(a.get_color(), this.m_fillAlpha),
                                    this.m_sprite.get_graphics().drawCircle(e.x * this.m_drawScale, e.y * this.m_drawScale, t * this.m_drawScale),
                                    this.m_sprite.get_graphics().endFill(),
                                    this.m_sprite.get_graphics().moveTo(e.x * this.m_drawScale, e.y * this.m_drawScale),
                                    this.m_sprite.get_graphics().lineTo((e.x + n.x * t) * this.m_drawScale, (e.y + n.y * t) * this.m_drawScale);
                            },
                            drawSegment: function (e, t, n) {
                                this.m_sprite.get_graphics().lineStyle(this.m_lineThickness, n.get_color(), this.m_alpha),
                                    this.m_sprite.get_graphics().moveTo(e.x * this.m_drawScale, e.y * this.m_drawScale),
                                    this.m_sprite.get_graphics().lineTo(t.x * this.m_drawScale, t.y * this.m_drawScale);
                            },
                            drawTransform: function (e) {
                                this.m_sprite.get_graphics().lineStyle(this.m_lineThickness, 16711680, this.m_alpha),
                                    this.m_sprite.get_graphics().moveTo(e.position.x * this.m_drawScale, e.position.y * this.m_drawScale),
                                    this.m_sprite.get_graphics().lineTo((e.position.x + this.m_xformScale * e.R.col1.x) * this.m_drawScale, (e.position.y + this.m_xformScale * e.R.col1.y) * this.m_drawScale),
                                    this.m_sprite.get_graphics().lineStyle(this.m_lineThickness, 65280, this.m_alpha),
                                    this.m_sprite.get_graphics().moveTo(e.position.x * this.m_drawScale, e.position.y * this.m_drawScale),
                                    this.m_sprite.get_graphics().lineTo((e.position.x + this.m_xformScale * e.R.col2.x) * this.m_drawScale, (e.position.y + this.m_xformScale * e.R.col2.y) * this.m_drawScale);
                            },
                            m_drawFlags: null,
                            m_sprite: null,
                            m_drawScale: null,
                            m_lineThickness: null,
                            m_alpha: null,
                            m_fillAlpha: null,
                            m_xformScale: null,
                            __class__: gJ,
                        });
                    var rca = function () {};
                    (v["box2D.dynamics.B2DestructionListener"] = rca), (rca.__name__ = "box2D.dynamics.B2DestructionListener"), (rca.prototype = { sayGoodbyeJoint: function (e) {}, sayGoodbyeFixture: function (e) {}, __class__: rca });
                    var Z2 = function () {
                        (this.categoryBits = 1), (this.maskBits = 65535), (this.groupIndex = 0);
                    };
                    (v["box2D.dynamics.B2FilterData"] = Z2),
                        (Z2.__name__ = "box2D.dynamics.B2FilterData"),
                        (Z2.prototype = {
                            copy: function () {
                                var e = new Z2();
                                return (e.categoryBits = this.categoryBits), (e.maskBits = this.maskBits), (e.groupIndex = this.groupIndex), e;
                            },
                            categoryBits: null,
                            maskBits: null,
                            groupIndex: null,
                            __class__: Z2,
                        });
                    var $A = function () {
                        (this.m_filter = new Z2()), (this.m_aabb = new $h()), (this.m_shape = this.m_next = this.m_body = this.m_userData = null), (this.m_restitution = this.m_friction = this.m_density = 0), (this.groupID = 3);
                    };
                    (v["box2D.dynamics.B2Fixture"] = $A),
                        ($A.__name__ = "box2D.dynamics.B2Fixture"),
                        ($A.prototype = {
                            getType: function () {
                                return this.m_shape.getType();
                            },
                            getShape: function () {
                                return this.m_shape;
                            },
                            setSensor: function (e) {
                                if (this.m_isSensor != e && ((this.m_isSensor = e), null != this.m_body))
                                    for (e = this.m_body.getContactList(); null != e; ) {
                                        var t = e.contact,
                                            n = t.getFixtureA(),
                                            a = t.getFixtureB();
                                        (n != this && a != this) || t.setSensor(n.isSensor() || a.isSensor()), (e = e.next);
                                    }
                            },
                            isSensor: function () {
                                return this.m_isSensor;
                            },
                            setFilterData: function (e) {
                                if (((this.m_filter = e.copy()), null == this.m_body))
                                    for (e = this.m_body.getContactList(); null != e; ) {
                                        var t = e.contact,
                                            n = t.getFixtureA(),
                                            a = t.getFixtureB();
                                        (n != this && a != this) || t.flagForFiltering(), (e = e.next);
                                    }
                            },
                            getFilterData: function () {
                                return this.m_filter.copy();
                            },
                            getBody: function () {
                                return this.m_body;
                            },
                            getNext: function () {
                                return this.m_next;
                            },
                            getUserData: function () {
                                return this.m_userData;
                            },
                            SetUserData: function (e) {
                                this.m_userData = e;
                            },
                            testPoint: function (e) {
                                return this.m_shape.testPoint(this.m_body.getTransform(), e);
                            },
                            rayCast: function (e, t) {
                                return this.m_shape.rayCast(e, t, this.m_body.getTransform());
                            },
                            getMassData: function (e) {
                                return null == e && (e = new X2()), this.m_shape.computeMass(e, this.m_density), e;
                            },
                            setDensity: function (e) {
                                this.m_density = e;
                            },
                            getDensity: function () {
                                return this.m_density;
                            },
                            getFriction: function () {
                                return this.m_friction;
                            },
                            setFriction: function (e) {
                                this.m_friction = e;
                            },
                            getRestitution: function () {
                                return this.m_restitution;
                            },
                            setRestitution: function (e) {
                                this.m_restitution = e;
                            },
                            getAABB: function () {
                                return this.m_aabb;
                            },
                            create: function (e, t, n) {
                                (this.m_userData = n.userData),
                                    (this.m_friction = n.friction),
                                    (this.m_restitution = n.restitution),
                                    (this.m_body = e),
                                    (this.m_next = null),
                                    (this.m_filter = n.filter.copy()),
                                    (this.m_isSensor = n.isSensor),
                                    (this.m_shape = n.shape.copy()),
                                    (this.m_density = n.density),
                                    (this.groupID = n.groupID);
                            },
                            destroy: function () {
                                this.m_shape = null;
                            },
                            createProxy: function (e, t) {
                                this.m_shape.computeAABB(this.m_aabb, t), (this.m_proxy = e.createProxy(this.m_aabb, this));
                            },
                            destroyProxy: function (e) {
                                null != this.m_proxy && (e.destroyProxy(this.m_proxy), (this.m_proxy = null));
                            },
                            synchronize: function (e, t, n) {
                                null != this.m_proxy &&
                                    (this.m_shape.computeAABB($A.tempAABB1, t),
                                    this.m_shape.computeAABB($A.tempAABB2, n),
                                    this.m_aabb.combine($A.tempAABB1, $A.tempAABB2),
                                    (t = kd.subtractVVPooled(n.position, t.position)),
                                    e.moveProxy(this.m_proxy, this.m_aabb, t));
                            },
                            m_massData: null,
                            m_aabb: null,
                            m_density: null,
                            m_next: null,
                            m_body: null,
                            m_shape: null,
                            m_friction: null,
                            m_restitution: null,
                            m_proxy: null,
                            m_filter: null,
                            m_isSensor: null,
                            m_userData: null,
                            groupID: null,
                            __class__: $A,
                        });
                    var iL = function () {
                        (this.filter = new Z2()),
                            (this.userData = this.shape = null),
                            (this.friction = 0.2),
                            (this.density = this.restitution = 0),
                            (this.filter.categoryBits = 1),
                            (this.filter.maskBits = 65535),
                            (this.filter.groupIndex = 0),
                            (this.isSensor = !1),
                            (this.groupID = 3);
                    };
                    (v["box2D.dynamics.B2FixtureDef"] = iL),
                        (iL.__name__ = "box2D.dynamics.B2FixtureDef"),
                        (iL.prototype = { shape: null, userData: null, friction: null, restitution: null, density: null, isSensor: null, filter: null, groupID: null, __class__: iL });
                    var KV = function () {
                        (this.m_bodies = []), (this.m_contacts = []), (this.m_joints = []);
                    };
                    (v["box2D.dynamics.B2Island"] = KV),
                        (KV.__name__ = "box2D.dynamics.B2Island"),
                        (KV.prototype = {
                            initialize: function (e, t, n, a, s, r) {
                                for (
                                    this.m_bodyCapacity = e,
                                        this.m_contactCapacity = t,
                                        this.m_jointCapacity = n,
                                        this.m_jointCount = this.m_contactCount = this.m_bodyCount = 0,
                                        this.m_allocator = a,
                                        this.m_listener = s,
                                        this.m_contactSolver = r,
                                        a = this.m_bodies.length;
                                    a < e;

                                )
                                    (s = a++), (this.m_bodies[s] = null);
                                for (e = this.m_contacts.length; e < t; ) (a = e++), (this.m_contacts[a] = null);
                                for (t = this.m_joints.length; t < n; ) (e = t++), (this.m_joints[e] = null);
                            },
                            clear: function () {
                                this.m_jointCount = this.m_contactCount = this.m_bodyCount = 0;
                            },
                            solve: function (e, t, n) {
                                for (var a, s = 0, r = this.m_bodyCount; s < r; )
                                    (a = s++),
                                        (a = this.m_bodies[a]).getType() == Ig.b2_dynamicBody &&
                                            (a.isIgnoringGravity()
                                                ? ((a.m_linearVelocity.x += e.dt * a.m_invMass * a.m_force.x), (a.m_linearVelocity.y += e.dt * a.m_invMass * a.m_force.y))
                                                : ((a.m_linearVelocity.x += e.dt * (t.x + a.m_invMass * a.m_force.x)), (a.m_linearVelocity.y += e.dt * (t.y + a.m_invMass * a.m_force.y))),
                                            (a.m_angularVelocity += e.dt * a.m_invI * a.m_torque),
                                            a.m_linearVelocity.multiply(kd.clamp(1 - e.dt * a.m_linearDamping, 0, 1)),
                                            (a.m_angularVelocity *= kd.clamp(1 - e.dt * a.m_angularDamping, 0, 1)));
                                for (this.m_contactSolver.initialize(e, this.m_contacts, this.m_contactCount, this.m_allocator), (t = this.m_contactSolver).initVelocityConstraints(e), s = 0, r = this.m_jointCount; s < r; )
                                    (a = s++), (a = this.m_joints[a]).initVelocityConstraints(e);
                                for (s = 0, r = e.velocityIterations; s < r; ) {
                                    s++;
                                    for (var A = 0, l = this.m_jointCount; A < l; ) (a = A++), (a = this.m_joints[a]).solveVelocityConstraints(e);
                                    t.solveVelocityConstraints();
                                }
                                for (s = 0, r = this.m_jointCount; s < r; ) (a = s++), (a = this.m_joints[a]).finalizeVelocityConstraints();
                                for (t.finalizeVelocityConstraints(), s = 0, r = this.m_bodyCount; s < r; )
                                    (a = s++),
                                        (a = this.m_bodies[a]).getType() != Ig.b2_staticBody &&
                                            ((A = e.dt * a.m_linearVelocity.x) * A + (l = e.dt * a.m_linearVelocity.y) * l > Me.b2_maxTranslationSquared &&
                                                (a.m_linearVelocity.normalize(),
                                                (a.m_linearVelocity.x = a.m_linearVelocity.x * Me.b2_maxTranslation * e.inv_dt),
                                                (a.m_linearVelocity.y = a.m_linearVelocity.y * Me.b2_maxTranslation * e.inv_dt)),
                                            (A = e.dt * a.m_angularVelocity) * A > Me.b2_maxRotationSquared && (a.m_angularVelocity = 0 > a.m_angularVelocity ? -Me.b2_maxRotation * e.inv_dt : Me.b2_maxRotation * e.inv_dt),
                                            (A = a.m_sweep.c0),
                                            (l = a.m_sweep.c),
                                            (A.x = l.x),
                                            (A.y = l.y),
                                            (a.m_sweep.a0 = a.m_sweep.a),
                                            (a.m_sweep.c.x += e.dt * a.m_linearVelocity.x),
                                            (a.m_sweep.c.y += e.dt * a.m_linearVelocity.y),
                                            (a.m_sweep.a += e.dt * a.m_angularVelocity),
                                            a.synchronizeTransform());
                                for (s = 0, r = e.positionIterations; s < r; ) {
                                    s++, (A = t.solvePositionConstraints(Me.b2_contactBaumgarte)), (l = !0);
                                    for (var o = 0, i = this.m_jointCount; o < i; ) (a = o++), (a = (a = this.m_joints[a]).solvePositionConstraints(Me.b2_contactBaumgarte)), (l = l && a);
                                    if (A && l) break;
                                }
                                if ((this.report(t.m_constraints), n)) {
                                    for (n = Number.MAX_VALUE, t = Me.b2_linearSleepTolerance * Me.b2_linearSleepTolerance, s = Me.b2_angularSleepTolerance * Me.b2_angularSleepTolerance, r = 0, A = this.m_bodyCount; r < A; )
                                        (a = r++),
                                            (a = this.m_bodies[a]).getType() != Ig.b2_staticBody &&
                                                (0 == (a.m_flags & Ig.e_allowSleepFlag) && (n = a.m_sleepTime = 0),
                                                0 == (a.m_flags & Ig.e_allowSleepFlag) || a.m_angularVelocity * a.m_angularVelocity > s || kd.dot(a.m_linearVelocity, a.m_linearVelocity) > t
                                                    ? (n = a.m_sleepTime = 0)
                                                    : ((a.m_sleepTime += e.dt), (n = kd.min(n, a.m_sleepTime))));
                                    if (n >= Me.b2_timeToSleep) for (e = 0, n = this.m_bodyCount; e < n; ) (t = e++), (a = this.m_bodies[t]).setAwake(!1);
                                }
                            },
                            solveTOI: function (e) {
                                this.m_contactSolver.initialize(e, this.m_contacts, this.m_contactCount, this.m_allocator);
                                for (var t = this.m_contactSolver, n = 0, a = this.m_jointCount; n < a; ) {
                                    var s = n++;
                                    this.m_joints[s].initVelocityConstraints(e);
                                }
                                for (n = 0, a = e.velocityIterations; n < a; ) {
                                    n++, t.solveVelocityConstraints(), (s = 0);
                                    for (var r = this.m_jointCount; s < r; ) {
                                        var A = s++;
                                        this.m_joints[A].solveVelocityConstraints(e);
                                    }
                                }
                                for (n = 0, a = this.m_bodyCount; n < a; )
                                    (s = n++),
                                        (s = this.m_bodies[s]).getType() != Ig.b2_staticBody &&
                                            ((r = e.dt * s.m_linearVelocity.x) * r + (A = e.dt * s.m_linearVelocity.y) * A > Me.b2_maxTranslationSquared &&
                                                (s.m_linearVelocity.normalize(),
                                                (s.m_linearVelocity.x = s.m_linearVelocity.x * Me.b2_maxTranslation * e.inv_dt),
                                                (s.m_linearVelocity.y = s.m_linearVelocity.y * Me.b2_maxTranslation * e.inv_dt)),
                                            (r = e.dt * s.m_angularVelocity) * r > Me.b2_maxRotationSquared && (s.m_angularVelocity = 0 > s.m_angularVelocity ? -Me.b2_maxRotation * e.inv_dt : Me.b2_maxRotation * e.inv_dt),
                                            (r = s.m_sweep.c0),
                                            (A = s.m_sweep.c),
                                            (r.x = A.x),
                                            (r.y = A.y),
                                            (s.m_sweep.a0 = s.m_sweep.a),
                                            (s.m_sweep.c.x += e.dt * s.m_linearVelocity.x),
                                            (s.m_sweep.c.y += e.dt * s.m_linearVelocity.y),
                                            (s.m_sweep.a += e.dt * s.m_angularVelocity),
                                            s.synchronizeTransform());
                                for (n = 0, e = e.positionIterations; n < e; ) {
                                    for (n++, a = t.solvePositionConstraints(0.75), s = !0, r = 0, A = this.m_jointCount; r < A; ) {
                                        var l = r++;
                                        (l = this.m_joints[l].solvePositionConstraints(Me.b2_contactBaumgarte)), (s = s && l);
                                    }
                                    if (a && s) break;
                                }
                                this.report(t.m_constraints);
                            },
                            report: function (e) {
                                if (null != this.m_listener)
                                    for (var t = 0, n = this.m_contactCount; t < n; ) {
                                        for (var a = t++, s = this.m_contacts[a], r = 0, A = (a = e[a]).pointCount; r < A; ) {
                                            var l = r++;
                                            (KV.s_impulse.normalImpulses[l] = a.points[l].normalImpulse), (KV.s_impulse.tangentImpulses[l] = a.points[l].tangentImpulse);
                                        }
                                        this.m_listener.postSolve(s, KV.s_impulse);
                                    }
                            },
                            addBody: function (e) {
                                (e.m_islandIndex = this.m_bodyCount), (this.m_bodies[this.m_bodyCount++] = e);
                            },
                            addContact: function (e) {
                                this.m_contacts[this.m_contactCount++] = e;
                            },
                            addJoint: function (e) {
                                this.m_joints[this.m_jointCount++] = e;
                            },
                            m_allocator: null,
                            m_listener: null,
                            m_contactSolver: null,
                            m_bodies: null,
                            m_contacts: null,
                            m_joints: null,
                            m_bodyCount: null,
                            m_jointCount: null,
                            m_contactCount: null,
                            m_bodyCapacity: null,
                            m_contactCapacity: null,
                            m_jointCapacity: null,
                            __class__: KV,
                        });
                    var $2 = function () {};
                    (v["box2D.dynamics.B2TimeStep"] = $2),
                        ($2.__name__ = "box2D.dynamics.B2TimeStep"),
                        ($2.prototype = {
                            set: function (e) {
                                (this.dt = e.dt), (this.inv_dt = e.inv_dt), (this.positionIterations = e.positionIterations), (this.velocityIterations = e.velocityIterations), (this.warmStarting = e.warmStarting);
                            },
                            dt: null,
                            inv_dt: null,
                            dtRatio: null,
                            velocityIterations: null,
                            positionIterations: null,
                            warmStarting: null,
                            __class__: $2,
                        });
                    var zs = function (e, t) {
                        (this.pointQueryCallback = new B4()),
                            (this.shapeQueryCallback = new C4()),
                            (this.aabbQueryCallback = new D4()),
                            (this.s_stack = []),
                            (this.m_contactManager = new A4()),
                            (this.m_contactSolver = new zE()),
                            (this.m_island = new KV()),
                            (this.m_controllerList = this.m_jointList = this.m_contactList = this.m_bodyList = this.m_debugDraw = this.m_destructionListener = null),
                            (this.m_controllerCount = this.m_jointCount = this.m_contactCount = this.m_bodyCount = 0),
                            (zs.m_warmStarting = !0),
                            (zs.m_continuousPhysics = !1),
                            (this.m_allowSleep = t),
                            (this.m_gravity = e),
                            (this.m_flags = this.m_inv_dt0 = 0),
                            (this.m_contactManager.m_world = this),
                            (e = new vW()),
                            (this.m_groundBody = this.createBody(e));
                    };
                    (v["box2D.dynamics.B2World"] = zs),
                        (zs.__name__ = "box2D.dynamics.B2World"),
                        (zs.prototype = {
                            setDestructionListener: function (e) {
                                this.m_destructionListener = e;
                            },
                            setContactFilter: function (e) {
                                this.m_contactManager.m_contactFilter = e;
                            },
                            setContactListener: function (e) {
                                this.m_contactManager.m_contactListener = e;
                            },
                            setDebugDraw: function (e) {
                                this.m_debugDraw = e;
                            },
                            setBroadPhase: function (e) {
                                var t = this.m_contactManager.m_broadPhase;
                                this.m_contactManager.m_broadPhase = e;
                                for (var n = this.m_bodyList; null != n; ) {
                                    for (var a = n.m_fixtureList; null != a; ) (a.m_proxy = e.createProxy(t.getFatAABB(a.m_proxy), a)), (a = a.m_next);
                                    n = n.m_next;
                                }
                            },
                            validate: function () {
                                this.m_contactManager.m_broadPhase.validate();
                            },
                            getProxyCount: function () {
                                return this.m_contactManager.m_broadPhase.getProxyCount();
                            },
                            createBody: function (e) {
                                return 1 == this.isLocked()
                                    ? null
                                    : (((e = new Ig(e, this)).m_prev = null), (e.m_next = this.m_bodyList), null != this.m_bodyList && (this.m_bodyList.m_prev = e), (this.m_bodyList = e), ++this.m_bodyCount, e);
                            },
                            destroyBody: function (e) {
                                if (1 != this.isLocked()) {
                                    for (var t = e.m_jointList; null != t; ) {
                                        var n = t;
                                        (t = t.next), null != this.m_destructionListener && this.m_destructionListener.sayGoodbyeJoint(n.joint), this.destroyJoint(n.joint);
                                    }
                                    for (t = e.m_controllerList; null != t; ) (n = t), (t = t.nextController), n.controller.removeBody(e);
                                    for (t = e.m_contactList; null != t; ) (n = t), (t = t.next), this.m_contactManager.destroy(n.contact);
                                    for (e.m_contactList = null, t = e.m_fixtureList; null != t; )
                                        (n = t), (t = t.m_next), null != this.m_destructionListener && this.m_destructionListener.sayGoodbyeFixture(n), n.destroyProxy(this.m_contactManager.m_broadPhase), n.destroy();
                                    (e.m_fixtureList = null),
                                        (e.m_fixtureCount = 0),
                                        null != e.m_prev && (e.m_prev.m_next = e.m_next),
                                        null != e.m_next && (e.m_next.m_prev = e.m_prev),
                                        e == this.m_bodyList && (this.m_bodyList = e.m_next),
                                        --this.m_bodyCount;
                                }
                            },
                            createJoint: function (e) {
                                var t = Or.create(e, null);
                                (t.m_prev = null),
                                    (t.m_next = this.m_jointList),
                                    null != this.m_jointList && (this.m_jointList.m_prev = t),
                                    (this.m_jointList = t),
                                    ++this.m_jointCount,
                                    (t.m_edgeA.joint = t),
                                    (t.m_edgeA.other = t.m_bodyB),
                                    (t.m_edgeA.prev = null),
                                    (t.m_edgeA.next = t.m_bodyA.m_jointList),
                                    null != t.m_bodyA.m_jointList && (t.m_bodyA.m_jointList.prev = t.m_edgeA),
                                    (t.m_bodyA.m_jointList = t.m_edgeA),
                                    (t.m_edgeB.joint = t),
                                    (t.m_edgeB.other = t.m_bodyA),
                                    (t.m_edgeB.prev = null),
                                    (t.m_edgeB.next = t.m_bodyB.m_jointList),
                                    null != t.m_bodyB.m_jointList && (t.m_bodyB.m_jointList.prev = t.m_edgeB),
                                    (t.m_bodyB.m_jointList = t.m_edgeB);
                                var n = e.bodyA,
                                    a = e.bodyB;
                                if (0 == e.collideConnected) for (e = a.getContactList(); null != e; ) e.other == n && e.contact.flagForFiltering(), (e = e.next);
                                return t;
                            },
                            destroyJoint: function (e) {
                                var t = e.m_collideConnected;
                                null != e.m_prev && (e.m_prev.m_next = e.m_next), null != e.m_next && (e.m_next.m_prev = e.m_prev), e == this.m_jointList && (this.m_jointList = e.m_next);
                                var n = e.m_bodyA,
                                    a = e.m_bodyB;
                                if (
                                    (n.setAwake(!0),
                                    a.setAwake(!0),
                                    null != e.m_edgeA.prev && (e.m_edgeA.prev.next = e.m_edgeA.next),
                                    null != e.m_edgeA.next && (e.m_edgeA.next.prev = e.m_edgeA.prev),
                                    e.m_edgeA == n.m_jointList && (n.m_jointList = e.m_edgeA.next),
                                    (e.m_edgeA.prev = null),
                                    (e.m_edgeA.next = null),
                                    null != e.m_edgeB.prev && (e.m_edgeB.prev.next = e.m_edgeB.next),
                                    null != e.m_edgeB.next && (e.m_edgeB.next.prev = e.m_edgeB.prev),
                                    e.m_edgeB == a.m_jointList && (a.m_jointList = e.m_edgeB.next),
                                    (e.m_edgeB.prev = null),
                                    (e.m_edgeB.next = null),
                                    Or.destroy(e, null),
                                    --this.m_jointCount,
                                    0 == t)
                                )
                                    for (e = a.getContactList(); null != e; ) e.other == n && e.contact.flagForFiltering(), (e = e.next);
                            },
                            addController: function (e) {
                                return (e.m_next = this.m_controllerList), (e.m_prev = null), (this.m_controllerList = e), (e.m_world = this), this.m_controllerCount++, e;
                            },
                            removeController: function (e) {
                                null != e.m_prev && (e.m_prev.m_next = e.m_next), null != e.m_next && (e.m_next.m_prev = e.m_prev), this.m_controllerList == e && (this.m_controllerList = e.m_next), this.m_controllerCount--;
                            },
                            createController: function (e) {
                                if (e.m_world != this) throw new Gc("Controller can only be a member of one world");
                                return (e.m_next = this.m_controllerList), (e.m_prev = null), null != this.m_controllerList && (this.m_controllerList.m_prev = e), (this.m_controllerList = e), ++this.m_controllerCount, (e.m_world = this), e;
                            },
                            destroyController: function (e) {
                                e.clear(), null != e.m_next && (e.m_next.m_prev = e.m_prev), null != e.m_prev && (e.m_prev.m_next = e.m_next), e == this.m_controllerList && (this.m_controllerList = e.m_next), --this.m_controllerCount;
                            },
                            setWarmStarting: function (e) {
                                zs.m_warmStarting = e;
                            },
                            setContinuousPhysics: function (e) {
                                zs.m_continuousPhysics = e;
                            },
                            getBodyCount: function () {
                                return this.m_bodyCount;
                            },
                            getJointCount: function () {
                                return this.m_jointCount;
                            },
                            getContactCount: function () {
                                return this.m_contactCount;
                            },
                            setGravity: function (e) {
                                this.m_gravity = e;
                            },
                            getGravity: function () {
                                return this.m_gravity;
                            },
                            getGroundBody: function () {
                                return this.m_groundBody;
                            },
                            step: function (e, t, n) {
                                td.freePool(), 0 != (this.m_flags & zs.e_newFixture) && (this.m_contactManager.findNewContacts(), (this.m_flags &= ~zs.e_newFixture)), (this.m_flags |= zs.e_locked);
                                var a = zs.s_timestep2;
                                (a.dt = e),
                                    (a.velocityIterations = t),
                                    (a.positionIterations = n),
                                    (a.inv_dt = 0 < e ? 1 / e : 0),
                                    (a.dtRatio = this.m_inv_dt0 * e),
                                    (a.warmStarting = zs.m_warmStarting),
                                    this.m_contactManager.collide(),
                                    0 < a.dt && this.solve(a),
                                    zs.m_continuousPhysics && 0 < a.dt && this.solveTOI(a),
                                    0 < a.dt && (this.m_inv_dt0 = a.inv_dt),
                                    (this.m_flags &= ~zs.e_locked);
                            },
                            clearForces: function () {
                                for (var e = this.m_bodyList; null != e; ) {
                                    var t = e.m_force;
                                    (t.x = 0), (t.y = 0), (e.m_torque = 0), (e = e.m_next);
                                }
                            },
                            drawDebugData: function () {
                                if (null != this.m_debugDraw) {
                                    this.m_debugDraw.m_sprite.get_graphics().clear();
                                    var e,
                                        t,
                                        n = this.m_debugDraw.getFlags();
                                    new td(), new td(), new td(), new $h(), new $h(), new td(), new td(), new td(), new td();
                                    var a = new z4(0, 0, 0);
                                    if (0 != (n & gJ.e_shapeBit))
                                        for (e = this.m_bodyList; null != e; ) {
                                            var s = e.m_xf;
                                            for (t = e.getFixtureList(); null != t; ) {
                                                var r = t.getShape();
                                                0 == e.isActive()
                                                    ? a.set(0.5, 0.5, 0.3)
                                                    : e.getType() == Ig.b2_staticBody
                                                    ? a.set(0.5, 0.9, 0.5)
                                                    : e.getType() == Ig.b2_kinematicBody
                                                    ? a.set(0.5, 0.5, 0.9)
                                                    : 0 == e.isAwake()
                                                    ? a.set(0.6, 0.6, 0.6)
                                                    : a.set(0.9, 0.7, 0.7),
                                                    this.drawShape(r, s, a),
                                                    (t = t.m_next);
                                            }
                                            e = e.m_next;
                                        }
                                    if (0 != (n & gJ.e_jointBit)) for (e = this.m_jointList; null != e; ) this.drawJoint(e), (e = e.m_next);
                                    if (0 != (n & gJ.e_controllerBit)) for (e = this.m_controllerList; null != e; ) e.draw(this.m_debugDraw), (e = e.m_next);
                                    if (0 != (n & gJ.e_pairBit))
                                        for (a.set(0.3, 0.9, 0.9), e = this.m_contactManager.m_contactList; null != e; )
                                            (r = e.getFixtureA()), (t = e.getFixtureB()), (r = r.getAABB().getCenter()), (t = t.getAABB().getCenter()), this.m_debugDraw.drawSegment(r, t, a), (e = e.getNext());
                                    if (0 != (n & gJ.e_aabbBit))
                                        for (r = this.m_contactManager.m_broadPhase, s = [new td(), new td(), new td(), new td()], e = this.m_bodyList; null != e; ) {
                                            if (0 != e.isActive())
                                                for (t = e.getFixtureList(); null != t; ) {
                                                    var A = r.getFatAABB(t.m_proxy),
                                                        l = s[0],
                                                        o = A.lowerBound.x,
                                                        i = A.lowerBound.y;
                                                    null == i && (i = 0),
                                                        null == o && (o = 0),
                                                        (l.x = o),
                                                        (l.y = i),
                                                        (l = s[1]),
                                                        (o = A.upperBound.x),
                                                        null == (i = A.lowerBound.y) && (i = 0),
                                                        null == o && (o = 0),
                                                        (l.x = o),
                                                        (l.y = i),
                                                        (l = s[2]),
                                                        (o = A.upperBound.x),
                                                        null == (i = A.upperBound.y) && (i = 0),
                                                        null == o && (o = 0),
                                                        (l.x = o),
                                                        (l.y = i),
                                                        (l = s[3]),
                                                        (o = A.lowerBound.x),
                                                        null == (A = A.upperBound.y) && (A = 0),
                                                        null == o && (o = 0),
                                                        (l.x = o),
                                                        (l.y = A),
                                                        this.m_debugDraw.drawPolygon(s, 4, a),
                                                        (t = t.getNext());
                                                }
                                            e = e.getNext();
                                        }
                                    if (0 != (n & gJ.e_centerOfMassBit)) for (e = this.m_bodyList; null != e; ) ((s = zs.s_xf).R = e.m_xf.R), (s.position = e.getWorldCenter()), this.m_debugDraw.drawTransform(s), (e = e.m_next);
                                }
                            },
                            queryAABB: function (e, t) {
                                (this.aabbQueryCallback.broadPhase = this.m_contactManager.m_broadPhase), (this.aabbQueryCallback.callbackMethod = e), this.m_contactManager.m_broadPhase.query(this.aabbQueryCallback, t);
                            },
                            queryShape: function (e, t, n) {
                                (this.shapeQueryCallback.broadPhase = this.m_contactManager.m_broadPhase),
                                    (this.shapeQueryCallback.callbackMethod = e),
                                    null == n && (n = new wJ()).setIdentity(),
                                    (this.shapeQueryCallback.transform = n),
                                    (e = new $h()),
                                    t.computeAABB(e, n),
                                    (this.shapeQueryCallback.shape = t),
                                    this.m_contactManager.m_broadPhase.query(this.shapeQueryCallback, e);
                            },
                            queryPoint: function (e, t) {
                                (this.pointQueryCallback.broadPhase = this.m_contactManager.m_broadPhase), (this.pointQueryCallback.callbackMethod = e), (this.pointQueryCallback.p = t);
                                var n = (e = new $h()).lowerBound,
                                    a = t.x - Me.b2_linearSlop,
                                    s = t.y - Me.b2_linearSlop;
                                null == s && (s = 0),
                                    null == a && (a = 0),
                                    (n.x = a),
                                    (n.y = s),
                                    (n = e.upperBound),
                                    (a = t.x + Me.b2_linearSlop),
                                    null == (t = t.y + Me.b2_linearSlop) && (t = 0),
                                    null == a && (a = 0),
                                    (n.x = a),
                                    (n.y = t),
                                    this.m_contactManager.m_broadPhase.query(this.pointQueryCallback, e);
                            },
                            rayCast: function (e, t, n) {
                                var a = this.m_contactManager.m_broadPhase,
                                    s = new G8(),
                                    r = new v4(t, n);
                                a.rayCast(function (r, A) {
                                    if (((A = a.getUserData(A)), (A = d.__cast(A, $A)).rayCast(s, r))) {
                                        r = s.fraction;
                                        var l = new td((1 - r) * t.x + r * n.x, (1 - r) * t.y + r * n.y);
                                        return e(A, l, s.normal, r);
                                    }
                                    return r.maxFraction;
                                }, r);
                            },
                            rayCastOne: function (e, t) {
                                var n;
                                return (
                                    this.rayCast(
                                        function (e, t, a, s) {
                                            return (n = e), s;
                                        },
                                        e,
                                        t
                                    ),
                                    n
                                );
                            },
                            rayCastAll: function (e, t) {
                                var n = [];
                                return (
                                    this.rayCast(
                                        function (e, t, a, s) {
                                            return (n[n.length] = e), 1;
                                        },
                                        e,
                                        t
                                    ),
                                    n
                                );
                            },
                            getBodyList: function () {
                                return this.m_bodyList;
                            },
                            getJointList: function () {
                                return this.m_jointList;
                            },
                            getContactList: function () {
                                return this.m_contactList;
                            },
                            isLocked: function () {
                                return 0 < (this.m_flags & zs.e_locked);
                            },
                            s_stack: null,
                            solve: function (e) {
                                for (var t = this.m_controllerList; null != t; ) t.step(e), (t = t.m_next);
                                var n = this.m_island;
                                n.initialize(this.m_bodyCount, this.m_contactCount, this.m_jointCount, null, this.m_contactManager.m_contactListener, this.m_contactSolver);
                                for (var a = this.m_bodyList; null != a; ) (a.m_flags &= ~Ig.e_islandFlag), (a = a.m_next);
                                for (t = this.m_contactList; null != t; ) (t.m_flags &= ~xl.e_islandFlag), (t = t.m_next);
                                for (t = this.m_jointList; null != t; ) (t.m_islandFlag = !1), (t = t.m_next);
                                t = this.s_stack;
                                for (var s = this.m_bodyList; null != s; ) {
                                    if (
                                        0 == (s.m_flags & Ig.e_islandFlag) &&
                                        (!s.isActive() &&
                                            !s.isAlwaysActive() &&
                                            s.m_xf.position.x + s.origin.x + s.size.x >= this.m_aabb.lowerBound.x &&
                                            s.m_xf.position.y + s.origin.y + s.size.y >= this.m_aabb.lowerBound.y &&
                                            s.m_xf.position.x + s.origin.x <= this.m_aabb.upperBound.x &&
                                            s.m_xf.position.y + s.origin.y <= this.m_aabb.upperBound.y &&
                                            (s.setActive(!0), s.setAwake(!0)),
                                        0 != s.isAwake() && 0 != s.isActive() && !s.isPaused() && s.getType() != Ig.b2_staticBody)
                                    )
                                        if (
                                            s.isActive() &&
                                            !s.isAlwaysActive() &&
                                            (s.m_xf.position.x + s.origin.x + s.size.x < this.m_aabb.lowerBound.x ||
                                                s.m_xf.position.y + s.origin.y + s.size.y < this.m_aabb.lowerBound.y ||
                                                s.m_xf.position.x + s.origin.x > this.m_aabb.upperBound.x ||
                                                s.m_xf.position.y + s.origin.y > this.m_aabb.upperBound.y)
                                        )
                                            s.setAwake(!1), s.setActive(!1);
                                        else {
                                            n.clear();
                                            var r = 0;
                                            for (t[r++] = s, s.m_flags |= Ig.e_islandFlag; 0 < r; )
                                                if (((a = t[--r]), n.addBody(a), 0 == a.isAwake() && a.setAwake(!0), a.getType() != Ig.b2_staticBody)) {
                                                    for (var A, l = a.m_contactList; null != l; )
                                                        0 == (l.contact.m_flags & xl.e_islandFlag) &&
                                                            1 != l.contact.isSensor() &&
                                                            0 != l.contact.isEnabled() &&
                                                            0 != l.contact.isTouching() &&
                                                            (n.addContact(l.contact), (l.contact.m_flags |= xl.e_islandFlag), 0 == ((A = l.other).m_flags & Ig.e_islandFlag) && ((t[r++] = A), (A.m_flags |= Ig.e_islandFlag))),
                                                            (l = l.next);
                                                    for (a = a.m_jointList; null != a; )
                                                        1 != a.joint.m_islandFlag &&
                                                            0 != (A = a.other).isActive() &&
                                                            (n.addJoint(a.joint), (a.joint.m_islandFlag = !0), 0 == (A.m_flags & Ig.e_islandFlag) && ((t[r++] = A), (A.m_flags |= Ig.e_islandFlag))),
                                                            (a = a.next);
                                                }
                                            for (n.solve(e, this.m_gravity, this.m_allowSleep), r = 0, A = n.m_bodyCount; r < A; ) (a = r++), (a = n.m_bodies[a]).getType() == Ig.b2_staticBody && (a.m_flags &= ~Ig.e_islandFlag);
                                        }
                                    s = s.m_next;
                                }
                                for (e = 0, n = t.length; e < n && null != t[(s = e++)]; ) t[s] = null;
                                for (a = this.m_bodyList; null != a; ) 0 != a.isAwake() && 0 != a.isActive() && a.getType() != Ig.b2_staticBody && a.synchronizeFixtures(), (a = a.m_next);
                                this.m_contactManager.findNewContacts();
                            },
                            solveTOI: function (e) {
                                var t,
                                    n = this.m_island;
                                n.initialize(this.m_bodyCount, Me.b2_maxTOIContactsPerIsland, Me.b2_maxTOIJointsPerIsland, null, this.m_contactManager.m_contactListener, this.m_contactSolver);
                                for (var a = zs.s_queue, s = this.m_bodyList; null != s; ) (s.m_flags &= ~Ig.e_islandFlag), (s.m_sweep.t0 = 0), (s = s.m_next);
                                for (t = this.m_contactList; null != t; ) (t.m_flags &= ~(xl.e_toiFlag | xl.e_islandFlag)), (t = t.m_next);
                                for (s = this.m_jointList; null != s; ) (s.m_islandFlag = !1), (s = s.m_next);
                                for (;;) {
                                    s = null;
                                    var r = 1;
                                    for (t = this.m_contactList; null != t; ) {
                                        if (1 != t.isSensor() && 0 != t.isEnabled() && 0 != t.isContinuous()) {
                                            if (0 != (t.m_flags & xl.e_toiFlag)) var A = t.m_toi;
                                            else {
                                                A = t.m_fixtureA;
                                                var l = t.m_fixtureB;
                                                if (((A = A.m_body), (l = l.m_body), !((A.getType() == Ig.b2_dynamicBody && 0 != A.isAwake()) || (l.getType() == Ig.b2_dynamicBody && 0 != l.isAwake())))) {
                                                    t = t.m_next;
                                                    continue;
                                                }
                                                var o = A.m_sweep.t0;
                                                A.m_sweep.t0 < l.m_sweep.t0 ? ((o = l.m_sweep.t0), A.m_sweep.advance(o)) : l.m_sweep.t0 < A.m_sweep.t0 && ((o = A.m_sweep.t0), l.m_sweep.advance(o)),
                                                    (A = t.computeTOI(A.m_sweep, l.m_sweep)),
                                                    Me.b2Assert(0 <= A && 1 >= A),
                                                    0 < A && 1 > A && 1 < (A = (1 - A) * o + A) && (A = 1),
                                                    (t.m_toi = A),
                                                    (t.m_flags |= xl.e_toiFlag);
                                            }
                                            Number.MIN_VALUE < A && A < r && ((s = t), (r = A));
                                        }
                                        t = t.m_next;
                                    }
                                    if (null == s || 1 - 100 * Number.MIN_VALUE < r) break;
                                    if (
                                        ((A = s.m_fixtureA),
                                        (l = s.m_fixtureB),
                                        (A = A.m_body),
                                        (l = l.m_body),
                                        zs.s_backupA.set(A.m_sweep),
                                        zs.s_backupB.set(l.m_sweep),
                                        A.advance(r),
                                        l.advance(r),
                                        s.update(this.m_contactManager.m_contactListener),
                                        (s.m_flags &= ~xl.e_toiFlag),
                                        1 == s.isSensor() || 0 == s.isEnabled())
                                    )
                                        A.m_sweep.set(zs.s_backupA), l.m_sweep.set(zs.s_backupB), A.synchronizeTransform(), l.synchronizeTransform();
                                    else if (0 != s.isTouching()) {
                                        for ((t = A).getType() != Ig.b2_dynamicBody && (t = l), n.clear(), l = A = 0, a[A + l++] = t, t.m_flags |= Ig.e_islandFlag; 0 < l; )
                                            if (((s = a[A++]), --l, n.addBody(s), 0 == s.isAwake() && s.setAwake(!0), s.getType() == Ig.b2_dynamicBody)) {
                                                for (t = s.m_contactList; null != t && n.m_contactCount != n.m_contactCapacity; )
                                                    0 == (t.contact.m_flags & xl.e_islandFlag) &&
                                                        1 != t.contact.isSensor() &&
                                                        0 != t.contact.isEnabled() &&
                                                        0 != t.contact.isTouching() &&
                                                        (n.addContact(t.contact),
                                                        (t.contact.m_flags |= xl.e_islandFlag),
                                                        0 == ((o = t.other).m_flags & Ig.e_islandFlag) && (o.getType() != Ig.b2_staticBody && (o.advance(r), o.setAwake(!0)), (a[A + l] = o), ++l, (o.m_flags |= Ig.e_islandFlag))),
                                                        (t = t.next);
                                                for (t = s.m_jointList; null != t; )
                                                    n.m_jointCount != n.m_jointCapacity &&
                                                        1 != t.joint.m_islandFlag &&
                                                        0 != (o = t.other).isActive() &&
                                                        (n.addJoint(t.joint),
                                                        (t.joint.m_islandFlag = !0),
                                                        0 == (o.m_flags & Ig.e_islandFlag) && (o.getType() != Ig.b2_staticBody && (o.advance(r), o.setAwake(!0)), (a[A + l] = o), ++l, (o.m_flags |= Ig.e_islandFlag))),
                                                        (t = t.next);
                                            }
                                        for (
                                            (t = zs.s_timestep).warmStarting = !1,
                                                t.dt = (1 - r) * e.dt,
                                                t.inv_dt = 1 / t.dt,
                                                t.dtRatio = 0,
                                                t.velocityIterations = e.velocityIterations,
                                                t.positionIterations = e.positionIterations,
                                                n.solveTOI(t),
                                                r = 0,
                                                A = n.m_bodyCount;
                                            r < A;

                                        )
                                            if (((t = r++), ((s = n.m_bodies[t]).m_flags &= ~Ig.e_islandFlag), 0 != s.isAwake() && s.getType() == Ig.b2_dynamicBody))
                                                for (s.synchronizeFixtures(), t = s.m_contactList; null != t; ) (t.contact.m_flags &= ~xl.e_toiFlag), (t = t.next);
                                        for (r = 0, s = n.m_contactCount; r < s; ) (t = r++), ((t = n.m_contacts[t]).m_flags &= ~(xl.e_toiFlag | xl.e_islandFlag));
                                        for (r = 0, t = n.m_jointCount; r < t; ) (s = r++), ((s = n.m_joints[s]).m_islandFlag = !1);
                                        this.m_contactManager.findNewContacts();
                                    }
                                }
                            },
                            drawJoint: function (e) {
                                var t = e.getBodyA(),
                                    n = e.getBodyB(),
                                    a = t.m_xf.position,
                                    s = n.m_xf.position,
                                    r = e.getAnchorA(),
                                    A = e.getAnchorB(),
                                    l = zs.s_jointColor;
                                switch (e.m_type) {
                                    case 3:
                                        this.m_debugDraw.drawSegment(r, A, l);
                                        break;
                                    case 4:
                                        (e = (t = d.__cast(e, pQ)).getGroundAnchorA()), (t = t.getGroundAnchorB()), this.m_debugDraw.drawSegment(e, r, l), this.m_debugDraw.drawSegment(t, A, l), this.m_debugDraw.drawSegment(e, t, l);
                                        break;
                                    case 5:
                                        this.m_debugDraw.drawSegment(r, A, l);
                                        break;
                                    default:
                                        t != this.m_groundBody && this.m_debugDraw.drawSegment(a, r, l), this.m_debugDraw.drawSegment(r, A, l), n != this.m_groundBody && this.m_debugDraw.drawSegment(s, A, l);
                                }
                            },
                            drawShape: function (e, t, n) {
                                switch (e.m_type) {
                                    case 0:
                                        e = d.__cast(e, Rw);
                                        var a = kd.mulX(t, e.m_p);
                                        this.m_debugDraw.drawSolidCircle(a, e.m_radius, t.R.col1, n);
                                        break;
                                    case 1:
                                        (e = (a = d.__cast(e, ct)).getVertexCount()), (a = a.getVertices());
                                        for (var s = [], r = 0; r < e; ) {
                                            var A = r++;
                                            s[A] = kd.mulX(t, a[A]);
                                        }
                                        this.m_debugDraw.drawSolidPolygon(s, e, n);
                                        break;
                                    case 2:
                                        (e = d.__cast(e, oQ)), this.m_debugDraw.drawSegment(kd.mulX(t, e.getVertex1()), kd.mulX(t, e.getVertex2()), n);
                                }
                            },
                            m_aabb: null,
                            setScreenBounds: function (e) {
                                this.m_aabb = e;
                            },
                            getScreenBounds: function () {
                                return this.m_aabb;
                            },
                            m_flags: null,
                            m_contactManager: null,
                            m_contactSolver: null,
                            m_island: null,
                            m_bodyList: null,
                            m_jointList: null,
                            m_contactList: null,
                            m_bodyCount: null,
                            m_contactCount: null,
                            m_jointCount: null,
                            m_controllerList: null,
                            m_controllerCount: null,
                            m_gravity: null,
                            m_allowSleep: null,
                            m_groundBody: null,
                            m_destructionListener: null,
                            m_debugDraw: null,
                            m_inv_dt0: null,
                            aabbQueryCallback: null,
                            shapeQueryCallback: null,
                            pointQueryCallback: null,
                            __class__: zs,
                        });
                    var D4 = function () {};
                    (v["box2D.dynamics.AABBQueryCallback"] = D4),
                        (D4.__name__ = "box2D.dynamics.AABBQueryCallback"),
                        (D4.__interfaces__ = [IV]),
                        (D4.prototype = {
                            broadPhase: null,
                            callbackMethod: null,
                            queryCallback: function (e) {
                                return this.callbackMethod(this.broadPhase.getUserData(e));
                            },
                            __class__: D4,
                        });
                    var C4 = function () {};
                    (v["box2D.dynamics.ShapeQueryCallback"] = C4),
                        (C4.__name__ = "box2D.dynamics.ShapeQueryCallback"),
                        (C4.__interfaces__ = [IV]),
                        (C4.prototype = {
                            broadPhase: null,
                            shape: null,
                            transform: null,
                            callbackMethod: null,
                            queryCallback: function (e) {
                                return (e = this.broadPhase.getUserData(e)), !rt.testOverlap(this.shape, this.transform, e.getShape(), e.getBody().getTransform()) || this.callbackMethod(e);
                            },
                            __class__: C4,
                        });
                    var B4 = function () {};
                    (v["box2D.dynamics.PointQueryCallback"] = B4),
                        (B4.__name__ = "box2D.dynamics.PointQueryCallback"),
                        (B4.__interfaces__ = [IV]),
                        (B4.prototype = {
                            broadPhase: null,
                            callbackMethod: null,
                            p: null,
                            queryCallback: function (e) {
                                return !(e = this.broadPhase.getUserData(e)).testPoint(this.p) || this.callbackMethod(e);
                            },
                            __class__: B4,
                        });
                    var xl = function () {
                        (this.m_nodeA = new E4()), (this.m_nodeB = new E4()), (this.m_manifold = new WU()), (this.m_oldManifold = new WU());
                    };
                    (v["box2D.dynamics.contacts.B2Contact"] = xl),
                        (xl.__name__ = "box2D.dynamics.contacts.B2Contact"),
                        (xl.prototype = {
                            getManifold: function () {
                                return this.m_manifold;
                            },
                            getWorldManifold: function (e) {
                                var t = this.m_fixtureA.getBody(),
                                    n = this.m_fixtureB.getBody(),
                                    a = this.m_fixtureA.getShape(),
                                    s = this.m_fixtureB.getShape();
                                e.initialize(this.m_manifold, t.getTransform(), a.m_radius, n.getTransform(), s.m_radius);
                            },
                            isTouching: function () {
                                return (this.m_flags & xl.e_touchingFlag) == xl.e_touchingFlag;
                            },
                            isContinuous: function () {
                                return (this.m_flags & xl.e_continuousFlag) == xl.e_continuousFlag;
                            },
                            setSensor: function (e) {
                                this.m_flags = e ? this.m_flags | xl.e_sensorFlag : this.m_flags & ~xl.e_sensorFlag;
                            },
                            isSensor: function () {
                                return (this.m_flags & xl.e_sensorFlag) == xl.e_sensorFlag;
                            },
                            setEnabled: function (e) {
                                this.m_flags = e ? this.m_flags | xl.e_enabledFlag : this.m_flags & ~xl.e_enabledFlag;
                            },
                            isEnabled: function () {
                                return (this.m_flags & xl.e_enabledFlag) == xl.e_enabledFlag;
                            },
                            getNext: function () {
                                return this.m_next;
                            },
                            getFixtureA: function () {
                                return this.m_fixtureA;
                            },
                            getFixtureB: function () {
                                return this.m_fixtureB;
                            },
                            flagForFiltering: function () {
                                this.m_flags |= xl.e_filterFlag;
                            },
                            reset: function (e, t) {
                                if (((this.m_flags = xl.e_enabledFlag), null == e || null == t)) this.m_fixtureB = this.m_fixtureA = null;
                                else {
                                    (e.isSensor() || t.isSensor()) && (this.m_flags |= xl.e_sensorFlag);
                                    var n = e.getBody(),
                                        a = t.getBody();
                                    (n.getType() != Ig.b2_dynamicBody || n.isBullet() || a.getType() != Ig.b2_dynamicBody || a.isBullet()) && (this.m_flags |= xl.e_continuousFlag),
                                        (this.m_fixtureA = e),
                                        (this.m_fixtureB = t),
                                        (this.m_manifold.m_pointCount = 0),
                                        (this.m_next = this.m_prev = null),
                                        (this.m_nodeA.contact = null),
                                        (this.m_nodeA.prev = null),
                                        (this.m_nodeA.next = null),
                                        (this.m_nodeA.other = null),
                                        (this.m_nodeB.contact = null),
                                        (this.m_nodeB.prev = null),
                                        (this.m_nodeB.next = null),
                                        (this.m_nodeB.other = null);
                                }
                            },
                            update: function (e) {
                                var t = this.m_oldManifold;
                                (this.m_oldManifold = this.m_manifold), (this.m_manifold = t), (this.m_flags |= xl.e_enabledFlag);
                                var n = !1;
                                t = (this.m_flags & xl.e_touchingFlag) == xl.e_touchingFlag;
                                var a = this.m_fixtureA.m_body,
                                    s = this.m_fixtureB.m_body,
                                    r = this.m_fixtureA.m_aabb.testOverlap(this.m_fixtureB.m_aabb);
                                if (0 != (this.m_flags & xl.e_sensorFlag))
                                    r && ((n = this.m_fixtureA.getShape()), (r = this.m_fixtureB.getShape()), (a = a.getTransform()), (s = s.getTransform()), (n = rt.testOverlap(n, a, r, s))), (this.m_manifold.m_pointCount = 0);
                                else {
                                    if ((a.getType() != Ig.b2_dynamicBody || a.isBullet() || s.getType() != Ig.b2_dynamicBody || s.isBullet() ? (this.m_flags |= xl.e_continuousFlag) : (this.m_flags &= ~xl.e_continuousFlag), r)) {
                                        this.evaluate(), (n = 0 < this.m_manifold.m_pointCount), (r = 0);
                                        for (var A = this.m_manifold.m_pointCount; r < A; ) {
                                            var l = r++;
                                            ((l = this.m_manifold.m_points[l]).m_normalImpulse = 0), (l.m_tangentImpulse = 0);
                                            for (var o = l.m_id, i = 0, u = this.m_oldManifold.m_pointCount; i < u; ) {
                                                var g = i++;
                                                if ((g = this.m_oldManifold.m_points[g]).m_id.get_key() == o.get_key()) {
                                                    (l.m_normalImpulse = g.m_normalImpulse), (l.m_tangentImpulse = g.m_tangentImpulse);
                                                    break;
                                                }
                                            }
                                        }
                                    } else this.m_manifold.m_pointCount = 0;
                                    n != t && (a.setAwake(!0), s.setAwake(!0));
                                }
                                (this.m_flags = n ? this.m_flags | xl.e_touchingFlag : this.m_flags & ~xl.e_touchingFlag),
                                    0 == t && 1 == n && e.beginContact(this),
                                    1 == t && 0 == n && e.endContact(this),
                                    0 == (this.m_flags & xl.e_sensorFlag) && e.preSolve(this, this.m_oldManifold);
                            },
                            evaluate: function () {},
                            computeTOI: function (e, t) {
                                return (
                                    xl.s_input.proxyA.set(this.m_fixtureA.getShape()),
                                    xl.s_input.proxyB.set(this.m_fixtureB.getShape()),
                                    (xl.s_input.sweepA = e),
                                    (xl.s_input.sweepB = t),
                                    (xl.s_input.tolerance = Me.b2_linearSlop),
                                    gr.timeOfImpact(xl.s_input)
                                );
                            },
                            m_flags: null,
                            m_prev: null,
                            m_next: null,
                            m_nodeA: null,
                            m_nodeB: null,
                            m_fixtureA: null,
                            m_fixtureB: null,
                            m_manifold: null,
                            m_oldManifold: null,
                            m_toi: null,
                            key: null,
                            __class__: xl,
                        });
                    var YU = function () {
                        xl.call(this);
                    };
                    (v["box2D.dynamics.contacts.B2CircleContact"] = YU),
                        (YU.__name__ = "box2D.dynamics.contacts.B2CircleContact"),
                        (YU.create = function (e) {
                            return new YU();
                        }),
                        (YU.destroy = function (e, t) {}),
                        (YU.__super__ = xl),
                        (YU.prototype = K(xl.prototype, {
                            reset: function (e, t) {
                                xl.prototype.reset.call(this, e, t);
                            },
                            evaluate: function () {
                                var e = this.m_fixtureA.getBody(),
                                    t = this.m_fixtureB.getBody();
                                Nm.collideCircles(this.m_manifold, d.__cast(this.m_fixtureA.getShape(), Rw), e.m_xf, d.__cast(this.m_fixtureB.getShape(), Rw), t.m_xf);
                            },
                            __class__: YU,
                        }));
                    var L8 = function () {
                        (this.localPlaneNormal = new td()), (this.localPoint = new td()), (this.normal = new td()), (this.normalMass = new Tv()), (this.K = new Tv()), (this.points = []);
                        for (var e = 0, t = Me.b2_maxManifoldPoints; e < t; ) {
                            var n = e++;
                            this.points[n] = new K8();
                        }
                    };
                    (v["box2D.dynamics.contacts.B2ContactConstraint"] = L8),
                        (L8.__name__ = "box2D.dynamics.contacts.B2ContactConstraint"),
                        (L8.prototype = {
                            points: null,
                            localPlaneNormal: null,
                            localPoint: null,
                            normal: null,
                            normalMass: null,
                            K: null,
                            bodyA: null,
                            bodyB: null,
                            type: null,
                            radius: null,
                            friction: null,
                            restitution: null,
                            pointCount: null,
                            manifold: null,
                            __class__: L8,
                        });
                    var K8 = function () {
                        (this.localPoint = new td()), (this.rA = new td()), (this.rB = new td());
                    };
                    (v["box2D.dynamics.contacts.B2ContactConstraintPoint"] = K8),
                        (K8.__name__ = "box2D.dynamics.contacts.B2ContactConstraintPoint"),
                        (K8.prototype = { localPoint: null, rA: null, rB: null, normalImpulse: null, tangentImpulse: null, normalMass: null, tangentMass: null, equalizedMass: null, velocityBias: null, __class__: K8 });
                    var E4 = function () {};
                    (v["box2D.dynamics.contacts.B2ContactEdge"] = E4), (E4.__name__ = "box2D.dynamics.contacts.B2ContactEdge"), (E4.prototype = { other: null, contact: null, prev: null, next: null, __class__: E4 });
                    var J8 = function (e) {
                        (this.m_allocator = e), this.initializeRegisters();
                    };
                    (v["box2D.dynamics.contacts.B2ContactFactory"] = J8),
                        (J8.__name__ = "box2D.dynamics.contacts.B2ContactFactory"),
                        (J8.prototype = {
                            addType: function (e, t, n, a) {
                                (this.m_registers[n][a].createFcn = e), (this.m_registers[n][a].destroyFcn = t), (this.m_registers[n][a].primary = n);
                            },
                            initializeRegisters: function () {
                                (this.m_registers = []),
                                    (this.m_registers[0] = []),
                                    (this.m_registers[0][0] = null),
                                    (this.m_registers[0][1] = null),
                                    (this.m_registers[0][2] = null),
                                    (this.m_registers[1] = []),
                                    (this.m_registers[1][0] = null),
                                    (this.m_registers[1][1] = null),
                                    (this.m_registers[1][2] = null),
                                    (this.m_registers[2] = []),
                                    (this.m_registers[2][0] = null),
                                    (this.m_registers[2][1] = null),
                                    (this.m_registers[2][2] = null),
                                    null == this.m_registers[0][0] && (this.m_registers[0][0] = new PP()),
                                    null == this.m_registers[0][1] && ((this.m_registers[0][1] = new PP()), (this.m_registers[1][0] = this.m_registers[0][1])),
                                    null == this.m_registers[0][2] && ((this.m_registers[0][2] = new PP()), (this.m_registers[2][0] = this.m_registers[0][2])),
                                    null == this.m_registers[1][0] && ((this.m_registers[1][0] = new PP()), (this.m_registers[0][1] = this.m_registers[1][0])),
                                    null == this.m_registers[1][1] && (this.m_registers[1][1] = new PP()),
                                    null == this.m_registers[1][2] && ((this.m_registers[1][2] = new PP()), (this.m_registers[2][1] = this.m_registers[1][2])),
                                    null == this.m_registers[2][0] && ((this.m_registers[2][0] = new PP()), (this.m_registers[0][2] = this.m_registers[2][0])),
                                    null == this.m_registers[2][1] && ((this.m_registers[2][1] = new PP()), (this.m_registers[1][2] = this.m_registers[2][1])),
                                    null == this.m_registers[2][2] && (this.m_registers[2][2] = new PP()),
                                    this.addType(YU.create, YU.destroy, 0, 0),
                                    this.addType(ZU.create, ZU.destroy, 1, 0),
                                    this.addType($U.create, $U.destroy, 1, 1),
                                    this.addType(gi.create, gi.destroy, 2, 0),
                                    this.addType(Cc.create, Cc.destroy, 1, 2);
                            },
                            create: function (e, t) {
                                var n = e.getType(),
                                    a = t.getType();
                                if (null != (a = this.m_registers[n][a]).pool) {
                                    var s = a.pool;
                                    return (a.pool = s.m_next), a.poolCount--, a.primary == n ? s.reset(e, t) : s.reset(t, e), s;
                                }
                                return null != (s = a.createFcn) ? (a.primary == n ? (s = s(this.m_allocator)).reset(e, t) : (s = s(this.m_allocator)).reset(t, e), s) : null;
                            },
                            destroy: function (e) {
                                0 < e.m_manifold.m_pointCount && (e.m_fixtureA.m_body.setAwake(!0), e.m_fixtureB.m_body.setAwake(!0));
                                var t = e.m_fixtureA.getType(),
                                    n = e.m_fixtureB.getType();
                                (t = this.m_registers[t][n]).poolCount++, (e.m_next = t.pool), (t.pool = e), (t = t.destroyFcn)(e, this.m_allocator);
                            },
                            m_registers: null,
                            m_allocator: null,
                            __class__: J8,
                        });
                    var PP = function () {};
                    (v["box2D.dynamics.contacts.B2ContactRegister"] = PP),
                        (PP.__name__ = "box2D.dynamics.contacts.B2ContactRegister"),
                        (PP.prototype = { createFcn: null, destroyFcn: null, primary: null, pool: null, poolCount: null, __class__: PP });
                    var a3 = function () {
                        (this.m_normal = new td()), (this.m_separations = []), (this.m_points = []);
                        for (var e = 0, t = Me.b2_maxManifoldPoints; e < t; ) {
                            var n = e++;
                            this.m_points[n] = new td();
                        }
                    };
                    (v["box2D.dynamics.contacts.B2PositionSolverManifold"] = a3),
                        (a3.__name__ = "box2D.dynamics.contacts.B2PositionSolverManifold"),
                        (a3.prototype = {
                            initialize: function (e) {
                                switch ((Me.b2Assert(0 < e.pointCount), e.type)) {
                                    case 1:
                                        var t = e.bodyA.m_xf.R,
                                            n = e.localPoint,
                                            a = e.bodyA.m_xf.position.x + (t.col1.x * n.x + t.col2.x * n.y),
                                            s = e.bodyA.m_xf.position.y + (t.col1.y * n.x + t.col2.y * n.y);
                                        (t = e.bodyB.m_xf.R), (n = e.points[0].localPoint);
                                        var r = e.bodyB.m_xf.position.x + (t.col1.x * n.x + t.col2.x * n.y),
                                            A = (t = e.bodyB.m_xf.position.y + (t.col1.y * n.x + t.col2.y * n.y)) - s,
                                            l = (n = r - a) * n + A * A;
                                        l > Number.MIN_VALUE * Number.MIN_VALUE ? ((l = Math.sqrt(l)), (this.m_normal.x = n / l), (this.m_normal.y = A / l)) : ((this.m_normal.x = 1), (this.m_normal.y = 0)),
                                            (this.m_points[0].x = 0.5 * (a + r)),
                                            (this.m_points[0].y = 0.5 * (s + t)),
                                            (this.m_separations[0] = n * this.m_normal.x + A * this.m_normal.y - e.radius);
                                        break;
                                    case 2:
                                        for (
                                            t = e.bodyA.m_xf.R,
                                                n = e.localPlaneNormal,
                                                this.m_normal.x = t.col1.x * n.x + t.col2.x * n.y,
                                                this.m_normal.y = t.col1.y * n.x + t.col2.y * n.y,
                                                t = e.bodyA.m_xf.R,
                                                n = e.localPoint,
                                                a = e.bodyA.m_xf.position.x + (t.col1.x * n.x + t.col2.x * n.y),
                                                s = e.bodyA.m_xf.position.y + (t.col1.y * n.x + t.col2.y * n.y),
                                                t = e.bodyB.m_xf.R,
                                                A = 0,
                                                l = e.pointCount;
                                            A < l;

                                        ) {
                                            var o = A++;
                                            (n = e.points[o].localPoint),
                                                (r = e.bodyB.m_xf.position.x + (t.col1.x * n.x + t.col2.x * n.y)),
                                                (n = e.bodyB.m_xf.position.y + (t.col1.y * n.x + t.col2.y * n.y)),
                                                (this.m_separations[o] = (r - a) * this.m_normal.x + (n - s) * this.m_normal.y - e.radius),
                                                (this.m_points[o].x = r),
                                                (this.m_points[o].y = n);
                                        }
                                        break;
                                    case 4:
                                        for (
                                            t = e.bodyB.m_xf.R,
                                                n = e.localPlaneNormal,
                                                this.m_normal.x = t.col1.x * n.x + t.col2.x * n.y,
                                                this.m_normal.y = t.col1.y * n.x + t.col2.y * n.y,
                                                t = e.bodyB.m_xf.R,
                                                n = e.localPoint,
                                                a = e.bodyB.m_xf.position.x + (t.col1.x * n.x + t.col2.x * n.y),
                                                s = e.bodyB.m_xf.position.y + (t.col1.y * n.x + t.col2.y * n.y),
                                                t = e.bodyA.m_xf.R,
                                                A = 0,
                                                l = e.pointCount;
                                            A < l;

                                        )
                                            (o = A++),
                                                (n = e.points[o].localPoint),
                                                (r = e.bodyA.m_xf.position.x + (t.col1.x * n.x + t.col2.x * n.y)),
                                                (n = e.bodyA.m_xf.position.y + (t.col1.y * n.x + t.col2.y * n.y)),
                                                (this.m_separations[o] = (r - a) * this.m_normal.x + (n - s) * this.m_normal.y - e.radius),
                                                null == n && (n = 0),
                                                null == r && (r = 0),
                                                ((o = this.m_points[o]).x = r),
                                                (o.y = n);
                                        (this.m_normal.x *= -1), (this.m_normal.y *= -1);
                                }
                            },
                            m_normal: null,
                            m_points: null,
                            m_separations: null,
                            __class__: a3,
                        });
                    var zE = function () {
                        (this.m_step = new $2()), (this.m_constraints = []);
                    };
                    (v["box2D.dynamics.contacts.B2ContactSolver"] = zE),
                        (zE.__name__ = "box2D.dynamics.contacts.B2ContactSolver"),
                        (zE.prototype = {
                            initialize: function (e, t, n, a) {
                                for (this.m_step.set(e), this.m_allocator = a, this.m_constraintCount = n; this.m_constraints.length < this.m_constraintCount; ) this.m_constraints[this.m_constraints.length] = new L8();
                                for (e = 0; e < n; ) {
                                    var s = t[(a = e++)],
                                        r = s.m_fixtureA,
                                        A = s.m_fixtureB,
                                        l = r.m_shape.m_radius,
                                        o = A.m_shape.m_radius,
                                        i = r.m_body,
                                        u = A.m_body;
                                    s = s.getManifold();
                                    var g = Me.b2MixFriction(r.getFriction(), A.getFriction()),
                                        m = Me.b2MixRestitution(r.getRestitution(), A.getRestitution()),
                                        d = i.m_linearVelocity.x,
                                        c = i.m_linearVelocity.y,
                                        p = u.m_linearVelocity.x,
                                        h = u.m_linearVelocity.y,
                                        f = i.m_angularVelocity,
                                        y = u.m_angularVelocity;
                                    for (
                                        Me.b2Assert(0 < s.m_pointCount),
                                            zE.s_worldManifold.initialize(s, i.m_xf, l, u.m_xf, o),
                                            r = zE.s_worldManifold.m_normal.x,
                                            A = zE.s_worldManifold.m_normal.y,
                                            (a = this.m_constraints[a]).bodyA = i,
                                            a.bodyB = u,
                                            a.manifold = s,
                                            a.normal.x = r,
                                            a.normal.y = A,
                                            a.pointCount = s.m_pointCount,
                                            a.friction = g,
                                            a.restitution = m,
                                            a.localPlaneNormal.x = s.m_localPlaneNormal.x,
                                            a.localPlaneNormal.y = s.m_localPlaneNormal.y,
                                            a.localPoint.x = s.m_localPoint.x,
                                            a.localPoint.y = s.m_localPoint.y,
                                            a.radius = l + o,
                                            a.type = s.m_type,
                                            l = 0,
                                            o = a.pointCount;
                                        l < o;

                                    ) {
                                        var R = l++,
                                            v = s.m_points[R];
                                        ((g = a.points[R]).normalImpulse = v.m_normalImpulse),
                                            (g.tangentImpulse = v.m_tangentImpulse),
                                            (m = g.localPoint),
                                            (v = v.m_localPoint),
                                            (m.x = v.x),
                                            (m.y = v.y),
                                            (m = g.rA.x = zE.s_worldManifold.m_points[R].x - i.m_sweep.c.x),
                                            (v = g.rA.y = zE.s_worldManifold.m_points[R].y - i.m_sweep.c.y);
                                        var b = (g.rB.x = zE.s_worldManifold.m_points[R].x - u.m_sweep.c.x),
                                            F = m * A - v * r,
                                            N = b * A - (R = g.rB.y = zE.s_worldManifold.m_points[R].y - u.m_sweep.c.y) * r;
                                        (F *= F), (N *= N), (g.normalMass = 1 / (i.m_invMass + u.m_invMass + i.m_invI * F + u.m_invI * N));
                                        var _ = i.m_mass * i.m_invMass + u.m_mass * u.m_invMass;
                                        (_ += i.m_mass * i.m_invI * F + u.m_mass * u.m_invI * N),
                                            (g.equalizedMass = 1 / _),
                                            (F = m * (_ = -r) - v * (N = A)),
                                            (N = b * _ - R * N),
                                            (F *= F),
                                            (N *= N),
                                            (g.tangentMass = 1 / (i.m_invMass + u.m_invMass + i.m_invI * F + u.m_invI * N)),
                                            (g.velocityBias = 0),
                                            (m = a.normal.x * (p + -y * R - d - -f * v) + a.normal.y * (h + y * b - c - f * m)) < -Me.b2_velocityThreshold && (g.velocityBias += -a.restitution * m);
                                    }
                                    2 == a.pointCount &&
                                        ((h = a.points[0]),
                                        (p = a.points[1]),
                                        (s = i.m_invMass),
                                        (i = i.m_invI),
                                        (d = u.m_invMass),
                                        (u = u.m_invI),
                                        (c = h.rA.x * A - h.rA.y * r),
                                        (h = h.rB.x * A - h.rB.y * r),
                                        (f = p.rA.x * A - p.rA.y * r),
                                        (p = p.rB.x * A - p.rB.y * r),
                                        (A = s + d + i * c * c + u * h * h) * A < 100 * (A * (r = s + d + i * f * f + u * p * p) - (u = s + d + i * c * f + u * h * p) * u)
                                            ? (null == (s = u) && (s = 0), null == A && (A = 0), ((i = a.K.col1).x = A), (i.y = s), null == r && (r = 0), null == u && (u = 0), ((A = a.K.col2).x = u), (A.y = r), a.K.getInverse(a.normalMass))
                                            : (a.pointCount = 1));
                                }
                            },
                            initVelocityConstraints: function (e) {
                                for (var t = 0, n = this.m_constraintCount; t < n; ) {
                                    var a = t++,
                                        s = (a = this.m_constraints[a]).bodyA,
                                        r = a.bodyB,
                                        A = s.m_invMass,
                                        l = s.m_invI,
                                        o = r.m_invMass,
                                        i = r.m_invI,
                                        u = a.normal.x,
                                        g = a.normal.y,
                                        m = g,
                                        d = -u;
                                    if (e.warmStarting)
                                        for (var c = a.pointCount, p = 0; p < c; ) {
                                            var h = p++;
                                            ((h = a.points[h]).normalImpulse *= e.dtRatio), (h.tangentImpulse *= e.dtRatio);
                                            var f = h.normalImpulse * u + h.tangentImpulse * m,
                                                y = h.normalImpulse * g + h.tangentImpulse * d;
                                            (s.m_angularVelocity -= l * (h.rA.x * y - h.rA.y * f)),
                                                (s.m_linearVelocity.x -= A * f),
                                                (s.m_linearVelocity.y -= A * y),
                                                (r.m_angularVelocity += i * (h.rB.x * y - h.rB.y * f)),
                                                (r.m_linearVelocity.x += o * f),
                                                (r.m_linearVelocity.y += o * y);
                                        }
                                    else for (s = 0, r = c = a.pointCount; s < r; ) (A = s++), ((A = a.points[A]).normalImpulse = 0), (A.tangentImpulse = 0);
                                }
                            },
                            solveVelocityConstraints: function () {
                                for (var e, t, n, a, s, r, A, l, o, i, u = 0, g = this.m_constraintCount; u < g; ) {
                                    var m = u++;
                                    m = (a = this.m_constraints[m]).bodyA;
                                    var d = a.bodyB,
                                        c = m.m_angularVelocity,
                                        p = d.m_angularVelocity,
                                        h = m.m_linearVelocity,
                                        f = d.m_linearVelocity,
                                        y = m.m_invMass,
                                        R = m.m_invI,
                                        v = d.m_invMass,
                                        b = d.m_invI;
                                    l = a.normal.x;
                                    var F = (o = a.normal.y),
                                        N = -l;
                                    for (i = a.friction, A = 0, r = a.pointCount; A < r; )
                                        (e = A++),
                                            (e = a.points[e]),
                                            (t = (t = f.x - p * e.rB.y - h.x + c * e.rA.y) * F + (n = f.y + p * e.rB.x - h.y - c * e.rA.x) * N),
                                            (t = e.tangentMass * -t),
                                            (n = i * e.normalImpulse),
                                            (s = (t = (n = kd.clamp(e.tangentImpulse + t, -n, n)) - e.tangentImpulse) * F),
                                            (t *= N),
                                            (h.x -= y * s),
                                            (h.y -= y * t),
                                            (c -= R * (e.rA.x * t - e.rA.y * s)),
                                            (f.x += v * s),
                                            (f.y += v * t),
                                            (p += b * (e.rB.x * t - e.rB.y * s)),
                                            (e.tangentImpulse = n);
                                    if (1 == a.pointCount)
                                        (e = a.points[0]),
                                            (a = (t = f.x + -p * e.rB.y - h.x - -c * e.rA.y) * l + (n = f.y + p * e.rB.x - h.y - c * e.rA.x) * o),
                                            (t = -e.normalMass * (a - e.velocityBias)),
                                            (s = (t = (n = 0 < (n = e.normalImpulse + t) ? n : 0) - e.normalImpulse) * l),
                                            (t *= o),
                                            (h.x -= y * s),
                                            (h.y -= y * t),
                                            (c -= R * (e.rA.x * t - e.rA.y * s)),
                                            (f.x += v * s),
                                            (f.y += v * t),
                                            (p += b * (e.rB.x * t - e.rB.y * s)),
                                            (e.normalImpulse = n);
                                    else {
                                        (e = a.points[0]), (F = a.points[1]), (r = e.normalImpulse), (A = F.normalImpulse), (s = (f.x - p * e.rB.y - h.x + c * e.rA.y) * l + (f.y + p * e.rB.x - h.y - c * e.rA.x) * o);
                                        var _ = (f.x - p * F.rB.y - h.x + c * F.rA.y) * l + (f.y + p * F.rB.x - h.y - c * F.rA.x) * o;
                                        for (t = s - e.velocityBias, n = _ - F.velocityBias, t -= (i = a.K).col1.x * r + i.col2.x * A, n -= i.col1.y * r + i.col2.y * A; ; ) {
                                            if (((N = -((i = a.normalMass).col1.x * t + i.col2.x * n)), (i = -(i.col1.y * t + i.col2.y * n)), 0 <= N && 0 <= i)) {
                                                (a = (r = N - r) * l),
                                                    (r *= o),
                                                    (l *= A = i - A),
                                                    (o *= A),
                                                    (h.x -= y * (a + l)),
                                                    (h.y -= y * (r + o)),
                                                    (c -= R * (e.rA.x * r - e.rA.y * a + F.rA.x * o - F.rA.y * l)),
                                                    (f.x += v * (a + l)),
                                                    (f.y += v * (r + o)),
                                                    (p += b * (e.rB.x * r - e.rB.y * a + F.rB.x * o - F.rB.y * l)),
                                                    (e.normalImpulse = N),
                                                    (F.normalImpulse = i);
                                                break;
                                            }
                                            if (((N = -e.normalMass * t), (i = 0), (_ = a.K.col1.y * N + n), 0 <= N && 0 <= _)) {
                                                (a = (r = N - r) * l),
                                                    (r *= o),
                                                    (l *= A = i - A),
                                                    (o *= A),
                                                    (h.x -= y * (a + l)),
                                                    (h.y -= y * (r + o)),
                                                    (c -= R * (e.rA.x * r - e.rA.y * a + F.rA.x * o - F.rA.y * l)),
                                                    (f.x += v * (a + l)),
                                                    (f.y += v * (r + o)),
                                                    (p += b * (e.rB.x * r - e.rB.y * a + F.rB.x * o - F.rB.y * l)),
                                                    (e.normalImpulse = N),
                                                    (F.normalImpulse = i);
                                                break;
                                            }
                                            if (((N = 0), (i = -F.normalMass * n), (s = a.K.col2.x * i + t), 0 <= i && 0 <= s)) {
                                                (a = (r = N - r) * l),
                                                    (r *= o),
                                                    (l *= A = i - A),
                                                    (o *= A),
                                                    (h.x -= y * (a + l)),
                                                    (h.y -= y * (r + o)),
                                                    (c -= R * (e.rA.x * r - e.rA.y * a + F.rA.x * o - F.rA.y * l)),
                                                    (f.x += v * (a + l)),
                                                    (f.y += v * (r + o)),
                                                    (p += b * (e.rB.x * r - e.rB.y * a + F.rB.x * o - F.rB.y * l)),
                                                    (e.normalImpulse = N),
                                                    (F.normalImpulse = i);
                                                break;
                                            }
                                            if (((i = N = 0), (_ = n), 0 <= (s = t) && 0 <= _)) {
                                                (a = (r = N - r) * l),
                                                    (r *= o),
                                                    (l *= A = i - A),
                                                    (o *= A),
                                                    (h.x -= y * (a + l)),
                                                    (h.y -= y * (r + o)),
                                                    (c -= R * (e.rA.x * r - e.rA.y * a + F.rA.x * o - F.rA.y * l)),
                                                    (f.x += v * (a + l)),
                                                    (f.y += v * (r + o)),
                                                    (p += b * (e.rB.x * r - e.rB.y * a + F.rB.x * o - F.rB.y * l)),
                                                    (e.normalImpulse = N),
                                                    (F.normalImpulse = i);
                                                break;
                                            }
                                            break;
                                        }
                                    }
                                    (m.m_angularVelocity = c), (d.m_angularVelocity = p);
                                }
                            },
                            finalizeVelocityConstraints: function () {
                                for (var e = 0, t = this.m_constraintCount; e < t; )
                                    for (var n = e++, a = (n = this.m_constraints[n]).manifold, s = 0, r = n.pointCount; s < r; ) {
                                        var A = s++,
                                            l = a.m_points[A];
                                        (A = n.points[A]), (l.m_normalImpulse = A.normalImpulse), (l.m_tangentImpulse = A.tangentImpulse);
                                    }
                            },
                            solvePositionConstraints: function (e) {
                                for (var t = 0, n = 0, a = this.m_constraintCount; n < a; ) {
                                    var s = n++,
                                        r = (s = this.m_constraints[s]).bodyA,
                                        A = s.bodyB,
                                        l = r.m_mass * r.m_invMass,
                                        o = r.m_mass * r.m_invI,
                                        i = A.m_mass * A.m_invMass,
                                        u = A.m_mass * A.m_invI;
                                    zE.s_psm.initialize(s);
                                    for (var g = zE.s_psm.m_normal, m = 0, d = s.pointCount; m < d; ) {
                                        var c = m++,
                                            p = s.points[c],
                                            h = zE.s_psm.m_points[c],
                                            f = zE.s_psm.m_separations[c];
                                        c = h.x - r.m_sweep.c.x;
                                        var y = h.y - r.m_sweep.c.y,
                                            R = h.x - A.m_sweep.c.x;
                                        (h = h.y - A.m_sweep.c.y),
                                            (t = t < f ? t : f),
                                            (f = kd.clamp(e * (f + Me.b2_linearSlop), -Me.b2_maxLinearCorrection, 0)),
                                            (p = (f *= -p.equalizedMass) * g.x),
                                            (f *= g.y),
                                            (r.m_sweep.c.x -= l * p),
                                            (r.m_sweep.c.y -= l * f),
                                            (r.m_sweep.a -= o * (c * f - y * p)),
                                            r.synchronizeTransform(),
                                            (A.m_sweep.c.x += i * p),
                                            (A.m_sweep.c.y += i * f),
                                            (A.m_sweep.a += u * (R * f - h * p)),
                                            A.synchronizeTransform();
                                    }
                                }
                                return t > -1.5 * Me.b2_linearSlop;
                            },
                            m_step: null,
                            m_allocator: null,
                            m_constraints: null,
                            m_constraintCount: null,
                            __class__: zE,
                        });
                    var gi = function () {
                        xl.call(this);
                    };
                    (v["box2D.dynamics.contacts.B2EdgeAndCircleContact"] = gi),
                        (gi.__name__ = "box2D.dynamics.contacts.B2EdgeAndCircleContact"),
                        (gi.create = function (e) {
                            return new gi();
                        }),
                        (gi.destroy = function (e, t) {}),
                        (gi.__super__ = xl),
                        (gi.prototype = K(xl.prototype, {
                            m_v0: null,
                            m_v1: null,
                            m_v2: null,
                            m_v3: null,
                            reset: function (e, t) {
                                xl.prototype.reset.call(this, e, t);
                            },
                            evaluate: function () {
                                var e = this.m_fixtureA.getBody(),
                                    t = this.m_fixtureB.getBody();
                                this.b2CollideEdgeAndCircle(this.m_manifold, d.__cast(this.m_fixtureA.getShape(), oQ), e.m_xf, d.__cast(this.m_fixtureB.getShape(), Rw), t.m_xf);
                            },
                            b2CollideEdgeAndCircle: function (e, t, n, a, s) {
                                (e.m_pointCount = 0),
                                    this.multiplyTransformVector(s, a.m_p, gi.temp1),
                                    (s = gi.q),
                                    (n = kd.mulXT(n, gi.temp1)),
                                    (s.x = n.x),
                                    (s.y = n.y),
                                    (this.m_v0 = t.m_v0),
                                    (this.m_v1 = t.m_v1),
                                    (this.m_v2 = t.m_v2),
                                    (this.m_v3 = t.m_v3),
                                    (n = gi.e),
                                    (s = this.m_v2.x - this.m_v1.x);
                                var r = this.m_v2.y - this.m_v1.y;
                                null == r && (r = 0),
                                    null == s && (s = 0),
                                    (n.x = s),
                                    (n.y = r),
                                    (n = gi.temp1),
                                    (s = this.m_v2.x - gi.q.x),
                                    null == (r = this.m_v2.y - gi.q.y) && (r = 0),
                                    null == s && (s = 0),
                                    (n.x = s),
                                    (n.y = r),
                                    (s = kd.dot(gi.e, gi.temp1)),
                                    (n = gi.temp1),
                                    (r = gi.q.x - this.m_v1.x);
                                var A = gi.q.y - this.m_v1.y;
                                if ((null == A && (A = 0), null == r && (r = 0), (n.x = r), (n.y = A), (r = kd.dot(gi.e, gi.temp1)), (n = t.m_radius + a.m_radius), 0 >= r)) {
                                    if (
                                        ((s = gi.p),
                                        (r = this.m_v1),
                                        (s.x = r.x),
                                        (s.y = r.y),
                                        (s = gi.temp1),
                                        (r = gi.q.x - gi.p.x),
                                        null == (A = gi.q.y - gi.p.y) && (A = 0),
                                        null == r && (r = 0),
                                        (s.x = r),
                                        (s.y = A),
                                        !(kd.dot(gi.temp1, gi.temp1) > n * n))
                                    ) {
                                        if (
                                            t.m_hasVertex0 &&
                                            ((t = gi.temp1),
                                            (n = this.m_v1.x - this.m_v0.x),
                                            null == (s = this.m_v1.y - this.m_v0.y) && (s = 0),
                                            null == n && (n = 0),
                                            (t.x = n),
                                            (t.y = s),
                                            (t = gi.temp2),
                                            (n = this.m_v1.x - gi.q.x),
                                            null == (s = this.m_v1.y - gi.q.y) && (s = 0),
                                            null == n && (n = 0),
                                            (t.x = n),
                                            (t.y = s),
                                            0 < kd.dot(gi.temp1, gi.temp2))
                                        )
                                            return;
                                        (e.m_pointCount = 1),
                                            (e.m_type = 1),
                                            ((t = e.m_localPlaneNormal).x = 0),
                                            (t.y = 0),
                                            (t = e.m_localPoint),
                                            (n = gi.p),
                                            (t.x = n.x),
                                            (t.y = n.y),
                                            e.m_points[0].m_id.set_key(0),
                                            (e.m_points[0].m_id.indexA = 0),
                                            (e.m_points[0].m_id.indexB = 0),
                                            (e.m_points[0].m_id.typeA = pv.VERTEX),
                                            (e.m_points[0].m_id.typeB = pv.VERTEX),
                                            (e = e.m_points[0].m_localPoint),
                                            (a = a.m_p),
                                            (e.x = a.x),
                                            (e.y = a.y);
                                    }
                                } else if (0 >= s) {
                                    if (
                                        ((s = gi.p),
                                        (r = this.m_v2),
                                        (s.x = r.x),
                                        (s.y = r.y),
                                        (s = gi.temp1),
                                        (r = gi.q.x - gi.p.x),
                                        null == (A = gi.q.y - gi.p.y) && (A = 0),
                                        null == r && (r = 0),
                                        (s.x = r),
                                        (s.y = A),
                                        !(kd.dot(gi.temp1, gi.temp1) > n * n))
                                    ) {
                                        if (
                                            t.m_hasVertex3 &&
                                            ((t = gi.temp1),
                                            (n = this.m_v3.x - this.m_v2.x),
                                            null == (s = this.m_v3.y - this.m_v2.y) && (s = 0),
                                            null == n && (n = 0),
                                            (t.x = n),
                                            (t.y = s),
                                            (t = gi.temp2),
                                            (n = gi.q.x - this.m_v2.x),
                                            null == (s = gi.q.y - this.m_v2.y) && (s = 0),
                                            null == n && (n = 0),
                                            (t.x = n),
                                            (t.y = s),
                                            0 < kd.dot(gi.temp1, gi.temp2))
                                        )
                                            return;
                                        (e.m_pointCount = 1),
                                            (e.m_type = 1),
                                            ((t = e.m_localPlaneNormal).x = 0),
                                            (t.y = 0),
                                            (t = e.m_localPoint),
                                            (n = gi.p),
                                            (t.x = n.x),
                                            (t.y = n.y),
                                            e.m_points[0].m_id.set_key(0),
                                            (e.m_points[0].m_id.indexA = 1),
                                            (e.m_points[0].m_id.indexB = 0),
                                            (e.m_points[0].m_id.typeA = pv.VERTEX),
                                            (e.m_points[0].m_id.typeB = pv.VERTEX),
                                            (e = e.m_points[0].m_localPoint),
                                            (a = a.m_p),
                                            (e.x = a.x),
                                            (e.y = a.y);
                                    }
                                } else
                                    (t = kd.dot(gi.e, gi.e)),
                                        Me.b2Assert(0 < t),
                                        (gi.p.x = (1 / t) * (this.m_v1.x * s + this.m_v2.x * r)),
                                        (gi.p.y = (1 / t) * (this.m_v1.y * s + this.m_v2.y * r)),
                                        (gi.temp1.x = gi.q.x - gi.p.x),
                                        (gi.temp1.y = gi.q.y - gi.p.y),
                                        kd.dot(gi.temp1, gi.temp1) > n * n ||
                                            ((t = gi.temp1),
                                            (n = -gi.e.y),
                                            null == (s = gi.e.x) && (s = 0),
                                            null == n && (n = 0),
                                            (t.x = n),
                                            (t.y = s),
                                            (t = gi.temp2),
                                            (n = gi.q.x - this.m_v1.x),
                                            null == (s = gi.q.y - this.m_v1.y) && (s = 0),
                                            null == n && (n = 0),
                                            (t.x = n),
                                            (t.y = s),
                                            0 > kd.dot(gi.temp1, gi.temp2) && (((t = gi.temp1).x = -t.x), (t.y = -t.y)),
                                            gi.temp1.normalize(),
                                            (e.m_pointCount = 1),
                                            (e.m_type = 2),
                                            (t = e.m_localPlaneNormal),
                                            (n = gi.temp1),
                                            (t.x = n.x),
                                            (t.y = n.y),
                                            (t = e.m_localPoint),
                                            (n = this.m_v1),
                                            (t.x = n.x),
                                            (t.y = n.y),
                                            e.m_points[0].m_id.set_key(0),
                                            (e.m_points[0].m_id.indexA = 0),
                                            (e.m_points[0].m_id.indexB = 0),
                                            (e.m_points[0].m_id.typeA = pv.FACE),
                                            (e.m_points[0].m_id.typeB = pv.VERTEX),
                                            (e = e.m_points[0].m_localPoint),
                                            (a = a.m_p),
                                            (e.x = a.x),
                                            (e.y = a.y));
                            },
                            multiplyTransformsInverse: function (e, t, n) {
                                this.multiplyRotationsInverse(e.R, t.R, gi.mat);
                                var a = gi.temp2;
                                (t = t.position),
                                    (a.x = t.x),
                                    (a.y = t.y),
                                    gi.temp2.subtract(e.position),
                                    this.multiplyRotationVectorInverse(e.R, gi.temp2, n.position),
                                    (e = n.R.col1),
                                    (a = gi.mat.col1),
                                    (e.x = a.x),
                                    (e.y = a.y),
                                    (n = n.R.col2),
                                    (e = gi.mat.col2),
                                    (n.x = e.x),
                                    (n.y = e.y);
                            },
                            multiplyRotationsInverse: function (e, t, n) {
                                (n.col1.x = e.col1.x * t.col1.x + e.col1.y * t.col1.y),
                                    (n.col1.y = e.col2.x * t.col1.x + e.col2.y * t.col1.y),
                                    (n.col2.x = e.col1.x * t.col2.x + e.col1.y * t.col2.y),
                                    (n.col2.y = e.col2.x * t.col2.x + e.col2.y * t.col2.y);
                            },
                            multiplyRotationVector: function (e, t, n) {
                                (n.x = e.col1.x * t.x + e.col2.x * t.y), (n.y = e.col1.y * t.x + e.col2.y * t.y);
                            },
                            multiplyRotationVectorInverse: function (e, t, n) {
                                (n.x = e.col1.x * t.x + e.col1.y * t.y), (n.y = e.col2.x * t.x + e.col2.y * t.y);
                            },
                            multiplyTransformVector: function (e, t, n) {
                                (n.x = e.R.col1.x * t.x + e.R.col2.x * t.y + e.position.x), (n.y = e.R.col1.y * t.x + e.R.col2.y * t.y + e.position.y);
                            },
                            __class__: gi,
                        }));
                    var ZU = function () {
                        xl.call(this);
                    };
                    (v["box2D.dynamics.contacts.B2PolyAndCircleContact"] = ZU),
                        (ZU.__name__ = "box2D.dynamics.contacts.B2PolyAndCircleContact"),
                        (ZU.create = function (e) {
                            return new ZU();
                        }),
                        (ZU.destroy = function (e, t) {}),
                        (ZU.__super__ = xl),
                        (ZU.prototype = K(xl.prototype, {
                            reset: function (e, t) {
                                xl.prototype.reset.call(this, e, t), Me.b2Assert(1 == e.getType()), Me.b2Assert(0 == t.getType());
                            },
                            evaluate: function () {
                                var e = this.m_fixtureA.m_body,
                                    t = this.m_fixtureB.m_body;
                                Nm.collidePolygonAndCircle(this.m_manifold, d.__cast(this.m_fixtureA.getShape(), ct), e.m_xf, d.__cast(this.m_fixtureB.getShape(), Rw), t.m_xf);
                            },
                            __class__: ZU,
                        }));
                    var aV = function () {
                        (this.v = new td()), (this.id = new pv());
                    };
                    (v["box2D.dynamics.contacts.ClipVertex"] = aV),
                        (aV.__name__ = "box2D.dynamics.contacts.ClipVertex"),
                        (aV.prototype = {
                            v: null,
                            id: null,
                            set: function (e) {
                                var t = this.v,
                                    n = e.v;
                                (t.x = n.x), (t.y = n.y), this.id.set(e.id);
                            },
                            __class__: aV,
                        });
                    var F4 = function () {};
                    (v["box2D.dynamics.contacts.EPAxis"] = F4), (F4.__name__ = "box2D.dynamics.contacts.EPAxis"), (F4.prototype = { type: null, index: null, separation: null, __class__: F4 });
                    var M8 = function () {
                        (this.vertices = []), (this.normals = []);
                        for (var e = 0; 32 > e; ) e++, this.vertices.push(new td()), this.normals.push(new td());
                    };
                    (v["box2D.dynamics.contacts.TempPolygon"] = M8), (M8.__name__ = "box2D.dynamics.contacts.TempPolygon"), (M8.prototype = { vertices: null, normals: null, count: null, __class__: M8 });
                    var N8 = function () {
                        (this.v1 = new td()), (this.v2 = new td()), (this.normal = new td()), (this.sideNormal1 = new td()), (this.sideNormal2 = new td());
                    };
                    (v["box2D.dynamics.contacts.ReferenceFace"] = N8),
                        (N8.__name__ = "box2D.dynamics.contacts.ReferenceFace"),
                        (N8.prototype = { i1: null, i2: null, v1: null, v2: null, normal: null, sideNormal1: null, sideNormal2: null, sideOffset1: null, sideOffset2: null, __class__: N8 });
                    var Cc = function () {
                        xl.call(this);
                    };
                    (v["box2D.dynamics.contacts.B2PolyAndEdgeContact"] = Cc),
                        (Cc.__name__ = "box2D.dynamics.contacts.B2PolyAndEdgeContact"),
                        (Cc.create = function (e) {
                            return new Cc();
                        }),
                        (Cc.destroy = function (e, t) {}),
                        (Cc.clipSegmentToLine = function (e, t, n, a, s) {
                            var r = 0,
                                A = kd.dot(n, t[0].v) - a;
                            return (
                                (n = kd.dot(n, t[1].v) - a),
                                0 >= A && e[r++].set(t[0]),
                                0 >= n && e[r++].set(t[1]),
                                0 > A * n &&
                                    ((A /= A - n),
                                    (n = e[r].v),
                                    (a = t[1].v),
                                    (n.x = a.x),
                                    (n.y = a.y),
                                    e[r].v.subtract(t[0].v),
                                    e[r].v.multiply(A),
                                    e[r].v.add(t[0].v),
                                    (e[r].id.indexA = s),
                                    (e[r].id.indexB = t[0].id.indexB),
                                    (e[r].id.typeA = pv.VERTEX),
                                    (e[r].id.typeB = pv.FACE),
                                    ++r),
                                r
                            );
                        }),
                        (Cc.__super__ = xl),
                        (Cc.prototype = K(xl.prototype, {
                            m_v0: null,
                            m_v1: null,
                            m_v2: null,
                            m_v3: null,
                            m_front: null,
                            m_radius: null,
                            reset: function (e, t) {
                                e.getShape() instanceof ct
                                    ? (xl.prototype.reset.call(this, t, e), Me.b2Assert(1 == e.getType()), Me.b2Assert(2 == t.getType()))
                                    : (xl.prototype.reset.call(this, e, t), Me.b2Assert(2 == e.getType()), Me.b2Assert(1 == t.getType()));
                            },
                            evaluate: function () {
                                var e = this.m_fixtureA.getBody(),
                                    t = this.m_fixtureB.getBody();
                                this.b2CollidePolyAndEdge(this.m_manifold, d.__cast(this.m_fixtureA.getShape(), oQ), e.m_xf, d.__cast(this.m_fixtureB.getShape(), ct), t.m_xf);
                            },
                            b2CollidePolyAndEdge: function (e, t, n, a, s) {
                                this.multiplyTransformsInverse(n, s, Cc.m_xf), this.multiplyTransformVector(Cc.m_xf, a.m_centroid, Cc.temp);
                                var r = Cc.m_centroidB,
                                    A = Cc.temp;
                                (r.x = A.x), (r.y = A.y), (this.m_v0 = t.m_v0), (this.m_v1 = t.m_v1), (this.m_v2 = t.m_v2), (this.m_v3 = t.m_v3);
                                var l = t.m_hasVertex0,
                                    o = t.m_hasVertex3,
                                    i = Cc.edge1,
                                    u = this.m_v2;
                                (i.x = u.x), (i.y = u.y), Cc.edge1.subtract(this.m_v1), Cc.edge1.normalize();
                                var g = Cc.m_normal1,
                                    m = Cc.edge1.y,
                                    d = -Cc.edge1.x;
                                null == d && (d = 0), null == m && (m = 0), (g.x = m), (g.y = d);
                                var c = Cc.temp,
                                    p = Cc.m_centroidB;
                                (c.x = p.x), (c.y = p.y), Cc.temp.subtract(this.m_v1);
                                var h = kd.dot(Cc.m_normal1, Cc.temp),
                                    f = 0,
                                    y = 0,
                                    R = !1,
                                    v = !1;
                                if (l) {
                                    var b = Cc.edge0,
                                        F = this.m_v1;
                                    (b.x = F.x), (b.y = F.y), Cc.edge0.subtract(this.m_v0), Cc.edge0.normalize();
                                    var N = Cc.m_normal0,
                                        _ = Cc.edge0.y,
                                        I = -Cc.edge0.x;
                                    null == I && (I = 0), null == _ && (_ = 0), (N.x = _), (N.y = I), (R = 0 <= kd.crossVV(Cc.edge0, Cc.edge1));
                                    var D = Cc.temp,
                                        E = Cc.m_centroidB;
                                    (D.x = E.x), (D.y = E.y), Cc.temp.subtract(this.m_v0), (f = kd.dot(Cc.m_normal0, Cc.temp));
                                }
                                if (o) {
                                    var G = Cc.edge2,
                                        S = this.m_v3;
                                    (G.x = S.x), (G.y = S.y), Cc.edge2.subtract(this.m_v2), Cc.edge2.normalize();
                                    var T = Cc.m_normal2,
                                        U = Cc.edge2.y,
                                        M = -Cc.edge2.x;
                                    null == M && (M = 0), null == U && (U = 0), (T.x = U), (T.y = M), (v = 0 < kd.crossVV(Cc.edge1, Cc.edge2));
                                    var V = Cc.temp,
                                        C = Cc.m_centroidB;
                                    (V.x = C.x), (V.y = C.y), Cc.temp.subtract(this.m_v2), (y = kd.dot(Cc.m_normal2, Cc.temp));
                                }
                                if (l && o)
                                    if (R && v)
                                        if ((this.m_front = 0 <= f || 0 <= h || 0 <= y)) {
                                            var B = Cc.m_normal,
                                                P = Cc.m_normal1;
                                            (B.x = P.x), (B.y = P.y);
                                            var O = Cc.m_lowerLimit,
                                                w = Cc.m_normal0;
                                            (O.x = w.x), (O.y = w.y);
                                            var k = Cc.m_upperLimit,
                                                x = Cc.m_normal2;
                                            (k.x = x.x), (k.y = x.y);
                                        } else {
                                            var Q = Cc.m_normal,
                                                L = Cc.m_normal1;
                                            (Q.x = L.x), (Q.y = L.y);
                                            var X = Cc.m_normal;
                                            (X.x = -X.x), (X.y = -X.y);
                                            var z = Cc.m_lowerLimit,
                                                Y = Cc.m_normal1;
                                            (z.x = Y.x), (z.y = Y.y);
                                            var W = Cc.m_lowerLimit;
                                            (W.x = -W.x), (W.y = -W.y);
                                            var Z = Cc.m_upperLimit,
                                                H = Cc.m_normal1;
                                            (Z.x = H.x), (Z.y = H.y);
                                            var J = Cc.m_upperLimit;
                                            (J.x = -J.x), (J.y = -J.y);
                                        }
                                    else if (R)
                                        if ((this.m_front = 0 <= f || (0 <= h && 0 <= y))) {
                                            var j = Cc.m_normal,
                                                q = Cc.m_normal1;
                                            (j.x = q.x), (j.y = q.y);
                                            var K = Cc.m_lowerLimit,
                                                $ = Cc.m_normal0;
                                            (K.x = $.x), (K.y = $.y);
                                            var ee = Cc.m_upperLimit,
                                                te = Cc.m_normal1;
                                            (ee.x = te.x), (ee.y = te.y);
                                        } else {
                                            var ne = Cc.m_normal,
                                                ae = Cc.m_normal1;
                                            (ne.x = ae.x), (ne.y = ae.y);
                                            var se = Cc.m_normal;
                                            (se.x = -se.x), (se.y = -se.y);
                                            var re = Cc.m_lowerLimit,
                                                Ae = Cc.m_normal2;
                                            (re.x = Ae.x), (re.y = Ae.y);
                                            var le = Cc.m_lowerLimit;
                                            (le.x = -le.x), (le.y = -le.y);
                                            var oe = Cc.m_upperLimit,
                                                ie = Cc.m_normal1;
                                            (oe.x = ie.x), (oe.y = ie.y);
                                            var ue = Cc.m_upperLimit;
                                            (ue.x = -ue.x), (ue.y = -ue.y);
                                        }
                                    else if (v)
                                        if ((this.m_front = 0 <= y || (0 <= f && 0 <= h))) {
                                            var ge = Cc.m_normal,
                                                me = Cc.m_normal1;
                                            (ge.x = me.x), (ge.y = me.y);
                                            var de = Cc.m_lowerLimit,
                                                ce = Cc.m_normal1;
                                            (de.x = ce.x), (de.y = ce.y);
                                            var pe = Cc.m_upperLimit,
                                                he = Cc.m_normal2;
                                            (pe.x = he.x), (pe.y = he.y);
                                        } else {
                                            var fe = Cc.m_normal,
                                                ye = Cc.m_normal1;
                                            (fe.x = ye.x), (fe.y = ye.y);
                                            var Re = Cc.m_normal;
                                            (Re.x = -Re.x), (Re.y = -Re.y);
                                            var ve = Cc.m_lowerLimit,
                                                be = Cc.m_normal1;
                                            (ve.x = be.x), (ve.y = be.y);
                                            var Fe = Cc.m_lowerLimit;
                                            (Fe.x = -Fe.x), (Fe.y = -Fe.y);
                                            var Ne = Cc.m_upperLimit,
                                                _e = Cc.m_normal0;
                                            (Ne.x = _e.x), (Ne.y = _e.y);
                                            var Ie = Cc.m_upperLimit;
                                            (Ie.x = -Ie.x), (Ie.y = -Ie.y);
                                        }
                                    else if ((this.m_front = 0 <= f && 0 <= h && 0 <= y)) {
                                        var De = Cc.m_normal,
                                            Ee = Cc.m_normal1;
                                        (De.x = Ee.x), (De.y = Ee.y);
                                        var Ge = Cc.m_lowerLimit,
                                            Se = Cc.m_normal1;
                                        (Ge.x = Se.x), (Ge.y = Se.y);
                                        var Te = Cc.m_upperLimit,
                                            Ue = Cc.m_normal1;
                                        (Te.x = Ue.x), (Te.y = Ue.y);
                                    } else {
                                        var Ve = Cc.m_normal,
                                            Ce = Cc.m_normal1;
                                        (Ve.x = Ce.x), (Ve.y = Ce.y);
                                        var Be = Cc.m_normal;
                                        (Be.x = -Be.x), (Be.y = -Be.y);
                                        var Pe = Cc.m_lowerLimit,
                                            Oe = Cc.m_normal2;
                                        (Pe.x = Oe.x), (Pe.y = Oe.y);
                                        var we = Cc.m_lowerLimit;
                                        (we.x = -we.x), (we.y = -we.y);
                                        var ke = Cc.m_upperLimit,
                                            xe = Cc.m_normal0;
                                        (ke.x = xe.x), (ke.y = xe.y);
                                        var Qe = Cc.m_upperLimit;
                                        (Qe.x = -Qe.x), (Qe.y = -Qe.y);
                                    }
                                else if (l)
                                    if (R)
                                        if ((this.m_front = 0 <= f || 0 <= h)) {
                                            var Le = Cc.m_normal,
                                                Xe = Cc.m_normal1;
                                            (Le.x = Xe.x), (Le.y = Xe.y);
                                            var ze = Cc.m_lowerLimit,
                                                Ye = Cc.m_normal0;
                                            (ze.x = Ye.x), (ze.y = Ye.y);
                                            var We = Cc.m_upperLimit,
                                                Ze = Cc.m_normal1;
                                            (We.x = Ze.x), (We.y = Ze.y);
                                            var He = Cc.m_upperLimit;
                                            (He.x = -He.x), (He.y = -He.y);
                                        } else {
                                            var Je = Cc.m_normal,
                                                je = Cc.m_normal1;
                                            (Je.x = je.x), (Je.y = je.y);
                                            var qe = Cc.m_normal;
                                            (qe.x = -qe.x), (qe.y = -qe.y);
                                            var Ke = Cc.m_lowerLimit,
                                                $e = Cc.m_normal1;
                                            (Ke.x = $e.x), (Ke.y = $e.y);
                                            var et = Cc.m_upperLimit,
                                                tt = Cc.m_normal1;
                                            (et.x = tt.x), (et.y = tt.y);
                                            var nt = Cc.m_upperLimit;
                                            (nt.x = -nt.x), (nt.y = -nt.y);
                                        }
                                    else if ((this.m_front = 0 <= f && 0 <= h)) {
                                        var at = Cc.m_normal,
                                            st = Cc.m_normal1;
                                        (at.x = st.x), (at.y = st.y);
                                        var rt = Cc.m_lowerLimit,
                                            At = Cc.m_normal1;
                                        (rt.x = At.x), (rt.y = At.y);
                                        var lt = Cc.m_upperLimit,
                                            ot = Cc.m_normal1;
                                        (lt.x = ot.x), (lt.y = ot.y);
                                        var it = Cc.m_upperLimit;
                                        (it.x = -it.x), (it.y = -it.y);
                                    } else {
                                        var ut = Cc.m_normal,
                                            gt = Cc.m_normal1;
                                        (ut.x = gt.x), (ut.y = gt.y);
                                        var mt = Cc.m_normal;
                                        (mt.x = -mt.x), (mt.y = -mt.y);
                                        var dt = Cc.m_lowerLimit,
                                            ct = Cc.m_normal1;
                                        (dt.x = ct.x), (dt.y = ct.y);
                                        var pt = Cc.m_upperLimit,
                                            ht = Cc.m_normal0;
                                        (pt.x = ht.x), (pt.y = ht.y);
                                        var ft = Cc.m_upperLimit;
                                        (ft.x = -ft.x), (ft.y = -ft.y);
                                    }
                                else if (o)
                                    if (v)
                                        if ((this.m_front = 0 <= h || 0 <= y)) {
                                            var yt = Cc.m_normal,
                                                Rt = Cc.m_normal1;
                                            (yt.x = Rt.x), (yt.y = Rt.y);
                                            var vt = Cc.m_lowerLimit,
                                                bt = Cc.m_normal1;
                                            (vt.x = bt.x), (vt.y = bt.y);
                                            var Ft = Cc.m_lowerLimit;
                                            (Ft.x = -Ft.x), (Ft.y = -Ft.y);
                                            var Nt = Cc.m_upperLimit,
                                                _t = Cc.m_normal2;
                                            (Nt.x = _t.x), (Nt.y = _t.y);
                                        } else {
                                            var It = Cc.m_normal,
                                                Dt = Cc.m_normal1;
                                            (It.x = Dt.x), (It.y = Dt.y);
                                            var Et = Cc.m_normal;
                                            (Et.x = -Et.x), (Et.y = -Et.y);
                                            var Gt = Cc.m_lowerLimit,
                                                St = Cc.m_normal1;
                                            (Gt.x = St.x), (Gt.y = St.y);
                                            var Tt = Cc.m_lowerLimit;
                                            (Tt.x = -Tt.x), (Tt.y = -Tt.y);
                                            var Ut = Cc.m_upperLimit,
                                                Mt = Cc.m_normal1;
                                            (Ut.x = Mt.x), (Ut.y = Mt.y);
                                        }
                                    else if ((this.m_front = 0 <= h && 0 <= y)) {
                                        var Vt = Cc.m_normal,
                                            Ct = Cc.m_normal1;
                                        (Vt.x = Ct.x), (Vt.y = Ct.y);
                                        var Bt = Cc.m_lowerLimit,
                                            Pt = Cc.m_normal1;
                                        (Bt.x = Pt.x), (Bt.y = Pt.y);
                                        var Ot = Cc.m_lowerLimit;
                                        (Ot.x = -Ot.x), (Ot.y = -Ot.y);
                                        var wt = Cc.m_upperLimit,
                                            kt = Cc.m_normal1;
                                        (wt.x = kt.x), (wt.y = kt.y);
                                    } else {
                                        var xt = Cc.m_normal,
                                            Qt = Cc.m_normal1;
                                        (xt.x = Qt.x), (xt.y = Qt.y);
                                        var Lt = Cc.m_normal;
                                        (Lt.x = -Lt.x), (Lt.y = -Lt.y);
                                        var Xt = Cc.m_lowerLimit,
                                            zt = Cc.m_normal2;
                                        (Xt.x = zt.x), (Xt.y = zt.y);
                                        var Yt = Cc.m_lowerLimit;
                                        (Yt.x = -Yt.x), (Yt.y = -Yt.y);
                                        var Wt = Cc.m_upperLimit,
                                            Zt = Cc.m_normal1;
                                        (Wt.x = Zt.x), (Wt.y = Zt.y);
                                    }
                                else if ((this.m_front = 0 <= h)) {
                                    var Ht = Cc.m_normal,
                                        Jt = Cc.m_normal1;
                                    (Ht.x = Jt.x), (Ht.y = Jt.y);
                                    var jt = Cc.m_lowerLimit,
                                        qt = Cc.m_normal1;
                                    (jt.x = qt.x), (jt.y = qt.y);
                                    var Kt = Cc.m_lowerLimit;
                                    (Kt.x = -Kt.x), (Kt.y = -Kt.y);
                                    var $t = Cc.m_upperLimit,
                                        en = Cc.m_normal1;
                                    ($t.x = en.x), ($t.y = en.y);
                                    var tn = Cc.m_upperLimit;
                                    (tn.x = -tn.x), (tn.y = -tn.y);
                                } else {
                                    var nn = Cc.m_normal,
                                        an = Cc.m_normal1;
                                    (nn.x = an.x), (nn.y = an.y);
                                    var sn = Cc.m_normal;
                                    (sn.x = -sn.x), (sn.y = -sn.y);
                                    var rn = Cc.m_lowerLimit,
                                        An = Cc.m_normal1;
                                    (rn.x = An.x), (rn.y = An.y);
                                    var ln = Cc.m_upperLimit,
                                        on = Cc.m_normal1;
                                    (ln.x = on.x), (ln.y = on.y);
                                }
                                Cc.m_polygonB.count = a.m_vertexCount;
                                for (var un = 0, gn = a.m_vertexCount; un < gn; ) {
                                    var mn = un++;
                                    this.multiplyTransformVector(Cc.m_xf, a.m_vertices[mn], Cc.temp);
                                    var dn = Cc.m_polygonB.vertices[mn],
                                        cn = Cc.temp;
                                    (dn.x = cn.x), (dn.y = cn.y), this.multiplyRotationVector(Cc.m_xf.R, a.m_normals[mn], Cc.temp);
                                    var pn = Cc.m_polygonB.normals[mn],
                                        hn = Cc.temp;
                                    (pn.x = hn.x), (pn.y = hn.y);
                                }
                                if (
                                    ((this.m_radius = 2 * Me.b2_polygonRadius),
                                    (e.m_pointCount = 0),
                                    this.computeEdgeSeparation(Cc.edgeAxis),
                                    !(
                                        Cc.edgeAxis.type == bV.UNKNOWN ||
                                        Cc.edgeAxis.separation > this.m_radius ||
                                        (this.computePolygonSeparation(Cc.polygonAxis), Cc.polygonAxis.type != bV.UNKNOWN && Cc.polygonAxis.separation > this.m_radius)
                                    ))
                                ) {
                                    var fn = Cc.polygonAxis.type == bV.UNKNOWN ? Cc.edgeAxis : Cc.polygonAxis.separation > 0.98 * Cc.edgeAxis.separation + 0.001 ? Cc.polygonAxis : Cc.edgeAxis;
                                    if (fn.type == bV.EDGE_A) {
                                        e.m_type = 2;
                                        for (var yn = 0, Rn = kd.dot(Cc.m_normal, Cc.m_polygonB.normals[0]), vn = 1, bn = Cc.m_polygonB.count; vn < bn; ) {
                                            var Fn = vn++,
                                                Nn = kd.dot(Cc.m_normal, Cc.m_polygonB.normals[Fn]);
                                            Nn < Rn && ((Rn = Nn), (yn = Fn));
                                        }
                                        var _n = yn,
                                            In = _n + 1 < Cc.m_polygonB.count ? _n + 1 : 0,
                                            Dn = Cc.ie[0].v,
                                            En = Cc.m_polygonB.vertices[_n];
                                        (Dn.x = En.x), (Dn.y = En.y), (Cc.ie[0].id.indexA = 0), (Cc.ie[0].id.indexB = _n), (Cc.ie[0].id.typeA = pv.FACE), (Cc.ie[0].id.typeB = pv.VERTEX);
                                        var Gn = Cc.ie[1].v,
                                            Sn = Cc.m_polygonB.vertices[In];
                                        if (((Gn.x = Sn.x), (Gn.y = Sn.y), (Cc.ie[1].id.indexA = 0), (Cc.ie[1].id.indexB = In), (Cc.ie[1].id.typeA = pv.FACE), (Cc.ie[1].id.typeB = pv.VERTEX), this.m_front)) {
                                            (Cc.rf.i1 = 0), (Cc.rf.i2 = 1);
                                            var Tn = Cc.rf.v1,
                                                Un = this.m_v1;
                                            (Tn.x = Un.x), (Tn.y = Un.y);
                                            var Mn = Cc.rf.v2,
                                                Vn = this.m_v2;
                                            (Mn.x = Vn.x), (Mn.y = Vn.y);
                                            var Cn = Cc.rf.normal,
                                                Bn = Cc.m_normal1;
                                            (Cn.x = Bn.x), (Cn.y = Bn.y);
                                        } else {
                                            (Cc.rf.i1 = 1), (Cc.rf.i2 = 0);
                                            var Pn = Cc.rf.v1,
                                                On = this.m_v2;
                                            (Pn.x = On.x), (Pn.y = On.y);
                                            var wn = Cc.rf.v2,
                                                kn = this.m_v1;
                                            (wn.x = kn.x), (wn.y = kn.y);
                                            var xn = Cc.rf.normal,
                                                Qn = Cc.m_normal1;
                                            (xn.x = Qn.x), (xn.y = Qn.y);
                                            var Ln = Cc.rf.normal;
                                            (Ln.x = -Ln.x), (Ln.y = -Ln.y);
                                        }
                                    } else {
                                        e.m_type = 4;
                                        var Xn = Cc.ie[0].v,
                                            zn = this.m_v1;
                                        (Xn.x = zn.x), (Xn.y = zn.y), (Cc.ie[0].id.indexA = 0), (Cc.ie[0].id.indexB = fn.index), (Cc.ie[0].id.typeA = pv.VERTEX), (Cc.ie[0].id.typeB = pv.FACE);
                                        var Yn = Cc.ie[1].v,
                                            Wn = this.m_v2;
                                        (Yn.x = Wn.x),
                                            (Yn.y = Wn.y),
                                            (Cc.ie[1].id.indexA = 0),
                                            (Cc.ie[1].id.indexB = fn.index),
                                            (Cc.ie[1].id.typeA = pv.VERTEX),
                                            (Cc.ie[1].id.typeB = pv.FACE),
                                            (Cc.rf.i1 = fn.index),
                                            (Cc.rf.i2 = Cc.rf.i1 + 1 < Cc.m_polygonB.count ? Cc.rf.i1 + 1 : 0);
                                        var Zn = Cc.rf.v1,
                                            Hn = Cc.m_polygonB.vertices[Cc.rf.i1];
                                        (Zn.x = Hn.x), (Zn.y = Hn.y);
                                        var Jn = Cc.rf.v2,
                                            jn = Cc.m_polygonB.vertices[Cc.rf.i2];
                                        (Jn.x = jn.x), (Jn.y = jn.y);
                                        var qn = Cc.rf.normal,
                                            Kn = Cc.m_polygonB.normals[Cc.rf.i1];
                                        (qn.x = Kn.x), (qn.y = Kn.y);
                                    }
                                    var $n = Cc.rf.sideNormal1,
                                        ea = Cc.rf.normal.y,
                                        ta = -Cc.rf.normal.x;
                                    null == ta && (ta = 0), null == ea && (ea = 0), ($n.x = ea), ($n.y = ta);
                                    var na = Cc.rf.sideNormal2,
                                        aa = Cc.rf.sideNormal1;
                                    (na.x = aa.x), (na.y = aa.y);
                                    var sa = Cc.rf.sideNormal2;
                                    (sa.x = -sa.x), (sa.y = -sa.y), (Cc.rf.sideOffset1 = kd.dot(Cc.rf.sideNormal1, Cc.rf.v1)), (Cc.rf.sideOffset2 = kd.dot(Cc.rf.sideNormal2, Cc.rf.v2));
                                    var ra = Cc.clipSegmentToLine(Cc.clipPoints1, Cc.ie, Cc.rf.sideNormal1, Cc.rf.sideOffset1, Cc.rf.i1);
                                    if (!(ra < Me.b2_maxManifoldPoints || ((ra = Cc.clipSegmentToLine(Cc.clipPoints2, Cc.clipPoints1, Cc.rf.sideNormal2, Cc.rf.sideOffset2, Cc.rf.i2)), ra < Me.b2_maxManifoldPoints))) {
                                        if (fn.type == bV.EDGE_A) {
                                            var Aa = e.m_localPlaneNormal,
                                                la = Cc.rf.normal;
                                            (Aa.x = la.x), (Aa.y = la.y);
                                            var oa = e.m_localPoint,
                                                ia = Cc.rf.v1;
                                            (oa.x = ia.x), (oa.y = ia.y);
                                        } else {
                                            var ua = e.m_localPlaneNormal,
                                                ga = a.m_normals[Cc.rf.i1];
                                            (ua.x = ga.x), (ua.y = ga.y);
                                            var ma = e.m_localPoint,
                                                da = a.m_vertices[Cc.rf.i1];
                                            (ma.x = da.x), (ma.y = da.y);
                                        }
                                        for (var ca = 0, pa = 0, ha = Me.b2_maxManifoldPoints; pa < ha; ) {
                                            var fa = pa++,
                                                ya = Cc.temp,
                                                Ra = Cc.clipPoints2[fa].v;
                                            if (((ya.x = Ra.x), (ya.y = Ra.y), Cc.temp.subtract(Cc.rf.v1), kd.dot(Cc.rf.normal, Cc.temp) <= this.m_radius)) {
                                                var va = e.m_points[ca];
                                                if (fn.type == bV.EDGE_A) {
                                                    var ba = va.m_localPoint,
                                                        Fa = kd.mulXT(Cc.m_xf, Cc.clipPoints2[fa].v);
                                                    (ba.x = Fa.x), (ba.y = Fa.y), va.m_id.set(Cc.clipPoints2[fa].id);
                                                } else {
                                                    var Na = va.m_localPoint,
                                                        _a = Cc.clipPoints2[fa].v;
                                                    (Na.x = _a.x),
                                                        (Na.y = _a.y),
                                                        (va.m_id.typeA = Cc.clipPoints2[fa].id.typeB),
                                                        (va.m_id.typeB = Cc.clipPoints2[fa].id.typeA),
                                                        (va.m_id.indexA = Cc.clipPoints2[fa].id.indexB),
                                                        (va.m_id.indexB = Cc.clipPoints2[fa].id.indexA);
                                                }
                                                ++ca;
                                            }
                                        }
                                        e.m_pointCount = ca;
                                    }
                                }
                            },
                            computeEdgeSeparation: function (e) {
                                (e.type = bV.EDGE_A), (e.index = this.m_front ? 0 : 1), (e.separation = Number.MAX_VALUE);
                                for (var t = 0, n = Cc.m_polygonB.count; t < n; ) {
                                    var a = t++,
                                        s = Cc.temp;
                                    (a = Cc.m_polygonB.vertices[a]), (s.x = a.x), (s.y = a.y), Cc.temp.subtract(this.m_v1), (s = kd.dot(Cc.m_normal, Cc.temp)) < e.separation && (e.separation = s);
                                }
                            },
                            computePolygonSeparation: function (e) {
                                (e.type = bV.UNKNOWN), (e.index = -1), (e.separation = -Number.MAX_VALUE);
                                var t = Cc.perp,
                                    n = -Cc.m_normal.y,
                                    a = Cc.m_normal.x;
                                for (null == a && (a = 0), null == n && (n = 0), t.x = n, t.y = a, t = 0, n = Cc.m_polygonB.count; t < n; ) {
                                    a = t++;
                                    var s = Cc.n,
                                        r = Cc.m_polygonB.normals[a];
                                    (s.x = r.x),
                                        (s.y = r.y),
                                        ((s = Cc.n).x = -s.x),
                                        (s.y = -s.y),
                                        (s = Cc.temp),
                                        (r = Cc.m_polygonB.vertices[a]),
                                        (s.x = r.x),
                                        (s.y = r.y),
                                        Cc.temp.subtract(this.m_v1),
                                        (s = kd.dot(Cc.n, Cc.temp)),
                                        (r = Cc.temp);
                                    var A = Cc.m_polygonB.vertices[a];
                                    if (((r.x = A.x), (r.y = A.y), Cc.temp.subtract(this.m_v2), (r = kd.dot(Cc.n, Cc.temp)), (s = Math.min(s, r)) > this.m_radius)) {
                                        (e.type = bV.EDGE_B), (e.index = a), (e.separation = s);
                                        break;
                                    }
                                    0 <= kd.dot(Cc.n, Cc.perp)
                                        ? ((r = Cc.temp), (A = Cc.n), (r.x = A.x), (r.y = A.y), Cc.temp.subtract(Cc.m_upperLimit))
                                        : ((r = Cc.temp), (A = Cc.n), (r.x = A.x), (r.y = A.y), Cc.temp.subtract(Cc.m_lowerLimit)),
                                        !(kd.dot(Cc.temp, Cc.m_normal) < -Me.b2_angularSlop) && s > e.separation && ((e.type = bV.EDGE_B), (e.index = a), (e.separation = s));
                                }
                            },
                            multiplyTransformsInverse: function (e, t, n) {
                                this.multiplyRotationsInverse(e.R, t.R, Cc.mat);
                                var a = Cc.temp2;
                                (t = t.position),
                                    (a.x = t.x),
                                    (a.y = t.y),
                                    Cc.temp2.subtract(e.position),
                                    this.multiplyRotationVectorInverse(e.R, Cc.temp2, n.position),
                                    (e = n.R.col1),
                                    (a = Cc.mat.col1),
                                    (e.x = a.x),
                                    (e.y = a.y),
                                    (n = n.R.col2),
                                    (e = Cc.mat.col2),
                                    (n.x = e.x),
                                    (n.y = e.y);
                            },
                            multiplyRotationsInverse: function (e, t, n) {
                                (n.col1.x = e.col1.x * t.col1.x + e.col1.y * t.col1.y),
                                    (n.col1.y = e.col2.x * t.col1.x + e.col2.y * t.col1.y),
                                    (n.col2.x = e.col1.x * t.col2.x + e.col1.y * t.col2.y),
                                    (n.col2.y = e.col2.x * t.col2.x + e.col2.y * t.col2.y);
                            },
                            multiplyRotationVector: function (e, t, n) {
                                (n.x = e.col1.x * t.x + e.col2.x * t.y), (n.y = e.col1.y * t.x + e.col2.y * t.y);
                            },
                            multiplyRotationVectorInverse: function (e, t, n) {
                                (n.x = e.col1.x * t.x + e.col1.y * t.y), (n.y = e.col2.x * t.x + e.col2.y * t.y);
                            },
                            multiplyTransformVector: function (e, t, n) {
                                (n.x = e.R.col1.x * t.x + e.R.col2.x * t.y + e.position.x), (n.y = e.R.col1.y * t.x + e.R.col2.y * t.y + e.position.y);
                            },
                            __class__: Cc,
                        }));
                    var bV = (Bc["box2D.dynamics.contacts.Type"] = {
                            __ename__: "box2D.dynamics.contacts.Type",
                            __constructs__: ["UNKNOWN", "EDGE_A", "EDGE_B"],
                            UNKNOWN: { _hx_index: 0, __enum__: "box2D.dynamics.contacts.Type", toString: I },
                            EDGE_A: { _hx_index: 1, __enum__: "box2D.dynamics.contacts.Type", toString: I },
                            EDGE_B: { _hx_index: 2, __enum__: "box2D.dynamics.contacts.Type", toString: I },
                        }),
                        $U = function () {
                            xl.call(this);
                        };
                    (v["box2D.dynamics.contacts.B2PolygonContact"] = $U),
                        ($U.__name__ = "box2D.dynamics.contacts.B2PolygonContact"),
                        ($U.create = function (e) {
                            return new $U();
                        }),
                        ($U.destroy = function (e, t) {}),
                        ($U.__super__ = xl),
                        ($U.prototype = K(xl.prototype, {
                            reset: function (e, t) {
                                xl.prototype.reset.call(this, e, t);
                            },
                            evaluate: function () {
                                var e = this.m_fixtureA.getBody(),
                                    t = this.m_fixtureB.getBody();
                                Nm.collidePolygons(this.m_manifold, d.__cast(this.m_fixtureA.getShape(), ct), e.m_xf, d.__cast(this.m_fixtureB.getShape(), ct), t.m_xf);
                            },
                            __class__: $U,
                        }));
                    var sca = function () {};
                    (v["box2D.dynamics.controllers.B2Controller"] = sca),
                        (sca.__name__ = "box2D.dynamics.controllers.B2Controller"),
                        (sca.prototype = {
                            step: function (e) {},
                            draw: function (e) {},
                            addBody: function (e) {
                                var t = new O8();
                                (t.controller = this),
                                    (t.body = e),
                                    (t.nextBody = this.m_bodyList),
                                    (t.prevBody = null),
                                    (this.m_bodyList = t),
                                    null != t.nextBody && (t.nextBody.prevBody = t),
                                    this.m_bodyCount++,
                                    (t.nextController = e.m_controllerList),
                                    (t.prevController = null),
                                    (e.m_controllerList = t),
                                    null != t.nextController && (t.nextController.prevController = t),
                                    e.m_controllerCount++;
                            },
                            removeBody: function (e) {
                                for (var t = e.m_controllerList; null != t && t.controller != this; ) t = t.nextController;
                                null != t.prevBody && (t.prevBody.nextBody = t.nextBody),
                                    null != t.nextBody && (t.nextBody.prevBody = t.prevBody),
                                    null != t.nextController && (t.nextController.prevController = t.prevController),
                                    null != t.prevController && (t.prevController.nextController = t.nextController),
                                    this.m_bodyList == t && (this.m_bodyList = t.nextBody),
                                    e.m_controllerList == t && (e.m_controllerList = t.nextController),
                                    e.m_controllerCount--,
                                    this.m_bodyCount--;
                            },
                            clear: function () {
                                for (; null != this.m_bodyList; ) this.removeBody(this.m_bodyList.body);
                            },
                            getNext: function () {
                                return this.m_next;
                            },
                            getWorld: function () {
                                return this.m_world;
                            },
                            getBodyList: function () {
                                return this.m_bodyList;
                            },
                            m_next: null,
                            m_prev: null,
                            m_bodyList: null,
                            m_bodyCount: null,
                            m_world: null,
                            __class__: sca,
                        });
                    var O8 = function () {};
                    (v["box2D.dynamics.controllers.B2ControllerEdge"] = O8),
                        (O8.__name__ = "box2D.dynamics.controllers.B2ControllerEdge"),
                        (O8.prototype = { controller: null, body: null, prevBody: null, nextBody: null, prevController: null, nextController: null, __class__: O8 });
                    var Or = function (e) {
                        (this.m_edgeA = new G4()),
                            (this.m_edgeB = new G4()),
                            (this.m_localCenterA = new td()),
                            (this.m_localCenterB = new td()),
                            Me.b2Assert(e.bodyA != e.bodyB),
                            (this.m_type = e.type),
                            (this.m_next = this.m_prev = null),
                            (this.m_bodyA = e.bodyA),
                            (this.m_bodyB = e.bodyB),
                            (this.m_collideConnected = e.collideConnected),
                            (this.m_islandFlag = !1),
                            (this.m_userData = e.userData);
                    };
                    (v["box2D.dynamics.joints.B2Joint"] = Or),
                        (Or.__name__ = "box2D.dynamics.joints.B2Joint"),
                        (Or.create = function (e, t) {
                            return (
                                (t = null),
                                3 == e.type
                                    ? (t = new wW(d.__cast(e, LV)))
                                    : 5 == e.type
                                    ? (t = new H4(d.__cast(e, I4)))
                                    : 2 == e.type
                                    ? (t = new xW(d.__cast(e, J4)))
                                    : 1 == e.type
                                    ? (t = new QP(d.__cast(e, MV)))
                                    : 4 == e.type
                                    ? (t = new pQ(d.__cast(e, K4)))
                                    : 6 == e.type
                                    ? (t = new L4(d.__cast(e, M4)))
                                    : 7 == e.type
                                    ? (t = new b3(d.__cast(e, NV)))
                                    : 8 == e.type
                                    ? (t = new N4(d.__cast(e, O4)))
                                    : 9 == e.type && (t = new P4(d.__cast(e, Q4))),
                                t
                            );
                        }),
                        (Or.destroy = function (e, t) {}),
                        (Or.prototype = {
                            getType: function () {
                                return this.m_type;
                            },
                            getAnchorA: function () {
                                return null;
                            },
                            getAnchorB: function () {
                                return null;
                            },
                            getReactionForce: function (e) {
                                return null;
                            },
                            getReactionTorque: function (e) {
                                return 0;
                            },
                            getBodyA: function () {
                                return this.m_bodyA;
                            },
                            getBodyB: function () {
                                return this.m_bodyB;
                            },
                            getNext: function () {
                                return this.m_next;
                            },
                            getUserData: function () {
                                return this.m_userData;
                            },
                            setUserData: function (e) {
                                this.m_userData = e;
                            },
                            isActive: function () {
                                return !!this.m_bodyA.isActive() && this.m_bodyB.isActive();
                            },
                            initVelocityConstraints: function (e) {},
                            solveVelocityConstraints: function (e) {},
                            finalizeVelocityConstraints: function () {},
                            solvePositionConstraints: function (e) {
                                return !1;
                            },
                            m_type: null,
                            m_prev: null,
                            m_next: null,
                            m_edgeA: null,
                            m_edgeB: null,
                            m_bodyA: null,
                            m_bodyB: null,
                            m_islandFlag: null,
                            m_collideConnected: null,
                            m_userData: null,
                            m_localCenterA: null,
                            m_localCenterB: null,
                            m_invMassA: null,
                            m_invMassB: null,
                            m_invIA: null,
                            m_invIB: null,
                            ID: null,
                            __class__: Or,
                        });
                    var wW = function (e) {
                        Or.call(this, e), (this.m_localAnchor1 = new td()), (this.m_localAnchor2 = new td()), (this.m_u = new td());
                        var t = this.m_localAnchor1,
                            n = e.localAnchorA;
                        (t.x = n.x),
                            (t.y = n.y),
                            (t = this.m_localAnchor2),
                            (n = e.localAnchorB),
                            (t.x = n.x),
                            (t.y = n.y),
                            (this.m_length = e.length),
                            (this.m_frequencyHz = e.frequencyHz),
                            (this.m_dampingRatio = e.dampingRatio),
                            (this.m_bias = this.m_gamma = this.m_impulse = 0);
                    };
                    (v["box2D.dynamics.joints.B2DistanceJoint"] = wW),
                        (wW.__name__ = "box2D.dynamics.joints.B2DistanceJoint"),
                        (wW.__super__ = Or),
                        (wW.prototype = K(Or.prototype, {
                            getAnchorA: function () {
                                return this.m_bodyA.getWorldPoint(this.m_localAnchor1);
                            },
                            getAnchorB: function () {
                                return this.m_bodyB.getWorldPoint(this.m_localAnchor2);
                            },
                            getReactionForce: function (e) {
                                return new td(e * this.m_impulse * this.m_u.x, e * this.m_impulse * this.m_u.y);
                            },
                            getReactionTorque: function (e) {
                                return 0;
                            },
                            getLength: function () {
                                return this.m_length;
                            },
                            setLength: function (e) {
                                this.m_length = e;
                            },
                            getFrequency: function () {
                                return this.m_frequencyHz;
                            },
                            setFrequency: function (e) {
                                this.m_frequencyHz = e;
                            },
                            getDampingRatio: function () {
                                return this.m_dampingRatio;
                            },
                            setDampingRatio: function (e) {
                                this.m_dampingRatio = e;
                            },
                            initVelocityConstraints: function (e) {
                                var t = this.m_bodyA,
                                    n = this.m_bodyB,
                                    a = t.m_xf.R,
                                    s = this.m_localAnchor1.x - t.m_sweep.localCenter.x,
                                    r = this.m_localAnchor1.y - t.m_sweep.localCenter.y,
                                    A = a.col1.x * s + a.col2.x * r;
                                (r = a.col1.y * s + a.col2.y * r), (s = A), (a = n.m_xf.R);
                                var l = this.m_localAnchor2.x - n.m_sweep.localCenter.x,
                                    o = this.m_localAnchor2.y - n.m_sweep.localCenter.y;
                                (A = a.col1.x * l + a.col2.x * o),
                                    (o = a.col1.y * l + a.col2.y * o),
                                    (l = A),
                                    (this.m_u.x = n.m_sweep.c.x + l - t.m_sweep.c.x - s),
                                    (this.m_u.y = n.m_sweep.c.y + o - t.m_sweep.c.y - r),
                                    (a = Math.sqrt(this.m_u.x * this.m_u.x + this.m_u.y * this.m_u.y)) > Me.b2_linearSlop ? this.m_u.multiply(1 / a) : (((A = this.m_u).x = 0), (A.y = 0)),
                                    (A = s * this.m_u.y - r * this.m_u.x);
                                var i = l * this.m_u.y - o * this.m_u.x;
                                if (((A = t.m_invMass + t.m_invI * A * A + n.m_invMass + n.m_invI * i * i), (this.m_mass = 0 != A ? 1 / A : 0), 0 < this.m_frequencyHz)) {
                                    (a -= this.m_length), (i = 2 * Math.PI * this.m_frequencyHz);
                                    var u = this.m_mass * i * i;
                                    (this.m_gamma = e.dt * (2 * this.m_mass * this.m_dampingRatio * i + e.dt * u)),
                                        (this.m_gamma = 0 != this.m_gamma ? 1 / this.m_gamma : 0),
                                        (this.m_bias = a * e.dt * u * this.m_gamma),
                                        (this.m_mass = A + this.m_gamma),
                                        (this.m_mass = 0 != this.m_mass ? 1 / this.m_mass : 0);
                                }
                                e.warmStarting
                                    ? ((this.m_impulse *= e.dtRatio),
                                      (e = this.m_impulse * this.m_u.x),
                                      (a = this.m_impulse * this.m_u.y),
                                      (t.m_linearVelocity.x -= t.m_invMass * e),
                                      (t.m_linearVelocity.y -= t.m_invMass * a),
                                      (t.m_angularVelocity -= t.m_invI * (s * a - r * e)),
                                      (n.m_linearVelocity.x += n.m_invMass * e),
                                      (n.m_linearVelocity.y += n.m_invMass * a),
                                      (n.m_angularVelocity += n.m_invI * (l * a - o * e)))
                                    : (this.m_impulse = 0);
                            },
                            solveVelocityConstraints: function (e) {
                                e = this.m_bodyA;
                                var t = this.m_bodyB,
                                    n = e.m_xf.R,
                                    a = this.m_localAnchor1.x - e.m_sweep.localCenter.x,
                                    s = this.m_localAnchor1.y - e.m_sweep.localCenter.y,
                                    r = n.col1.x * a + n.col2.x * s;
                                (s = n.col1.y * a + n.col2.y * s), (a = r), (n = t.m_xf.R);
                                var A = this.m_localAnchor2.x - t.m_sweep.localCenter.x,
                                    l = this.m_localAnchor2.y - t.m_sweep.localCenter.y;
                                (r = n.col1.x * A + n.col2.x * l),
                                    (l = n.col1.y * A + n.col2.y * l),
                                    (A = r),
                                    (r =
                                        -this.m_mass *
                                        (this.m_u.x * (t.m_linearVelocity.x + -t.m_angularVelocity * l - (e.m_linearVelocity.x + -e.m_angularVelocity * s)) +
                                            this.m_u.y * (t.m_linearVelocity.y + t.m_angularVelocity * A - (e.m_linearVelocity.y + e.m_angularVelocity * a)) +
                                            this.m_bias +
                                            this.m_gamma * this.m_impulse)),
                                    (this.m_impulse += r),
                                    (n = r * this.m_u.x),
                                    (r *= this.m_u.y),
                                    (e.m_linearVelocity.x -= e.m_invMass * n),
                                    (e.m_linearVelocity.y -= e.m_invMass * r),
                                    (e.m_angularVelocity -= e.m_invI * (a * r - s * n)),
                                    (t.m_linearVelocity.x += t.m_invMass * n),
                                    (t.m_linearVelocity.y += t.m_invMass * r),
                                    (t.m_angularVelocity += t.m_invI * (A * r - l * n));
                            },
                            solvePositionConstraints: function (e) {
                                if (0 < this.m_frequencyHz) return !0;
                                e = this.m_bodyA;
                                var t = this.m_bodyB,
                                    n = e.m_xf.R,
                                    a = this.m_localAnchor1.x - e.m_sweep.localCenter.x,
                                    s = this.m_localAnchor1.y - e.m_sweep.localCenter.y,
                                    r = n.col1.x * a + n.col2.x * s;
                                (s = n.col1.y * a + n.col2.y * s), (a = r), (n = t.m_xf.R);
                                var A = this.m_localAnchor2.x - t.m_sweep.localCenter.x,
                                    l = this.m_localAnchor2.y - t.m_sweep.localCenter.y;
                                (r = n.col1.x * A + n.col2.x * l), (l = n.col1.y * A + n.col2.y * l), (A = r);
                                var o = t.m_sweep.c.x + A - e.m_sweep.c.x - a,
                                    i = t.m_sweep.c.y + l - e.m_sweep.c.y - s;
                                (o /= n = Math.sqrt(o * o + i * i)), (i /= n), (n -= this.m_length), (n = kd.clamp(n, -Me.b2_maxLinearCorrection, Me.b2_maxLinearCorrection)), (r = -this.m_mass * n);
                                var u = this.m_u;
                                return (
                                    null == i && (i = 0),
                                    null == o && (o = 0),
                                    (u.x = o),
                                    (u.y = i),
                                    (i = r * this.m_u.x),
                                    (r *= this.m_u.y),
                                    (e.m_sweep.c.x -= e.m_invMass * i),
                                    (e.m_sweep.c.y -= e.m_invMass * r),
                                    (e.m_sweep.a -= e.m_invI * (a * r - s * i)),
                                    (t.m_sweep.c.x += t.m_invMass * i),
                                    (t.m_sweep.c.y += t.m_invMass * r),
                                    (t.m_sweep.a += t.m_invI * (A * r - l * i)),
                                    e.synchronizeTransform(),
                                    t.synchronizeTransform(),
                                    kd.abs(n) < Me.b2_linearSlop
                                );
                            },
                            m_localAnchor1: null,
                            m_localAnchor2: null,
                            m_u: null,
                            m_frequencyHz: null,
                            m_dampingRatio: null,
                            m_gamma: null,
                            m_bias: null,
                            m_impulse: null,
                            m_mass: null,
                            m_length: null,
                            __class__: wW,
                        }));
                    var Sw = function () {
                        (this.type = 0), (this.bodyB = this.bodyA = this.userData = null), (this.collideConnected = !1);
                    };
                    (v["box2D.dynamics.joints.B2JointDef"] = Sw),
                        (Sw.__name__ = "box2D.dynamics.joints.B2JointDef"),
                        (Sw.prototype = { type: null, userData: null, bodyA: null, bodyB: null, collideConnected: null, ID: null, actor1: null, actor2: null, __class__: Sw });
                    var LV = function () {
                        Sw.call(this), (this.localAnchorA = new td()), (this.localAnchorB = new td()), (this.type = 3), (this.length = 1), (this.dampingRatio = this.frequencyHz = 0);
                    };
                    (v["box2D.dynamics.joints.B2DistanceJointDef"] = LV),
                        (LV.__name__ = "box2D.dynamics.joints.B2DistanceJointDef"),
                        (LV.__super__ = Sw),
                        (LV.prototype = K(Sw.prototype, {
                            initialize: function (e, t, n, a) {
                                (this.bodyA = e),
                                    (this.bodyB = t),
                                    (e = this.localAnchorA),
                                    (t = this.bodyA.getLocalPoint(n)),
                                    (e.x = t.x),
                                    (e.y = t.y),
                                    (e = this.localAnchorB),
                                    (t = this.bodyB.getLocalPoint(a)),
                                    (e.x = t.x),
                                    (e.y = t.y),
                                    (e = a.x - n.x),
                                    (n = a.y - n.y),
                                    (this.length = Math.sqrt(e * e + n * n)),
                                    (this.dampingRatio = this.frequencyHz = 0);
                            },
                            localAnchorA: null,
                            localAnchorB: null,
                            length: null,
                            frequencyHz: null,
                            dampingRatio: null,
                            __class__: LV,
                        }));
                    var P4 = function (e) {
                        Or.call(this, e), (this.m_localAnchorA = new td()), (this.m_localAnchorB = new td()), (this.m_linearMass = new Tv()), (this.m_linearImpulse = new td());
                        var t = this.m_localAnchorA,
                            n = e.localAnchorA;
                        (t.x = n.x),
                            (t.y = n.y),
                            (t = this.m_localAnchorB),
                            (n = e.localAnchorB),
                            (t.x = n.x),
                            (t.y = n.y),
                            this.m_linearMass.setZero(),
                            (this.m_angularMass = 0),
                            ((t = this.m_linearImpulse).x = 0),
                            (this.m_angularImpulse = t.y = 0),
                            (this.m_maxForce = e.maxForce),
                            (this.m_maxTorque = e.maxTorque);
                    };
                    (v["box2D.dynamics.joints.B2FrictionJoint"] = P4),
                        (P4.__name__ = "box2D.dynamics.joints.B2FrictionJoint"),
                        (P4.__super__ = Or),
                        (P4.prototype = K(Or.prototype, {
                            getAnchorA: function () {
                                return this.m_bodyA.getWorldPoint(this.m_localAnchorA);
                            },
                            getAnchorB: function () {
                                return this.m_bodyB.getWorldPoint(this.m_localAnchorB);
                            },
                            getReactionForce: function (e) {
                                return new td(e * this.m_linearImpulse.x, e * this.m_linearImpulse.y);
                            },
                            getReactionTorque: function (e) {
                                return e * this.m_angularImpulse;
                            },
                            setMaxForce: function (e) {
                                this.m_maxForce = e;
                            },
                            getMaxForce: function () {
                                return this.m_maxForce;
                            },
                            setMaxTorque: function (e) {
                                this.m_maxTorque = e;
                            },
                            getMaxTorque: function () {
                                return this.m_maxTorque;
                            },
                            initVelocityConstraints: function (e) {
                                var t = this.m_bodyA,
                                    n = this.m_bodyB,
                                    a = t.m_xf.R,
                                    s = this.m_localAnchorA.x - t.m_sweep.localCenter.x,
                                    r = this.m_localAnchorA.y - t.m_sweep.localCenter.y,
                                    A = a.col1.x * s + a.col2.x * r;
                                (r = a.col1.y * s + a.col2.y * r), (s = A), (a = n.m_xf.R);
                                var l = this.m_localAnchorB.x - n.m_sweep.localCenter.x,
                                    o = this.m_localAnchorB.y - n.m_sweep.localCenter.y;
                                (A = a.col1.x * l + a.col2.x * o), (o = a.col1.y * l + a.col2.y * o), (l = A), (a = t.m_invMass), (A = n.m_invMass);
                                var i = t.m_invI,
                                    u = n.m_invI,
                                    g = new Tv();
                                (g.col1.x = a + A),
                                    (g.col2.x = 0),
                                    (g.col1.y = 0),
                                    (g.col2.y = a + A),
                                    (g.col1.x += i * r * r),
                                    (g.col2.x += -i * s * r),
                                    (g.col1.y += -i * s * r),
                                    (g.col2.y += i * s * s),
                                    (g.col1.x += u * o * o),
                                    (g.col2.x += -u * l * o),
                                    (g.col1.y += -u * l * o),
                                    (g.col2.y += u * l * l),
                                    g.getInverse(this.m_linearMass),
                                    (this.m_angularMass = i + u),
                                    0 < this.m_angularMass && (this.m_angularMass = 1 / this.m_angularMass),
                                    e.warmStarting
                                        ? ((this.m_linearImpulse.x *= e.dtRatio),
                                          (this.m_linearImpulse.y *= e.dtRatio),
                                          (this.m_angularImpulse *= e.dtRatio),
                                          (e = this.m_linearImpulse),
                                          (t.m_linearVelocity.x -= a * e.x),
                                          (t.m_linearVelocity.y -= a * e.y),
                                          (t.m_angularVelocity -= i * (s * e.y - r * e.x + this.m_angularImpulse)),
                                          (n.m_linearVelocity.x += A * e.x),
                                          (n.m_linearVelocity.y += A * e.y),
                                          (n.m_angularVelocity += u * (l * e.y - o * e.x + this.m_angularImpulse)))
                                        : (((t = this.m_linearImpulse).x = 0), (this.m_angularImpulse = t.y = 0));
                            },
                            solveVelocityConstraints: function (e) {
                                var t = this.m_bodyA,
                                    n = this.m_bodyB,
                                    a = t.m_linearVelocity,
                                    s = t.m_angularVelocity,
                                    r = n.m_linearVelocity,
                                    A = n.m_angularVelocity,
                                    l = t.m_invMass,
                                    o = n.m_invMass,
                                    i = t.m_invI,
                                    u = n.m_invI,
                                    g = t.m_xf.R,
                                    m = this.m_localAnchorA.x - t.m_sweep.localCenter.x,
                                    d = this.m_localAnchorA.y - t.m_sweep.localCenter.y,
                                    c = g.col1.x * m + g.col2.x * d;
                                (d = g.col1.y * m + g.col2.y * d), (m = c), (g = n.m_xf.R);
                                var p = this.m_localAnchorB.x - n.m_sweep.localCenter.x,
                                    h = this.m_localAnchorB.y - n.m_sweep.localCenter.y;
                                (c = g.col1.x * p + g.col2.x * h), (h = g.col1.y * p + g.col2.y * h), (p = c), (c = -this.m_angularMass * (A - s));
                                var f = this.m_angularImpulse;
                                (g = e.dt * this.m_maxTorque),
                                    (this.m_angularImpulse = kd.clamp(this.m_angularImpulse + c, -g, g)),
                                    (s -= i * (c = this.m_angularImpulse - f)),
                                    (A += u * c),
                                    (g = kd.mulMV(this.m_linearMass, new td(-(r.x - A * h - a.x + s * d), -(r.y + A * p - a.y - s * m)))),
                                    (c = this.m_linearImpulse.copy()),
                                    this.m_linearImpulse.add(g),
                                    (g = e.dt * this.m_maxForce),
                                    this.m_linearImpulse.lengthSquared() > g * g && (this.m_linearImpulse.normalize(), this.m_linearImpulse.multiply(g)),
                                    (g = kd.subtractVV(this.m_linearImpulse, c)),
                                    (a.x -= l * g.x),
                                    (a.y -= l * g.y),
                                    (s -= i * (m * g.y - d * g.x)),
                                    (r.x += o * g.x),
                                    (r.y += o * g.y),
                                    (A += u * (p * g.y - h * g.x)),
                                    (t.m_angularVelocity = s),
                                    (n.m_angularVelocity = A);
                            },
                            solvePositionConstraints: function (e) {
                                return !0;
                            },
                            m_localAnchorA: null,
                            m_localAnchorB: null,
                            m_linearMass: null,
                            m_angularMass: null,
                            m_linearImpulse: null,
                            m_angularImpulse: null,
                            m_maxForce: null,
                            m_maxTorque: null,
                            __class__: P4,
                        }));
                    var Q4 = function () {
                        Sw.call(this), (this.localAnchorA = new td()), (this.localAnchorB = new td()), (this.type = 9), (this.maxTorque = this.maxForce = 0);
                    };
                    (v["box2D.dynamics.joints.B2FrictionJointDef"] = Q4),
                        (Q4.__name__ = "box2D.dynamics.joints.B2FrictionJointDef"),
                        (Q4.__super__ = Sw),
                        (Q4.prototype = K(Sw.prototype, {
                            initialize: function (e, t, n) {
                                (this.bodyA = e), (this.bodyB = t), (e = this.localAnchorA), (t = this.bodyA.getLocalPoint(n)), (e.x = t.x), (e.y = t.y), (e = this.localAnchorB), (n = this.bodyB.getLocalPoint(n)), (e.x = n.x), (e.y = n.y);
                            },
                            localAnchorA: null,
                            localAnchorB: null,
                            maxForce: null,
                            maxTorque: null,
                            __class__: Q4,
                        }));
                    var L4 = function (e) {
                        Or.call(this, e), (this.m_groundAnchor1 = new td()), (this.m_groundAnchor2 = new td()), (this.m_localAnchor1 = new td()), (this.m_localAnchor2 = new td()), (this.m_J = new P8());
                        var t = e.joint1.m_type,
                            n = e.joint2.m_type;
                        if (((this.m_prismatic2 = this.m_revolute2 = this.m_prismatic1 = this.m_revolute1 = null), (this.m_ground1 = e.joint1.getBodyA()), (this.m_bodyA = e.joint1.getBodyB()), 1 == t)) {
                            (this.m_revolute1 = d.__cast(e.joint1, QP)), (t = this.m_groundAnchor1);
                            var a = this.m_revolute1.m_localAnchor1;
                            (t.x = a.x), (t.y = a.y), (t = this.m_localAnchor1), (a = this.m_revolute1.m_localAnchor2), (t.x = a.x), (t.y = a.y), (t = this.m_revolute1.getJointAngle());
                        } else
                            (this.m_prismatic1 = d.__cast(e.joint1, xW)),
                                (t = this.m_groundAnchor1),
                                (a = this.m_prismatic1.m_localAnchor1),
                                (t.x = a.x),
                                (t.y = a.y),
                                (t = this.m_localAnchor1),
                                (a = this.m_prismatic1.m_localAnchor2),
                                (t.x = a.x),
                                (t.y = a.y),
                                (t = this.m_prismatic1.getJointTranslation());
                        (this.m_ground2 = e.joint2.getBodyA()),
                            (this.m_bodyB = e.joint2.getBodyB()),
                            1 == n
                                ? ((this.m_revolute2 = d.__cast(e.joint2, QP)),
                                  (n = this.m_groundAnchor2),
                                  (a = this.m_revolute2.m_localAnchor1),
                                  (n.x = a.x),
                                  (n.y = a.y),
                                  (n = this.m_localAnchor2),
                                  (a = this.m_revolute2.m_localAnchor2),
                                  (n.x = a.x),
                                  (n.y = a.y),
                                  (n = this.m_revolute2.getJointAngle()))
                                : ((this.m_prismatic2 = d.__cast(e.joint2, xW)),
                                  (n = this.m_groundAnchor2),
                                  (a = this.m_prismatic2.m_localAnchor1),
                                  (n.x = a.x),
                                  (n.y = a.y),
                                  (n = this.m_localAnchor2),
                                  (a = this.m_prismatic2.m_localAnchor2),
                                  (n.x = a.x),
                                  (n.y = a.y),
                                  (n = this.m_prismatic2.getJointTranslation())),
                            (this.m_ratio = e.ratio),
                            (this.m_constant = t + this.m_ratio * n),
                            (this.m_impulse = 0);
                    };
                    (v["box2D.dynamics.joints.B2GearJoint"] = L4),
                        (L4.__name__ = "box2D.dynamics.joints.B2GearJoint"),
                        (L4.__super__ = Or),
                        (L4.prototype = K(Or.prototype, {
                            getAnchorA: function () {
                                return this.m_bodyA.getWorldPoint(this.m_localAnchor1);
                            },
                            getAnchorB: function () {
                                return this.m_bodyB.getWorldPoint(this.m_localAnchor2);
                            },
                            getReactionForce: function (e) {
                                return new td(e * this.m_impulse * this.m_J.linearB.x, e * this.m_impulse * this.m_J.linearB.y);
                            },
                            getReactionTorque: function (e) {
                                var t = this.m_bodyB.m_xf.R,
                                    n = this.m_localAnchor1.x - this.m_bodyB.m_sweep.localCenter.x,
                                    a = this.m_localAnchor1.y - this.m_bodyB.m_sweep.localCenter.y,
                                    s = t.col1.x * n + t.col2.x * a;
                                return (a = t.col1.y * n + t.col2.y * a), e * (this.m_impulse * this.m_J.angularB - s * this.m_impulse * this.m_J.linearB.y + a * this.m_impulse * this.m_J.linearB.x);
                            },
                            getRatio: function () {
                                return this.m_ratio;
                            },
                            setRatio: function (e) {
                                this.m_ratio = e;
                            },
                            initVelocityConstraints: function (e) {
                                var t = this.m_ground1,
                                    n = this.m_ground2,
                                    a = this.m_bodyA,
                                    s = this.m_bodyB,
                                    r = 0;
                                if ((this.m_J.setZero(), null != this.m_revolute1)) (this.m_J.angularA = -1), (r += a.m_invI);
                                else {
                                    var A = t.m_xf.R;
                                    t = this.m_prismatic1.m_localXAxis1;
                                    var l = A.col1.x * t.x + A.col2.x * t.y;
                                    (t = A.col1.y * t.x + A.col2.y * t.y), (A = a.m_xf.R);
                                    var o = this.m_localAnchor1.x - a.m_sweep.localCenter.x,
                                        i = this.m_localAnchor1.y - a.m_sweep.localCenter.y,
                                        u = A.col1.x * o + A.col2.x * i;
                                    (A = u * t - (i = A.col1.y * o + A.col2.y * i) * l),
                                        null == (t = -t) && (t = 0),
                                        null == (l = -l) && (l = 0),
                                        ((o = this.m_J.linearA).x = l),
                                        (o.y = t),
                                        (this.m_J.angularA = -A),
                                        (r += a.m_invMass + a.m_invI * A * A);
                                }
                                null != this.m_revolute2
                                    ? ((this.m_J.angularB = -this.m_ratio), (r += this.m_ratio * this.m_ratio * s.m_invI))
                                    : ((A = n.m_xf.R),
                                      (t = this.m_prismatic2.m_localXAxis1),
                                      (l = A.col1.x * t.x + A.col2.x * t.y),
                                      (t = A.col1.y * t.x + A.col2.y * t.y),
                                      (A = s.m_xf.R),
                                      (o = this.m_localAnchor2.x - s.m_sweep.localCenter.x),
                                      (i = this.m_localAnchor2.y - s.m_sweep.localCenter.y),
                                      (A = (u = A.col1.x * o + A.col2.x * i) * t - (i = A.col1.y * o + A.col2.y * i) * l),
                                      (n = this.m_J.linearB),
                                      (l *= -this.m_ratio),
                                      null == (t *= -this.m_ratio) && (t = 0),
                                      null == l && (l = 0),
                                      (n.x = l),
                                      (n.y = t),
                                      (this.m_J.angularB = -this.m_ratio * A),
                                      (r += this.m_ratio * this.m_ratio * (s.m_invMass + s.m_invI * A * A))),
                                    (this.m_mass = 0 < r ? 1 / r : 0),
                                    e.warmStarting
                                        ? ((a.m_linearVelocity.x += a.m_invMass * this.m_impulse * this.m_J.linearA.x),
                                          (a.m_linearVelocity.y += a.m_invMass * this.m_impulse * this.m_J.linearA.y),
                                          (a.m_angularVelocity += a.m_invI * this.m_impulse * this.m_J.angularA),
                                          (s.m_linearVelocity.x += s.m_invMass * this.m_impulse * this.m_J.linearB.x),
                                          (s.m_linearVelocity.y += s.m_invMass * this.m_impulse * this.m_J.linearB.y),
                                          (s.m_angularVelocity += s.m_invI * this.m_impulse * this.m_J.angularB))
                                        : (this.m_impulse = 0);
                            },
                            solveVelocityConstraints: function (e) {
                                e = this.m_bodyA;
                                var t = this.m_bodyB,
                                    n = this.m_J.compute(e.m_linearVelocity, e.m_angularVelocity, t.m_linearVelocity, t.m_angularVelocity);
                                (n *= -this.m_mass),
                                    (this.m_impulse += n),
                                    (e.m_linearVelocity.x += e.m_invMass * n * this.m_J.linearA.x),
                                    (e.m_linearVelocity.y += e.m_invMass * n * this.m_J.linearA.y),
                                    (e.m_angularVelocity += e.m_invI * n * this.m_J.angularA),
                                    (t.m_linearVelocity.x += t.m_invMass * n * this.m_J.linearB.x),
                                    (t.m_linearVelocity.y += t.m_invMass * n * this.m_J.linearB.y),
                                    (t.m_angularVelocity += t.m_invI * n * this.m_J.angularB);
                            },
                            solvePositionConstraints: function (e) {
                                e = this.m_bodyA;
                                var t = this.m_bodyB,
                                    n = null != this.m_revolute1 ? this.m_revolute1.getJointAngle() : this.m_prismatic1.getJointTranslation(),
                                    a = null != this.m_revolute2 ? this.m_revolute2.getJointAngle() : this.m_prismatic2.getJointTranslation();
                                return (
                                    (n = -this.m_mass * (this.m_constant - (n + this.m_ratio * a))),
                                    (e.m_sweep.c.x += e.m_invMass * n * this.m_J.linearA.x),
                                    (e.m_sweep.c.y += e.m_invMass * n * this.m_J.linearA.y),
                                    (e.m_sweep.a += e.m_invI * n * this.m_J.angularA),
                                    (t.m_sweep.c.x += t.m_invMass * n * this.m_J.linearB.x),
                                    (t.m_sweep.c.y += t.m_invMass * n * this.m_J.linearB.y),
                                    (t.m_sweep.a += t.m_invI * n * this.m_J.angularB),
                                    e.synchronizeTransform(),
                                    t.synchronizeTransform(),
                                    0 < Me.b2_linearSlop
                                );
                            },
                            m_ground1: null,
                            m_ground2: null,
                            m_revolute1: null,
                            m_prismatic1: null,
                            m_revolute2: null,
                            m_prismatic2: null,
                            m_groundAnchor1: null,
                            m_groundAnchor2: null,
                            m_localAnchor1: null,
                            m_localAnchor2: null,
                            m_J: null,
                            m_constant: null,
                            m_ratio: null,
                            m_mass: null,
                            m_impulse: null,
                            __class__: L4,
                        }));
                    var M4 = function () {
                        Sw.call(this), (this.type = 6), (this.joint2 = this.joint1 = null), (this.ratio = 1);
                    };
                    (v["box2D.dynamics.joints.B2GearJointDef"] = M4), (M4.__name__ = "box2D.dynamics.joints.B2GearJointDef"), (M4.__super__ = Sw), (M4.prototype = K(Sw.prototype, { joint1: null, joint2: null, ratio: null, __class__: M4 }));
                    var P8 = function () {
                        (this.linearA = new td()), (this.linearB = new td());
                    };
                    (v["box2D.dynamics.joints.B2Jacobian"] = P8),
                        (P8.__name__ = "box2D.dynamics.joints.B2Jacobian"),
                        (P8.prototype = {
                            linearA: null,
                            angularA: null,
                            linearB: null,
                            angularB: null,
                            setZero: function () {
                                var e = this.linearA;
                                (e.x = 0), (this.angularA = e.y = 0), ((e = this.linearB).x = 0), (this.angularB = e.y = 0);
                            },
                            set: function (e, t, n, a) {
                                var s = this.linearA;
                                (s.x = e.x), (s.y = e.y), (this.angularA = t), ((e = this.linearB).x = n.x), (e.y = n.y), (this.angularB = a);
                            },
                            compute: function (e, t, n, a) {
                                return this.linearA.x * e.x + this.linearA.y * e.y + this.angularA * t + (this.linearB.x * n.x + this.linearB.y * n.y) + this.angularB * a;
                            },
                            __class__: P8,
                        });
                    var G4 = function () {};
                    (v["box2D.dynamics.joints.B2JointEdge"] = G4), (G4.__name__ = "box2D.dynamics.joints.B2JointEdge"), (G4.prototype = { other: null, joint: null, prev: null, next: null, __class__: G4 });
                    var b3 = function (e) {
                        Or.call(this, e),
                            (this.m_localAnchor1 = new td()),
                            (this.m_localAnchor2 = new td()),
                            (this.m_localXAxis1 = new td()),
                            (this.m_localYAxis1 = new td()),
                            (this.m_axis = new td()),
                            (this.m_perp = new td()),
                            (this.m_K = new Tv()),
                            (this.m_impulse = new td());
                        var t = this.m_localAnchor1,
                            n = e.localAnchorA;
                        (t.x = n.x),
                            (t.y = n.y),
                            (t = this.m_localAnchor2),
                            (n = e.localAnchorB),
                            (t.x = n.x),
                            (t.y = n.y),
                            (t = this.m_localXAxis1),
                            (n = e.localAxisA),
                            (t.x = n.x),
                            (t.y = n.y),
                            (this.m_localYAxis1.x = -this.m_localXAxis1.y),
                            (this.m_localYAxis1.y = this.m_localXAxis1.x),
                            ((t = this.m_impulse).x = 0),
                            (this.m_motorImpulse = this.m_motorMass = t.y = 0),
                            (this.m_lowerTranslation = e.lowerTranslation),
                            (this.m_upperTranslation = e.upperTranslation),
                            (this.m_maxMotorForce = e.maxMotorForce),
                            (this.m_motorSpeed = e.motorSpeed),
                            (this.m_enableLimit = e.enableLimit),
                            (this.m_enableMotor = e.enableMotor),
                            (this.m_limitState = 0),
                            ((e = this.m_axis).x = 0),
                            (e.y = 0),
                            ((e = this.m_perp).x = 0),
                            (e.y = 0);
                    };
                    (v["box2D.dynamics.joints.B2LineJoint"] = b3),
                        (b3.__name__ = "box2D.dynamics.joints.B2LineJoint"),
                        (b3.__super__ = Or),
                        (b3.prototype = K(Or.prototype, {
                            getAnchorA: function () {
                                return this.m_bodyA.getWorldPoint(this.m_localAnchor1);
                            },
                            getAnchorB: function () {
                                return this.m_bodyB.getWorldPoint(this.m_localAnchor2);
                            },
                            getReactionForce: function (e) {
                                return new td(
                                    e * (this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.x),
                                    e * (this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.y)
                                );
                            },
                            getReactionTorque: function (e) {
                                return e * this.m_impulse.y;
                            },
                            getJointTranslation: function () {
                                var e = this.m_bodyA,
                                    t = this.m_bodyB,
                                    n = e.getWorldPoint(this.m_localAnchor1),
                                    a = t.getWorldPoint(this.m_localAnchor2);
                                return (t = a.x - n.x), (n = a.y - n.y), (e = e.getWorldVector(this.m_localXAxis1)).x * t + e.y * n;
                            },
                            getJointSpeed: function () {
                                var e = this.m_bodyA,
                                    t = this.m_bodyB,
                                    n = e.m_xf.R,
                                    a = this.m_localAnchor1.x - e.m_sweep.localCenter.x,
                                    s = this.m_localAnchor1.y - e.m_sweep.localCenter.y,
                                    r = n.col1.x * a + n.col2.x * s;
                                (s = n.col1.y * a + n.col2.y * s), (a = r), (n = t.m_xf.R);
                                var A = this.m_localAnchor2.x - t.m_sweep.localCenter.x,
                                    l = this.m_localAnchor2.y - t.m_sweep.localCenter.y;
                                (r = n.col1.x * A + n.col2.x * l), (l = n.col1.y * A + n.col2.y * l), (A = r), (n = t.m_sweep.c.x + A - (e.m_sweep.c.x + a)), (r = t.m_sweep.c.y + l - (e.m_sweep.c.y + s));
                                var o = e.getWorldVector(this.m_localXAxis1),
                                    i = e.m_linearVelocity,
                                    u = t.m_linearVelocity;
                                return (e = e.m_angularVelocity), (t = t.m_angularVelocity), n * -e * o.y + r * e * o.x + (o.x * (u.x + -t * l - i.x - -e * s) + o.y * (u.y + t * A - i.y - e * a));
                            },
                            isLimitEnabled: function () {
                                return this.m_enableLimit;
                            },
                            enableLimit: function (e) {
                                this.m_bodyA.setAwake(!0), this.m_bodyB.setAwake(!0), (this.m_enableLimit = e);
                            },
                            getLowerLimit: function () {
                                return this.m_lowerTranslation;
                            },
                            getUpperLimit: function () {
                                return this.m_upperTranslation;
                            },
                            setLimits: function (e, t) {
                                this.m_bodyA.setAwake(!0), this.m_bodyB.setAwake(!0), (this.m_lowerTranslation = e), (this.m_upperTranslation = t);
                            },
                            isMotorEnabled: function () {
                                return this.m_enableMotor;
                            },
                            enableMotor: function (e) {
                                this.m_bodyA.setAwake(!0), this.m_bodyB.setAwake(!0), (this.m_enableMotor = e);
                            },
                            setMotorSpeed: function (e) {
                                this.m_bodyA.setAwake(!0), this.m_bodyB.setAwake(!0), (this.m_motorSpeed = e);
                            },
                            getMotorSpeed: function () {
                                return this.m_motorSpeed;
                            },
                            setMaxMotorForce: function (e) {
                                this.m_bodyA.setAwake(!0), this.m_bodyB.setAwake(!0), (this.m_maxMotorForce = e);
                            },
                            getMaxMotorForce: function () {
                                return this.m_maxMotorForce;
                            },
                            getMotorForce: function () {
                                return this.m_motorImpulse;
                            },
                            initVelocityConstraints: function (e) {
                                var t = this.m_bodyA,
                                    n = this.m_bodyB,
                                    a = this.m_localCenterA,
                                    s = t.getLocalCenter();
                                (a.x = s.x), (a.y = s.y), (a = this.m_localCenterB), (s = n.getLocalCenter()), (a.x = s.x), (a.y = s.y);
                                var r = t.getTransform();
                                n.getTransform(), (a = t.m_xf.R);
                                var A = this.m_localAnchor1.x - this.m_localCenterA.x,
                                    l = this.m_localAnchor1.y - this.m_localCenterA.y;
                                (s = a.col1.x * A + a.col2.x * l), (l = a.col1.y * A + a.col2.y * l), (A = s), (a = n.m_xf.R);
                                var o = this.m_localAnchor2.x - this.m_localCenterB.x,
                                    i = this.m_localAnchor2.y - this.m_localCenterB.y;
                                (s = a.col1.x * o + a.col2.x * i),
                                    (i = a.col1.y * o + a.col2.y * i),
                                    (o = s),
                                    (a = n.m_sweep.c.x + o - t.m_sweep.c.x - A),
                                    (s = n.m_sweep.c.y + i - t.m_sweep.c.y - l),
                                    (this.m_invMassA = t.m_invMass),
                                    (this.m_invMassB = n.m_invMass),
                                    (this.m_invIA = t.m_invI),
                                    (this.m_invIB = n.m_invI);
                                var u = this.m_axis,
                                    g = kd.mulMV(r.R, this.m_localXAxis1);
                                (u.x = g.x),
                                    (u.y = g.y),
                                    (this.m_a1 = (a + A) * this.m_axis.y - (s + l) * this.m_axis.x),
                                    (this.m_a2 = o * this.m_axis.y - i * this.m_axis.x),
                                    (this.m_motorMass = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_a1 * this.m_a1 + this.m_invIB * this.m_a2 * this.m_a2),
                                    (this.m_motorMass = this.m_motorMass > Number.MIN_VALUE ? 1 / this.m_motorMass : 0),
                                    (u = this.m_perp),
                                    (r = kd.mulMV(r.R, this.m_localYAxis1)),
                                    (u.x = r.x),
                                    (u.y = r.y),
                                    (this.m_s1 = (a + A) * this.m_perp.y - (s + l) * this.m_perp.x),
                                    (this.m_s2 = o * this.m_perp.y - i * this.m_perp.x),
                                    (A = this.m_invMassA),
                                    (l = this.m_invMassB),
                                    (o = this.m_invIA),
                                    (i = this.m_invIB),
                                    (this.m_K.col1.x = A + l + o * this.m_s1 * this.m_s1 + i * this.m_s2 * this.m_s2),
                                    (this.m_K.col1.y = o * this.m_s1 * this.m_a1 + i * this.m_s2 * this.m_a2),
                                    (this.m_K.col2.x = this.m_K.col1.y),
                                    (this.m_K.col2.y = A + l + o * this.m_a1 * this.m_a1 + i * this.m_a2 * this.m_a2),
                                    this.m_enableLimit
                                        ? ((a = this.m_axis.x * a + this.m_axis.y * s),
                                          kd.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2 * Me.b2_linearSlop
                                              ? (this.m_limitState = 3)
                                              : a <= this.m_lowerTranslation
                                              ? 1 != this.m_limitState && ((this.m_limitState = 1), (this.m_impulse.y = 0))
                                              : a >= this.m_upperTranslation
                                              ? 2 != this.m_limitState && ((this.m_limitState = 2), (this.m_impulse.y = 0))
                                              : ((this.m_limitState = 0), (this.m_impulse.y = 0)))
                                        : (this.m_limitState = 0),
                                    0 == this.m_enableMotor && (this.m_motorImpulse = 0),
                                    e.warmStarting
                                        ? ((this.m_impulse.x *= e.dtRatio),
                                          (this.m_impulse.y *= e.dtRatio),
                                          (this.m_motorImpulse *= e.dtRatio),
                                          (e = this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.x),
                                          (a = this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.y),
                                          (s = this.m_impulse.x * this.m_s1 + (this.m_motorImpulse + this.m_impulse.y) * this.m_a1),
                                          (A = this.m_impulse.x * this.m_s2 + (this.m_motorImpulse + this.m_impulse.y) * this.m_a2),
                                          (t.m_linearVelocity.x -= this.m_invMassA * e),
                                          (t.m_linearVelocity.y -= this.m_invMassA * a),
                                          (t.m_angularVelocity -= this.m_invIA * s),
                                          (n.m_linearVelocity.x += this.m_invMassB * e),
                                          (n.m_linearVelocity.y += this.m_invMassB * a),
                                          (n.m_angularVelocity += this.m_invIB * A))
                                        : (((t = this.m_impulse).x = 0), (this.m_motorImpulse = t.y = 0));
                            },
                            solveVelocityConstraints: function (e) {
                                var t = this.m_bodyA,
                                    n = this.m_bodyB,
                                    a = t.m_linearVelocity,
                                    s = t.m_angularVelocity,
                                    r = n.m_linearVelocity,
                                    A = n.m_angularVelocity;
                                if (this.m_enableMotor && 3 != this.m_limitState) {
                                    var l = this.m_motorMass * (this.m_motorSpeed - (this.m_axis.x * (r.x - a.x) + this.m_axis.y * (r.y - a.y) + this.m_a2 * A - this.m_a1 * s)),
                                        o = this.m_motorImpulse;
                                    (e = e.dt * this.m_maxMotorForce), (this.m_motorImpulse = kd.clamp(this.m_motorImpulse + l, -e, e)), (o = (l = this.m_motorImpulse - o) * this.m_axis.x), (e = l * this.m_axis.y);
                                    var i = l * this.m_a1;
                                    (l *= this.m_a2), (a.x -= this.m_invMassA * o), (a.y -= this.m_invMassA * e), (s -= this.m_invIA * i), (r.x += this.m_invMassB * o), (r.y += this.m_invMassB * e), (A += this.m_invIB * l);
                                }
                                (e = this.m_perp.x * (r.x - a.x) + this.m_perp.y * (r.y - a.y) + this.m_s2 * A - this.m_s1 * s),
                                    this.m_enableLimit && 0 != this.m_limitState
                                        ? ((i = this.m_axis.x * (r.x - a.x) + this.m_axis.y * (r.y - a.y) + this.m_a2 * A - this.m_a1 * s),
                                          (o = this.m_impulse.copy()),
                                          (l = this.m_K.solve(new td(), -e, -i)),
                                          this.m_impulse.add(l),
                                          1 == this.m_limitState ? (this.m_impulse.y = kd.max(this.m_impulse.y, 0)) : 2 == this.m_limitState && (this.m_impulse.y = kd.min(this.m_impulse.y, 0)),
                                          (e = -e - (this.m_impulse.y - o.y) * this.m_K.col2.x),
                                          (this.m_impulse.x = 0 != this.m_K.col1.x ? e / this.m_K.col1.x + o.x : o.x),
                                          (l.x = this.m_impulse.x - o.x),
                                          (l.y = this.m_impulse.y - o.y),
                                          (o = l.x * this.m_perp.x + l.y * this.m_axis.x),
                                          (e = l.x * this.m_perp.y + l.y * this.m_axis.y),
                                          (i = l.x * this.m_s1 + l.y * this.m_a1),
                                          (l = l.x * this.m_s2 + l.y * this.m_a2))
                                        : ((l = 0 != this.m_K.col1.x ? -e / this.m_K.col1.x : 0), (this.m_impulse.x += l), (o = l * this.m_perp.x), (e = l * this.m_perp.y), (i = l * this.m_s1), (l *= this.m_s2)),
                                    (a.x -= this.m_invMassA * o),
                                    (a.y -= this.m_invMassA * e),
                                    (s -= this.m_invIA * i),
                                    (r.x += this.m_invMassB * o),
                                    (r.y += this.m_invMassB * e),
                                    (A += this.m_invIB * l),
                                    ((o = t.m_linearVelocity).x = a.x),
                                    (o.y = a.y),
                                    (t.m_angularVelocity = s),
                                    ((t = n.m_linearVelocity).x = r.x),
                                    (t.y = r.y),
                                    (n.m_angularVelocity = A);
                            },
                            solvePositionConstraints: function (e) {
                                e = this.m_bodyA;
                                var t = this.m_bodyB,
                                    n = e.m_sweep.c,
                                    a = e.m_sweep.a,
                                    s = t.m_sweep.c,
                                    r = t.m_sweep.a,
                                    A = 0,
                                    l = !1,
                                    o = 0,
                                    i = Tv.fromAngle(a),
                                    u = Tv.fromAngle(r),
                                    g = i,
                                    m = this.m_localAnchor1.x - this.m_localCenterA.x,
                                    d = this.m_localAnchor1.y - this.m_localCenterA.y,
                                    c = g.col1.x * m + g.col2.x * d;
                                (d = g.col1.y * m + g.col2.y * d), (m = c), (g = u), (u = this.m_localAnchor2.x - this.m_localCenterB.x);
                                var p = this.m_localAnchor2.y - this.m_localCenterB.y;
                                if (((c = g.col1.x * u + g.col2.x * p), (p = g.col1.y * u + g.col2.y * p), (u = c), (g = s.x + u - n.x - m), (c = s.y + p - n.y - d), this.m_enableLimit)) {
                                    (this.m_axis = kd.mulMV(i, this.m_localXAxis1)), (this.m_a1 = (g + m) * this.m_axis.y - (c + d) * this.m_axis.x), (this.m_a2 = u * this.m_axis.y - p * this.m_axis.x);
                                    var h = this.m_axis.x * g + this.m_axis.y * c;
                                    kd.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2 * Me.b2_linearSlop
                                        ? ((o = kd.clamp(h, -Me.b2_maxLinearCorrection, Me.b2_maxLinearCorrection)), (A = kd.abs(h)), (l = !0))
                                        : h <= this.m_lowerTranslation
                                        ? ((o = kd.clamp(h - this.m_lowerTranslation + Me.b2_linearSlop, -Me.b2_maxLinearCorrection, 0)), (A = this.m_lowerTranslation - h), (l = !0))
                                        : h >= this.m_upperTranslation && ((o = kd.clamp(h - this.m_upperTranslation + Me.b2_linearSlop, 0, Me.b2_maxLinearCorrection)), (A = h - this.m_upperTranslation), (l = !0));
                                }
                                return (
                                    (this.m_perp = kd.mulMV(i, this.m_localYAxis1)),
                                    (this.m_s1 = (g + m) * this.m_perp.y - (c + d) * this.m_perp.x),
                                    (this.m_s2 = u * this.m_perp.y - p * this.m_perp.x),
                                    (i = new td()),
                                    (m = this.m_perp.x * g + this.m_perp.y * c),
                                    (A = kd.max(A, kd.abs(m))),
                                    l
                                        ? ((l = this.m_invMassA),
                                          (d = this.m_invMassB),
                                          (u = this.m_invIA),
                                          (p = this.m_invIB),
                                          (this.m_K.col1.x = l + d + u * this.m_s1 * this.m_s1 + p * this.m_s2 * this.m_s2),
                                          (this.m_K.col1.y = u * this.m_s1 * this.m_a1 + p * this.m_s2 * this.m_a2),
                                          (this.m_K.col2.x = this.m_K.col1.y),
                                          (this.m_K.col2.y = l + d + u * this.m_a1 * this.m_a1 + p * this.m_a2 * this.m_a2),
                                          this.m_K.solve(i, -m, -o))
                                        : ((l = this.m_invMassA), (d = this.m_invMassB), (u = this.m_invIA), (p = this.m_invIB), (o = l + d + u * this.m_s1 * this.m_s1 + p * this.m_s2 * this.m_s2), (i.x = 0 != o ? -m / o : 0), (i.y = 0)),
                                    (o = i.x * this.m_perp.x + i.y * this.m_axis.x),
                                    (l = i.x * this.m_perp.y + i.y * this.m_axis.y),
                                    (m = i.x * this.m_s1 + i.y * this.m_a1),
                                    (i = i.x * this.m_s2 + i.y * this.m_a2),
                                    (n.x -= this.m_invMassA * o),
                                    (n.y -= this.m_invMassA * l),
                                    (a -= this.m_invIA * m),
                                    (s.x += this.m_invMassB * o),
                                    (s.y += this.m_invMassB * l),
                                    (r += this.m_invIB * i),
                                    (e.m_sweep.a = a),
                                    (t.m_sweep.a = r),
                                    e.synchronizeTransform(),
                                    t.synchronizeTransform(),
                                    A <= Me.b2_linearSlop && 0 <= Me.b2_angularSlop
                                );
                            },
                            m_localAnchor1: null,
                            m_localAnchor2: null,
                            m_localXAxis1: null,
                            m_localYAxis1: null,
                            m_axis: null,
                            m_perp: null,
                            m_s1: null,
                            m_s2: null,
                            m_a1: null,
                            m_a2: null,
                            m_K: null,
                            m_impulse: null,
                            m_motorMass: null,
                            m_motorImpulse: null,
                            m_lowerTranslation: null,
                            m_upperTranslation: null,
                            m_maxMotorForce: null,
                            m_motorSpeed: null,
                            m_enableLimit: null,
                            m_enableMotor: null,
                            m_limitState: null,
                            __class__: b3,
                        }));
                    var NV = function () {
                        Sw.call(this), (this.localAnchorA = new td()), (this.localAnchorB = new td()), (this.localAxisA = new td()), (this.type = 7);
                        var e = this.localAxisA,
                            t = 1,
                            n = 0;
                        null == n && (n = 0), null == t && (t = 0), (e.x = t), (e.y = n), (this.enableLimit = !1), (this.upperTranslation = this.lowerTranslation = 0), (this.enableMotor = !1), (this.motorSpeed = this.maxMotorForce = 0);
                    };
                    (v["box2D.dynamics.joints.B2LineJointDef"] = NV),
                        (NV.__name__ = "box2D.dynamics.joints.B2LineJointDef"),
                        (NV.__super__ = Sw),
                        (NV.prototype = K(Sw.prototype, {
                            initialize: function (e, t, n, a) {
                                (this.bodyA = e), (this.bodyB = t), (this.localAnchorA = this.bodyA.getLocalPoint(n)), (this.localAnchorB = this.bodyB.getLocalPoint(n)), (this.localAxisA = this.bodyA.getLocalVector(a));
                            },
                            localAnchorA: null,
                            localAnchorB: null,
                            localAxisA: null,
                            enableLimit: null,
                            lowerTranslation: null,
                            upperTranslation: null,
                            enableMotor: null,
                            maxMotorForce: null,
                            motorSpeed: null,
                            __class__: NV,
                        }));
                    var H4 = function (e) {
                        Or.call(this, e),
                            (this.K = new Tv()),
                            (this.K1 = new Tv()),
                            (this.K2 = new Tv()),
                            (this.m_localAnchor = new td()),
                            (this.m_target = new td()),
                            (this.m_impulse = new td()),
                            (this.m_mass = new Tv()),
                            (this.m_C = new td());
                        var t = this.m_target,
                            n = e.target;
                        (t.x = n.x), (t.y = n.y), (t = this.m_target.x - this.m_bodyB.m_xf.position.x), (n = this.m_target.y - this.m_bodyB.m_xf.position.y);
                        var a = this.m_bodyB.m_xf.R;
                        (this.m_localAnchor.x = t * a.col1.x + n * a.col1.y),
                            (this.m_localAnchor.y = t * a.col2.x + n * a.col2.y),
                            (this.m_maxForce = e.maxForce),
                            ((t = this.m_impulse).x = 0),
                            (t.y = 0),
                            (this.m_frequencyHz = e.frequencyHz),
                            (this.m_dampingRatio = e.dampingRatio),
                            (this.m_gamma = this.m_beta = 0);
                    };
                    (v["box2D.dynamics.joints.B2MouseJoint"] = H4),
                        (H4.__name__ = "box2D.dynamics.joints.B2MouseJoint"),
                        (H4.__super__ = Or),
                        (H4.prototype = K(Or.prototype, {
                            getAnchorA: function () {
                                return this.m_target;
                            },
                            getAnchorB: function () {
                                return this.m_bodyB.getWorldPoint(this.m_localAnchor);
                            },
                            getReactionForce: function (e) {
                                return new td(e * this.m_impulse.x, e * this.m_impulse.y);
                            },
                            getReactionTorque: function (e) {
                                return 0;
                            },
                            getTarget: function () {
                                return this.m_target;
                            },
                            setTarget: function (e) {
                                0 == this.m_bodyB.isAwake() && this.m_bodyB.setAwake(!0), (this.m_target = e);
                            },
                            getMaxForce: function () {
                                return this.m_maxForce;
                            },
                            setMaxForce: function (e) {
                                this.m_maxForce = e;
                            },
                            getFrequency: function () {
                                return this.m_frequencyHz;
                            },
                            setFrequency: function (e) {
                                this.m_frequencyHz = e;
                            },
                            getDampingRatio: function () {
                                return this.m_dampingRatio;
                            },
                            setDampingRatio: function (e) {
                                this.m_dampingRatio = e;
                            },
                            K: null,
                            K1: null,
                            K2: null,
                            initVelocityConstraints: function (e) {
                                var t = this.m_bodyB,
                                    n = t.getMass(),
                                    a = 2 * Math.PI * this.m_frequencyHz,
                                    s = n * a * a;
                                (this.m_gamma = e.dt * (2 * n * this.m_dampingRatio * a + e.dt * s)),
                                    (this.m_gamma = 0 != this.m_gamma ? 1 / this.m_gamma : 0),
                                    (this.m_beta = e.dt * s * this.m_gamma),
                                    (s = t.m_xf.R),
                                    (n = this.m_localAnchor.x - t.m_sweep.localCenter.x),
                                    (a = this.m_localAnchor.y - t.m_sweep.localCenter.y);
                                var r = s.col1.x * n + s.col2.x * a;
                                (a = s.col1.y * n + s.col2.y * a),
                                    (n = r),
                                    (s = t.m_invMass),
                                    (r = t.m_invI),
                                    (this.K1.col1.x = s),
                                    (this.K1.col2.x = 0),
                                    (this.K1.col1.y = 0),
                                    (this.K1.col2.y = s),
                                    (this.K2.col1.x = r * a * a),
                                    (this.K2.col2.x = -r * n * a),
                                    (this.K2.col1.y = -r * n * a),
                                    (this.K2.col2.y = r * n * n),
                                    this.K.setM(this.K1),
                                    this.K.addM(this.K2),
                                    (this.K.col1.x += this.m_gamma),
                                    (this.K.col2.y += this.m_gamma),
                                    this.K.getInverse(this.m_mass),
                                    (this.m_C.x = t.m_sweep.c.x + n - this.m_target.x),
                                    (this.m_C.y = t.m_sweep.c.y + a - this.m_target.y),
                                    (t.m_angularVelocity *= 0.98),
                                    (this.m_impulse.x *= e.dtRatio),
                                    (this.m_impulse.y *= e.dtRatio),
                                    (t.m_linearVelocity.x += s * this.m_impulse.x),
                                    (t.m_linearVelocity.y += s * this.m_impulse.y),
                                    (t.m_angularVelocity += r * (n * this.m_impulse.y - a * this.m_impulse.x));
                            },
                            solveVelocityConstraints: function (e) {
                                var t = this.m_bodyB,
                                    n = t.m_xf.R,
                                    a = this.m_localAnchor.x - t.m_sweep.localCenter.x,
                                    s = this.m_localAnchor.y - t.m_sweep.localCenter.y,
                                    r = n.col1.x * a + n.col2.x * s;
                                (s = n.col1.y * a + n.col2.y * s), (a = r), (r = t.m_linearVelocity.x + -t.m_angularVelocity * s);
                                var A = t.m_linearVelocity.y + t.m_angularVelocity * a;
                                (n = this.m_mass), (r = r + this.m_beta * this.m_C.x + this.m_gamma * this.m_impulse.x);
                                var l = A + this.m_beta * this.m_C.y + this.m_gamma * this.m_impulse.y;
                                (A = -(n.col1.x * r + n.col2.x * l)),
                                    (l = -(n.col1.y * r + n.col2.y * l)),
                                    (n = this.m_impulse.x),
                                    (r = this.m_impulse.y),
                                    (this.m_impulse.x += A),
                                    (this.m_impulse.y += l),
                                    (e = e.dt * this.m_maxForce),
                                    this.m_impulse.lengthSquared() > e * e && this.m_impulse.multiply(e / this.m_impulse.length()),
                                    (A = this.m_impulse.x - n),
                                    (l = this.m_impulse.y - r),
                                    (t.m_linearVelocity.x += t.m_invMass * A),
                                    (t.m_linearVelocity.y += t.m_invMass * l),
                                    (t.m_angularVelocity += t.m_invI * (a * l - s * A));
                            },
                            solvePositionConstraints: function (e) {
                                return !0;
                            },
                            m_localAnchor: null,
                            m_target: null,
                            m_impulse: null,
                            m_mass: null,
                            m_C: null,
                            m_maxForce: null,
                            m_frequencyHz: null,
                            m_dampingRatio: null,
                            m_beta: null,
                            m_gamma: null,
                            __class__: H4,
                        }));
                    var I4 = function () {
                        Sw.call(this), (this.target = new td()), (this.type = 5), (this.maxForce = 0), (this.frequencyHz = 5), (this.dampingRatio = 0.7);
                    };
                    (v["box2D.dynamics.joints.B2MouseJointDef"] = I4),
                        (I4.__name__ = "box2D.dynamics.joints.B2MouseJointDef"),
                        (I4.__super__ = Sw),
                        (I4.prototype = K(Sw.prototype, { target: null, maxForce: null, frequencyHz: null, dampingRatio: null, __class__: I4 }));
                    var xW = function (e) {
                        Or.call(this, e),
                            (this.m_localAnchor1 = new td()),
                            (this.m_localAnchor2 = new td()),
                            (this.m_localXAxis1 = new td()),
                            (this.m_localYAxis1 = new td()),
                            (this.m_axis = new td()),
                            (this.m_perp = new td()),
                            (this.m_K = new JV()),
                            (this.m_impulse = new qz());
                        var t = this.m_localAnchor1,
                            n = e.localAnchorA;
                        (t.x = n.x),
                            (t.y = n.y),
                            (t = this.m_localAnchor2),
                            (n = e.localAnchorB),
                            (t.x = n.x),
                            (t.y = n.y),
                            (t = this.m_localXAxis1),
                            (n = e.localAxisA),
                            (t.x = n.x),
                            (t.y = n.y),
                            (this.m_localYAxis1.x = -this.m_localXAxis1.y),
                            (this.m_localYAxis1.y = this.m_localXAxis1.x),
                            (this.m_refAngle = e.referenceAngle),
                            this.m_impulse.setZero(),
                            (this.m_motorImpulse = this.m_motorMass = 0),
                            (this.m_lowerTranslation = e.lowerTranslation),
                            (this.m_upperTranslation = e.upperTranslation),
                            (this.m_maxMotorForce = e.maxMotorForce),
                            (this.m_motorSpeed = e.motorSpeed),
                            (this.m_enableLimit = e.enableLimit),
                            (this.m_enableMotor = e.enableMotor),
                            (this.m_limitState = 0),
                            ((e = this.m_axis).x = 0),
                            (e.y = 0),
                            ((e = this.m_perp).x = 0),
                            (e.y = 0);
                    };
                    (v["box2D.dynamics.joints.B2PrismaticJoint"] = xW),
                        (xW.__name__ = "box2D.dynamics.joints.B2PrismaticJoint"),
                        (xW.__super__ = Or),
                        (xW.prototype = K(Or.prototype, {
                            getAnchorA: function () {
                                return this.m_bodyA.getWorldPoint(this.m_localAnchor1);
                            },
                            getAnchorB: function () {
                                return this.m_bodyB.getWorldPoint(this.m_localAnchor2);
                            },
                            getReactionForce: function (e) {
                                return new td(
                                    e * (this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.x),
                                    e * (this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.y)
                                );
                            },
                            getReactionTorque: function (e) {
                                return e * this.m_impulse.y;
                            },
                            getJointTranslation: function () {
                                var e = this.m_bodyA,
                                    t = this.m_bodyB,
                                    n = e.getWorldPoint(this.m_localAnchor1),
                                    a = t.getWorldPoint(this.m_localAnchor2);
                                return (t = a.x - n.x), (n = a.y - n.y), (e = e.getWorldVector(this.m_localXAxis1)).x * t + e.y * n;
                            },
                            getJointSpeed: function () {
                                var e = this.m_bodyA,
                                    t = this.m_bodyB,
                                    n = e.m_xf.R,
                                    a = this.m_localAnchor1.x - e.m_sweep.localCenter.x,
                                    s = this.m_localAnchor1.y - e.m_sweep.localCenter.y,
                                    r = n.col1.x * a + n.col2.x * s;
                                (s = n.col1.y * a + n.col2.y * s), (a = r), (n = t.m_xf.R);
                                var A = this.m_localAnchor2.x - t.m_sweep.localCenter.x,
                                    l = this.m_localAnchor2.y - t.m_sweep.localCenter.y;
                                (r = n.col1.x * A + n.col2.x * l), (l = n.col1.y * A + n.col2.y * l), (A = r), (n = t.m_sweep.c.x + A - (e.m_sweep.c.x + a)), (r = t.m_sweep.c.y + l - (e.m_sweep.c.y + s));
                                var o = e.getWorldVector(this.m_localXAxis1),
                                    i = e.m_linearVelocity,
                                    u = t.m_linearVelocity;
                                return (e = e.m_angularVelocity), (t = t.m_angularVelocity), n * -e * o.y + r * e * o.x + (o.x * (u.x + -t * l - i.x - -e * s) + o.y * (u.y + t * A - i.y - e * a));
                            },
                            isLimitEnabled: function () {
                                return this.m_enableLimit;
                            },
                            enableLimit: function (e) {
                                this.m_bodyA.setAwake(!0), this.m_bodyB.setAwake(!0), (this.m_enableLimit = e);
                            },
                            getLowerLimit: function () {
                                return this.m_lowerTranslation;
                            },
                            getUpperLimit: function () {
                                return this.m_upperTranslation;
                            },
                            setLimits: function (e, t) {
                                this.m_bodyA.setAwake(!0), this.m_bodyB.setAwake(!0), (this.m_lowerTranslation = e), (this.m_upperTranslation = t);
                            },
                            isMotorEnabled: function () {
                                return this.m_enableMotor;
                            },
                            enableMotor: function (e) {
                                this.m_bodyA.setAwake(!0), this.m_bodyB.setAwake(!0), (this.m_enableMotor = e);
                            },
                            setMotorSpeed: function (e) {
                                this.m_bodyA.setAwake(!0), this.m_bodyB.setAwake(!0), (this.m_motorSpeed = e);
                            },
                            getMotorSpeed: function () {
                                return this.m_motorSpeed;
                            },
                            setMaxMotorForce: function (e) {
                                this.m_bodyA.setAwake(!0), this.m_bodyB.setAwake(!0), (this.m_maxMotorForce = e);
                            },
                            getMotorForce: function () {
                                return this.m_motorImpulse;
                            },
                            initVelocityConstraints: function (e) {
                                var t = this.m_bodyA,
                                    n = this.m_bodyB,
                                    a = this.m_localCenterA,
                                    s = t.getLocalCenter();
                                (a.x = s.x), (a.y = s.y), (a = this.m_localCenterB), (s = n.getLocalCenter()), (a.x = s.x), (a.y = s.y);
                                var r = t.getTransform();
                                n.getTransform(), (a = t.m_xf.R);
                                var A = this.m_localAnchor1.x - this.m_localCenterA.x,
                                    l = this.m_localAnchor1.y - this.m_localCenterA.y;
                                (s = a.col1.x * A + a.col2.x * l), (l = a.col1.y * A + a.col2.y * l), (A = s), (a = n.m_xf.R);
                                var o = this.m_localAnchor2.x - this.m_localCenterB.x,
                                    i = this.m_localAnchor2.y - this.m_localCenterB.y;
                                (s = a.col1.x * o + a.col2.x * i),
                                    (i = a.col1.y * o + a.col2.y * i),
                                    (o = s),
                                    (a = n.m_sweep.c.x + o - t.m_sweep.c.x - A),
                                    (s = n.m_sweep.c.y + i - t.m_sweep.c.y - l),
                                    (this.m_invMassA = t.m_invMass),
                                    (this.m_invMassB = n.m_invMass),
                                    (this.m_invIA = t.m_invI),
                                    (this.m_invIB = n.m_invI);
                                var u = this.m_axis,
                                    g = kd.mulMV(r.R, this.m_localXAxis1);
                                (u.x = g.x),
                                    (u.y = g.y),
                                    (this.m_a1 = (a + A) * this.m_axis.y - (s + l) * this.m_axis.x),
                                    (this.m_a2 = o * this.m_axis.y - i * this.m_axis.x),
                                    (this.m_motorMass = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_a1 * this.m_a1 + this.m_invIB * this.m_a2 * this.m_a2),
                                    this.m_motorMass > Number.MIN_VALUE && (this.m_motorMass = 1 / this.m_motorMass),
                                    (u = this.m_perp),
                                    (r = kd.mulMV(r.R, this.m_localYAxis1)),
                                    (u.x = r.x),
                                    (u.y = r.y),
                                    (this.m_s1 = (a + A) * this.m_perp.y - (s + l) * this.m_perp.x),
                                    (this.m_s2 = o * this.m_perp.y - i * this.m_perp.x),
                                    (A = this.m_invMassA),
                                    (l = this.m_invMassB),
                                    (o = this.m_invIA),
                                    (i = this.m_invIB),
                                    (this.m_K.col1.x = A + l + o * this.m_s1 * this.m_s1 + i * this.m_s2 * this.m_s2),
                                    (this.m_K.col1.y = o * this.m_s1 + i * this.m_s2),
                                    (this.m_K.col1.z = o * this.m_s1 * this.m_a1 + i * this.m_s2 * this.m_a2),
                                    (this.m_K.col2.x = this.m_K.col1.y),
                                    (this.m_K.col2.y = o + i),
                                    (this.m_K.col2.z = o * this.m_a1 + i * this.m_a2),
                                    (this.m_K.col3.x = this.m_K.col1.z),
                                    (this.m_K.col3.y = this.m_K.col2.z),
                                    (this.m_K.col3.z = A + l + o * this.m_a1 * this.m_a1 + i * this.m_a2 * this.m_a2),
                                    this.m_enableLimit
                                        ? ((a = this.m_axis.x * a + this.m_axis.y * s),
                                          kd.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2 * Me.b2_linearSlop
                                              ? (this.m_limitState = 3)
                                              : a <= this.m_lowerTranslation
                                              ? 1 != this.m_limitState && ((this.m_limitState = 1), (this.m_impulse.z = 0))
                                              : a >= this.m_upperTranslation
                                              ? 2 != this.m_limitState && ((this.m_limitState = 2), (this.m_impulse.z = 0))
                                              : ((this.m_limitState = 0), (this.m_impulse.z = 0)))
                                        : (this.m_limitState = 0),
                                    0 == this.m_enableMotor && (this.m_motorImpulse = 0),
                                    e.warmStarting
                                        ? ((this.m_impulse.x *= e.dtRatio),
                                          (this.m_impulse.y *= e.dtRatio),
                                          (this.m_motorImpulse *= e.dtRatio),
                                          (e = this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.x),
                                          (a = this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.y),
                                          (s = this.m_impulse.x * this.m_s1 + this.m_impulse.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1),
                                          (A = this.m_impulse.x * this.m_s2 + this.m_impulse.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_a2),
                                          (t.m_linearVelocity.x -= this.m_invMassA * e),
                                          (t.m_linearVelocity.y -= this.m_invMassA * a),
                                          (t.m_angularVelocity -= this.m_invIA * s),
                                          (n.m_linearVelocity.x += this.m_invMassB * e),
                                          (n.m_linearVelocity.y += this.m_invMassB * a),
                                          (n.m_angularVelocity += this.m_invIB * A))
                                        : (this.m_impulse.setZero(), (this.m_motorImpulse = 0));
                            },
                            solveVelocityConstraints: function (e) {
                                var t = this.m_bodyA,
                                    n = this.m_bodyB,
                                    a = t.m_linearVelocity,
                                    s = t.m_angularVelocity,
                                    r = n.m_linearVelocity,
                                    A = n.m_angularVelocity;
                                if (this.m_enableMotor && 3 != this.m_limitState) {
                                    var l = this.m_motorMass * (this.m_motorSpeed - (this.m_axis.x * (r.x - a.x) + this.m_axis.y * (r.y - a.y) + this.m_a2 * A - this.m_a1 * s)),
                                        o = this.m_motorImpulse;
                                    (e = e.dt * this.m_maxMotorForce), (this.m_motorImpulse = kd.clamp(this.m_motorImpulse + l, -e, e)), (o = (l = this.m_motorImpulse - o) * this.m_axis.x), (e = l * this.m_axis.y);
                                    var i = l * this.m_a1;
                                    (l *= this.m_a2), (a.x -= this.m_invMassA * o), (a.y -= this.m_invMassA * e), (s -= this.m_invIA * i), (r.x += this.m_invMassB * o), (r.y += this.m_invMassB * e), (A += this.m_invIB * l);
                                }
                                (i = this.m_perp.x * (r.x - a.x) + this.m_perp.y * (r.y - a.y) + this.m_s2 * A - this.m_s1 * s),
                                    (e = A - s),
                                    this.m_enableLimit && 0 != this.m_limitState
                                        ? ((l = this.m_axis.x * (r.x - a.x) + this.m_axis.y * (r.y - a.y) + this.m_a2 * A - this.m_a1 * s),
                                          (o = this.m_impulse.copy()),
                                          (l = this.m_K.solve33(new qz(), -i, -e, -l)),
                                          this.m_impulse.add(l),
                                          1 == this.m_limitState ? (this.m_impulse.z = kd.max(this.m_impulse.z, 0)) : 2 == this.m_limitState && (this.m_impulse.z = kd.min(this.m_impulse.z, 0)),
                                          (i = -i - (this.m_impulse.z - o.z) * this.m_K.col3.x),
                                          (e = -e - (this.m_impulse.z - o.z) * this.m_K.col3.y),
                                          ((e = this.m_K.solve22(new td(), i, e)).x += o.x),
                                          (e.y += o.y),
                                          (this.m_impulse.x = e.x),
                                          (this.m_impulse.y = e.y),
                                          (l.x = this.m_impulse.x - o.x),
                                          (l.y = this.m_impulse.y - o.y),
                                          (l.z = this.m_impulse.z - o.z),
                                          (o = l.x * this.m_perp.x + l.z * this.m_axis.x),
                                          (e = l.x * this.m_perp.y + l.z * this.m_axis.y),
                                          (i = l.x * this.m_s1 + l.y + l.z * this.m_a1),
                                          (l = l.x * this.m_s2 + l.y + l.z * this.m_a2))
                                        : ((l = this.m_K.solve22(new td(), -i, -e)),
                                          (this.m_impulse.x += l.x),
                                          (this.m_impulse.y += l.y),
                                          (o = l.x * this.m_perp.x),
                                          (e = l.x * this.m_perp.y),
                                          (i = l.x * this.m_s1 + l.y),
                                          (l = l.x * this.m_s2 + l.y)),
                                    (a.x -= this.m_invMassA * o),
                                    (a.y -= this.m_invMassA * e),
                                    (s -= this.m_invIA * i),
                                    (r.x += this.m_invMassB * o),
                                    (r.y += this.m_invMassB * e),
                                    (A += this.m_invIB * l),
                                    ((l = t.m_linearVelocity).x = a.x),
                                    (l.y = a.y),
                                    (t.m_angularVelocity = s),
                                    ((t = n.m_linearVelocity).x = r.x),
                                    (t.y = r.y),
                                    (n.m_angularVelocity = A);
                            },
                            solvePositionConstraints: function (e) {
                                e = this.m_bodyA;
                                var t = this.m_bodyB,
                                    n = e.m_sweep.c,
                                    a = e.m_sweep.a,
                                    s = t.m_sweep.c,
                                    r = t.m_sweep.a,
                                    A = 0,
                                    l = !1,
                                    o = 0,
                                    i = Tv.fromAngle(a),
                                    u = Tv.fromAngle(r),
                                    g = i,
                                    m = this.m_localAnchor1.x - this.m_localCenterA.x,
                                    d = this.m_localAnchor1.y - this.m_localCenterA.y,
                                    c = g.col1.x * m + g.col2.x * d;
                                (d = g.col1.y * m + g.col2.y * d), (m = c), (g = u), (u = this.m_localAnchor2.x - this.m_localCenterB.x);
                                var p = this.m_localAnchor2.y - this.m_localCenterB.y;
                                if (((c = g.col1.x * u + g.col2.x * p), (p = g.col1.y * u + g.col2.y * p), (u = c), (g = s.x + u - n.x - m), (c = s.y + p - n.y - d), this.m_enableLimit)) {
                                    (this.m_axis = kd.mulMV(i, this.m_localXAxis1)), (this.m_a1 = (g + m) * this.m_axis.y - (c + d) * this.m_axis.x), (this.m_a2 = u * this.m_axis.y - p * this.m_axis.x);
                                    var h = this.m_axis.x * g + this.m_axis.y * c;
                                    kd.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2 * Me.b2_linearSlop
                                        ? ((o = kd.clamp(h, -Me.b2_maxLinearCorrection, Me.b2_maxLinearCorrection)), (A = kd.abs(h)), (l = !0))
                                        : h <= this.m_lowerTranslation
                                        ? ((o = kd.clamp(h - this.m_lowerTranslation + Me.b2_linearSlop, -Me.b2_maxLinearCorrection, 0)), (A = this.m_lowerTranslation - h), (l = !0))
                                        : h >= this.m_upperTranslation && ((o = kd.clamp(h - this.m_upperTranslation + Me.b2_linearSlop, 0, Me.b2_maxLinearCorrection)), (A = h - this.m_upperTranslation), (l = !0));
                                }
                                return (
                                    (this.m_perp = kd.mulMV(i, this.m_localYAxis1)),
                                    (this.m_s1 = (g + m) * this.m_perp.y - (c + d) * this.m_perp.x),
                                    (this.m_s2 = u * this.m_perp.y - p * this.m_perp.x),
                                    (i = new qz()),
                                    (d = this.m_perp.x * g + this.m_perp.y * c),
                                    (u = r - a - this.m_refAngle),
                                    (A = kd.max(A, kd.abs(d))),
                                    (m = kd.abs(u)),
                                    l
                                        ? ((l = this.m_invMassA),
                                          (p = this.m_invMassB),
                                          (g = this.m_invIA),
                                          (c = this.m_invIB),
                                          (this.m_K.col1.x = l + p + g * this.m_s1 * this.m_s1 + c * this.m_s2 * this.m_s2),
                                          (this.m_K.col1.y = g * this.m_s1 + c * this.m_s2),
                                          (this.m_K.col1.z = g * this.m_s1 * this.m_a1 + c * this.m_s2 * this.m_a2),
                                          (this.m_K.col2.x = this.m_K.col1.y),
                                          (this.m_K.col2.y = g + c),
                                          (this.m_K.col2.z = g * this.m_a1 + c * this.m_a2),
                                          (this.m_K.col3.x = this.m_K.col1.z),
                                          (this.m_K.col3.y = this.m_K.col2.z),
                                          (this.m_K.col3.z = l + p + g * this.m_a1 * this.m_a1 + c * this.m_a2 * this.m_a2),
                                          this.m_K.solve33(i, -d, -u, -o))
                                        : ((l = this.m_invMassA),
                                          (p = this.m_invMassB),
                                          (g = this.m_invIA),
                                          (c = this.m_invIB),
                                          (o = g * this.m_s1 + c * this.m_s2),
                                          (h = g + c),
                                          this.m_K.col1.set(l + p + g * this.m_s1 * this.m_s1 + c * this.m_s2 * this.m_s2, o, 0),
                                          this.m_K.col2.set(o, h, 0),
                                          (o = this.m_K.solve22(new td(), -d, -u)),
                                          (i.x = o.x),
                                          (i.y = o.y),
                                          (i.z = 0)),
                                    (o = i.x * this.m_perp.x + i.z * this.m_axis.x),
                                    (l = i.x * this.m_perp.y + i.z * this.m_axis.y),
                                    (d = i.x * this.m_s1 + i.y + i.z * this.m_a1),
                                    (i = i.x * this.m_s2 + i.y + i.z * this.m_a2),
                                    (n.x -= this.m_invMassA * o),
                                    (n.y -= this.m_invMassA * l),
                                    (a -= this.m_invIA * d),
                                    (s.x += this.m_invMassB * o),
                                    (s.y += this.m_invMassB * l),
                                    (r += this.m_invIB * i),
                                    (e.m_sweep.a = a),
                                    (t.m_sweep.a = r),
                                    e.synchronizeTransform(),
                                    t.synchronizeTransform(),
                                    A <= Me.b2_linearSlop && m <= Me.b2_angularSlop
                                );
                            },
                            m_localAnchor1: null,
                            m_localAnchor2: null,
                            m_localXAxis1: null,
                            m_localYAxis1: null,
                            m_refAngle: null,
                            m_axis: null,
                            m_perp: null,
                            m_s1: null,
                            m_s2: null,
                            m_a1: null,
                            m_a2: null,
                            m_K: null,
                            m_impulse: null,
                            m_motorMass: null,
                            m_motorImpulse: null,
                            m_lowerTranslation: null,
                            m_upperTranslation: null,
                            m_maxMotorForce: null,
                            m_motorSpeed: null,
                            m_enableLimit: null,
                            m_enableMotor: null,
                            m_limitState: null,
                            __class__: xW,
                        }));
                    var J4 = function () {
                        Sw.call(this), (this.localAnchorA = new td()), (this.localAnchorB = new td()), (this.localAxisA = new td()), (this.type = 2);
                        var e = this.localAxisA,
                            t = 1,
                            n = 0;
                        null == n && (n = 0),
                            null == t && (t = 0),
                            (e.x = t),
                            (e.y = n),
                            (this.referenceAngle = 0),
                            (this.enableLimit = !1),
                            (this.upperTranslation = this.lowerTranslation = 0),
                            (this.enableMotor = !1),
                            (this.motorSpeed = this.maxMotorForce = 0);
                    };
                    (v["box2D.dynamics.joints.B2PrismaticJointDef"] = J4),
                        (J4.__name__ = "box2D.dynamics.joints.B2PrismaticJointDef"),
                        (J4.__super__ = Sw),
                        (J4.prototype = K(Sw.prototype, {
                            initialize: function (e, t, n, a) {
                                (this.bodyA = e),
                                    (this.bodyB = t),
                                    (this.localAnchorA = this.bodyA.getLocalPoint(n)),
                                    (this.localAnchorB = this.bodyB.getLocalPoint(n)),
                                    (this.localAxisA = this.bodyA.getLocalVector(a)),
                                    (this.referenceAngle = this.bodyB.getAngle() - this.bodyA.getAngle());
                            },
                            localAnchorA: null,
                            localAnchorB: null,
                            localAxisA: null,
                            referenceAngle: null,
                            enableLimit: null,
                            lowerTranslation: null,
                            upperTranslation: null,
                            enableMotor: null,
                            maxMotorForce: null,
                            motorSpeed: null,
                            __class__: J4,
                        }));
                    var pQ = function (e) {
                        Or.call(this, e),
                            (this.m_groundAnchor1 = new td()),
                            (this.m_groundAnchor2 = new td()),
                            (this.m_localAnchor1 = new td()),
                            (this.m_localAnchor2 = new td()),
                            (this.m_u1 = new td()),
                            (this.m_u2 = new td()),
                            (this.m_ground = this.m_bodyA.m_world.m_groundBody),
                            (this.m_groundAnchor1.x = e.groundAnchorA.x - this.m_ground.m_xf.position.x),
                            (this.m_groundAnchor1.y = e.groundAnchorA.y - this.m_ground.m_xf.position.y),
                            (this.m_groundAnchor2.x = e.groundAnchorB.x - this.m_ground.m_xf.position.x),
                            (this.m_groundAnchor2.y = e.groundAnchorB.y - this.m_ground.m_xf.position.y);
                        var t = this.m_localAnchor1,
                            n = e.localAnchorA;
                        (t.x = n.x),
                            (t.y = n.y),
                            (t = this.m_localAnchor2),
                            (n = e.localAnchorB),
                            (t.x = n.x),
                            (t.y = n.y),
                            (this.m_ratio = e.ratio),
                            (this.m_constant = e.lengthA + this.m_ratio * e.lengthB),
                            (this.m_maxLength1 = kd.min(e.maxLengthA, this.m_constant - this.m_ratio * pQ.b2_minPulleyLength)),
                            (this.m_maxLength2 = kd.min(e.maxLengthB, (this.m_constant - pQ.b2_minPulleyLength) / this.m_ratio)),
                            (this.m_limitImpulse2 = this.m_limitImpulse1 = this.m_impulse = 0);
                    };
                    (v["box2D.dynamics.joints.B2PulleyJoint"] = pQ),
                        (pQ.__name__ = "box2D.dynamics.joints.B2PulleyJoint"),
                        (pQ.__super__ = Or),
                        (pQ.prototype = K(Or.prototype, {
                            getAnchorA: function () {
                                return this.m_bodyA.getWorldPoint(this.m_localAnchor1);
                            },
                            getAnchorB: function () {
                                return this.m_bodyB.getWorldPoint(this.m_localAnchor2);
                            },
                            getReactionForce: function (e) {
                                return new td(e * this.m_impulse * this.m_u2.x, e * this.m_impulse * this.m_u2.y);
                            },
                            getReactionTorque: function (e) {
                                return 0;
                            },
                            getGroundAnchorA: function () {
                                var e = this.m_ground.m_xf.position.copy();
                                return e.add(this.m_groundAnchor1), e;
                            },
                            getGroundAnchorB: function () {
                                var e = this.m_ground.m_xf.position.copy();
                                return e.add(this.m_groundAnchor2), e;
                            },
                            getLength1: function () {
                                var e = this.m_bodyA.getWorldPoint(this.m_localAnchor1),
                                    t = e.x - (this.m_ground.m_xf.position.x + this.m_groundAnchor1.x);
                                return (e = e.y - (this.m_ground.m_xf.position.y + this.m_groundAnchor1.y)), Math.sqrt(t * t + e * e);
                            },
                            getLength2: function () {
                                var e = this.m_bodyB.getWorldPoint(this.m_localAnchor2),
                                    t = e.x - (this.m_ground.m_xf.position.x + this.m_groundAnchor2.x);
                                return (e = e.y - (this.m_ground.m_xf.position.y + this.m_groundAnchor2.y)), Math.sqrt(t * t + e * e);
                            },
                            getRatio: function () {
                                return this.m_ratio;
                            },
                            initVelocityConstraints: function (e) {
                                var t = this.m_bodyA,
                                    n = this.m_bodyB,
                                    a = t.m_xf.R,
                                    s = this.m_localAnchor1.x - t.m_sweep.localCenter.x,
                                    r = this.m_localAnchor1.y - t.m_sweep.localCenter.y,
                                    A = a.col1.x * s + a.col2.x * r;
                                (r = a.col1.y * s + a.col2.y * r), (s = A), (a = n.m_xf.R);
                                var l = this.m_localAnchor2.x - n.m_sweep.localCenter.x,
                                    o = this.m_localAnchor2.y - n.m_sweep.localCenter.y;
                                (A = a.col1.x * l + a.col2.x * o), (o = a.col1.y * l + a.col2.y * o), (l = A);
                                var i = n.m_sweep.c.x + l;
                                a = n.m_sweep.c.y + o;
                                var u = this.m_ground.m_xf.position.x + this.m_groundAnchor2.x;
                                A = this.m_ground.m_xf.position.y + this.m_groundAnchor2.y;
                                var g = this.m_u1,
                                    m = t.m_sweep.c.x + s - (this.m_ground.m_xf.position.x + this.m_groundAnchor1.x),
                                    d = t.m_sweep.c.y + r - (this.m_ground.m_xf.position.y + this.m_groundAnchor1.y);
                                null == d && (d = 0),
                                    null == m && (m = 0),
                                    (g.x = m),
                                    (g.y = d),
                                    null == (a -= A) && (a = 0),
                                    null == (i -= u) && (i = 0),
                                    ((g = this.m_u2).x = i),
                                    (g.y = a),
                                    (a = this.m_u1.length()),
                                    (A = this.m_u2.length()),
                                    a > Me.b2_linearSlop ? this.m_u1.multiply(1 / a) : (((i = this.m_u1).x = 0), (i.y = 0)),
                                    A > Me.b2_linearSlop ? this.m_u2.multiply(1 / A) : (((i = this.m_u2).x = 0), (i.y = 0)),
                                    0 < this.m_constant - a - this.m_ratio * A ? (this.m_impulse = this.m_state = 0) : (this.m_state = 2),
                                    a < this.m_maxLength1 ? (this.m_limitImpulse1 = this.m_limitState1 = 0) : (this.m_limitState1 = 2),
                                    A < this.m_maxLength2 ? (this.m_limitImpulse2 = this.m_limitState2 = 0) : (this.m_limitState2 = 2),
                                    (a = s * this.m_u1.y - r * this.m_u1.x),
                                    (A = l * this.m_u2.y - o * this.m_u2.x),
                                    (this.m_limitMass1 = t.m_invMass + t.m_invI * a * a),
                                    (this.m_limitMass2 = n.m_invMass + n.m_invI * A * A),
                                    (this.m_pulleyMass = this.m_limitMass1 + this.m_ratio * this.m_ratio * this.m_limitMass2),
                                    (this.m_limitMass1 = 1 / this.m_limitMass1),
                                    (this.m_limitMass2 = 1 / this.m_limitMass2),
                                    (this.m_pulleyMass = 1 / this.m_pulleyMass),
                                    e.warmStarting
                                        ? ((this.m_impulse *= e.dtRatio),
                                          (this.m_limitImpulse1 *= e.dtRatio),
                                          (this.m_limitImpulse2 *= e.dtRatio),
                                          (e = (-this.m_impulse - this.m_limitImpulse1) * this.m_u1.x),
                                          (a = (-this.m_impulse - this.m_limitImpulse1) * this.m_u1.y),
                                          (A = (-this.m_ratio * this.m_impulse - this.m_limitImpulse2) * this.m_u2.x),
                                          (i = (-this.m_ratio * this.m_impulse - this.m_limitImpulse2) * this.m_u2.y),
                                          (t.m_linearVelocity.x += t.m_invMass * e),
                                          (t.m_linearVelocity.y += t.m_invMass * a),
                                          (t.m_angularVelocity += t.m_invI * (s * a - r * e)),
                                          (n.m_linearVelocity.x += n.m_invMass * A),
                                          (n.m_linearVelocity.y += n.m_invMass * i),
                                          (n.m_angularVelocity += n.m_invI * (l * i - o * A)))
                                        : (this.m_limitImpulse2 = this.m_limitImpulse1 = this.m_impulse = 0);
                            },
                            solveVelocityConstraints: function (e) {
                                e = this.m_bodyA;
                                var t = this.m_bodyB,
                                    n = e.m_xf.R,
                                    a = this.m_localAnchor1.x - e.m_sweep.localCenter.x,
                                    s = this.m_localAnchor1.y - e.m_sweep.localCenter.y,
                                    r = n.col1.x * a + n.col2.x * s;
                                (s = n.col1.y * a + n.col2.y * s), (a = r), (n = t.m_xf.R);
                                var A = this.m_localAnchor2.x - t.m_sweep.localCenter.x,
                                    l = this.m_localAnchor2.y - t.m_sweep.localCenter.y;
                                if (((r = n.col1.x * A + n.col2.x * l), (l = n.col1.y * A + n.col2.y * l), (A = r), 2 == this.m_state)) {
                                    (n = e.m_linearVelocity.x + -e.m_angularVelocity * s), (r = e.m_linearVelocity.y + e.m_angularVelocity * a);
                                    var o = t.m_linearVelocity.x + -t.m_angularVelocity * l,
                                        i = t.m_linearVelocity.y + t.m_angularVelocity * A;
                                    (n = -(this.m_u1.x * n + this.m_u1.y * r) - this.m_ratio * (this.m_u2.x * o + this.m_u2.y * i)),
                                        (i = this.m_pulleyMass * -n),
                                        (n = this.m_impulse),
                                        (this.m_impulse = kd.max(0, this.m_impulse + i)),
                                        (n = -(i = this.m_impulse - n) * this.m_u1.x),
                                        (r = -i * this.m_u1.y),
                                        (o = -this.m_ratio * i * this.m_u2.x),
                                        (i = -this.m_ratio * i * this.m_u2.y),
                                        (e.m_linearVelocity.x += e.m_invMass * n),
                                        (e.m_linearVelocity.y += e.m_invMass * r),
                                        (e.m_angularVelocity += e.m_invI * (a * r - s * n)),
                                        (t.m_linearVelocity.x += t.m_invMass * o),
                                        (t.m_linearVelocity.y += t.m_invMass * i),
                                        (t.m_angularVelocity += t.m_invI * (A * i - l * o));
                                }
                                2 == this.m_limitState1 &&
                                    ((n = e.m_linearVelocity.x + -e.m_angularVelocity * s),
                                    (r = e.m_linearVelocity.y + e.m_angularVelocity * a),
                                    (n = -(this.m_u1.x * n + this.m_u1.y * r)),
                                    (i = -this.m_limitMass1 * n),
                                    (n = this.m_limitImpulse1),
                                    (this.m_limitImpulse1 = kd.max(0, this.m_limitImpulse1 + i)),
                                    (n = -(i = this.m_limitImpulse1 - n) * this.m_u1.x),
                                    (r = -i * this.m_u1.y),
                                    (e.m_linearVelocity.x += e.m_invMass * n),
                                    (e.m_linearVelocity.y += e.m_invMass * r),
                                    (e.m_angularVelocity += e.m_invI * (a * r - s * n))),
                                    2 == this.m_limitState2 &&
                                        ((o = t.m_linearVelocity.x + -t.m_angularVelocity * l),
                                        (i = t.m_linearVelocity.y + t.m_angularVelocity * A),
                                        (n = -(this.m_u2.x * o + this.m_u2.y * i)),
                                        (i = -this.m_limitMass2 * n),
                                        (n = this.m_limitImpulse2),
                                        (this.m_limitImpulse2 = kd.max(0, this.m_limitImpulse2 + i)),
                                        (o = -(i = this.m_limitImpulse2 - n) * this.m_u2.x),
                                        (i = -i * this.m_u2.y),
                                        (t.m_linearVelocity.x += t.m_invMass * o),
                                        (t.m_linearVelocity.y += t.m_invMass * i),
                                        (t.m_angularVelocity += t.m_invI * (A * i - l * o)));
                            },
                            solvePositionConstraints: function (e) {
                                var t = this.m_bodyA;
                                e = this.m_bodyB;
                                var n = this.m_ground.m_xf.position.x + this.m_groundAnchor1.x,
                                    a = this.m_ground.m_xf.position.y + this.m_groundAnchor1.y,
                                    s = this.m_ground.m_xf.position.x + this.m_groundAnchor2.x,
                                    r = this.m_ground.m_xf.position.y + this.m_groundAnchor2.y,
                                    A = 0;
                                if (2 == this.m_state) {
                                    var l = t.m_xf.R,
                                        o = this.m_localAnchor1.x - t.m_sweep.localCenter.x,
                                        i = this.m_localAnchor1.y - t.m_sweep.localCenter.y,
                                        u = l.col1.x * o + l.col2.x * i;
                                    (i = l.col1.y * o + l.col2.y * i), (o = u), (l = e.m_xf.R);
                                    var g = this.m_localAnchor2.x - e.m_sweep.localCenter.x,
                                        m = this.m_localAnchor2.y - e.m_sweep.localCenter.y;
                                    (u = l.col1.x * g + l.col2.x * m), (m = l.col1.y * g + l.col2.y * m), (g = u);
                                    var d = t.m_sweep.c.x + o,
                                        c = t.m_sweep.c.y + i;
                                    (u = e.m_sweep.c.x + g), (l = e.m_sweep.c.y + m);
                                    var p = this.m_u1;
                                    null == (c -= a) && (c = 0),
                                        null == (d -= n) && (d = 0),
                                        (p.x = d),
                                        (p.y = c),
                                        null == (l -= r) && (l = 0),
                                        null == (u -= s) && (u = 0),
                                        ((c = this.m_u2).x = u),
                                        (c.y = l),
                                        (l = this.m_u1.length()),
                                        (u = this.m_u2.length()),
                                        l > Me.b2_linearSlop ? this.m_u1.multiply(1 / l) : (((c = this.m_u1).x = 0), (c.y = 0)),
                                        u > Me.b2_linearSlop ? this.m_u2.multiply(1 / u) : (((c = this.m_u2).x = 0), (c.y = 0)),
                                        (l = this.m_constant - l - this.m_ratio * u),
                                        (A = kd.max(A, -l)),
                                        (l = kd.clamp(l + Me.b2_linearSlop, -Me.b2_maxLinearCorrection, 0)),
                                        (d = -(l *= -this.m_pulleyMass) * this.m_u1.x),
                                        (c = -l * this.m_u1.y),
                                        (u = -this.m_ratio * l * this.m_u2.x),
                                        (l = -this.m_ratio * l * this.m_u2.y),
                                        (t.m_sweep.c.x += t.m_invMass * d),
                                        (t.m_sweep.c.y += t.m_invMass * c),
                                        (t.m_sweep.a += t.m_invI * (o * c - i * d)),
                                        (e.m_sweep.c.x += e.m_invMass * u),
                                        (e.m_sweep.c.y += e.m_invMass * l),
                                        (e.m_sweep.a += e.m_invI * (g * l - m * u)),
                                        t.synchronizeTransform(),
                                        e.synchronizeTransform();
                                }
                                return (
                                    2 == this.m_limitState1 &&
                                        ((l = t.m_xf.R),
                                        (o = this.m_localAnchor1.x - t.m_sweep.localCenter.x),
                                        (i = this.m_localAnchor1.y - t.m_sweep.localCenter.y),
                                        (u = l.col1.x * o + l.col2.x * i),
                                        (i = l.col1.y * o + l.col2.y * i),
                                        (o = u),
                                        (d = t.m_sweep.c.x + o),
                                        null == (a = (c = t.m_sweep.c.y + i) - a) && (a = 0),
                                        null == (m = d - n) && (m = 0),
                                        ((g = this.m_u1).x = m),
                                        (g.y = a),
                                        (l = this.m_u1.length()) > Me.b2_linearSlop ? ((this.m_u1.x *= 1 / l), (this.m_u1.y *= 1 / l)) : (((g = this.m_u1).x = 0), (g.y = 0)),
                                        (l = this.m_maxLength1 - l),
                                        (A = kd.max(A, -l)),
                                        (l = kd.clamp(l + Me.b2_linearSlop, -Me.b2_maxLinearCorrection, 0)),
                                        (d = -(l *= -this.m_limitMass1) * this.m_u1.x),
                                        (c = -l * this.m_u1.y),
                                        (t.m_sweep.c.x += t.m_invMass * d),
                                        (t.m_sweep.c.y += t.m_invMass * c),
                                        (t.m_sweep.a += t.m_invI * (o * c - i * d)),
                                        t.synchronizeTransform()),
                                    2 == this.m_limitState2 &&
                                        ((l = e.m_xf.R),
                                        (g = this.m_localAnchor2.x - e.m_sweep.localCenter.x),
                                        (m = this.m_localAnchor2.y - e.m_sweep.localCenter.y),
                                        (u = l.col1.x * g + l.col2.x * m),
                                        (m = l.col1.y * g + l.col2.y * m),
                                        (g = u),
                                        (u = e.m_sweep.c.x + g),
                                        null == (r = (l = e.m_sweep.c.y + m) - r) && (r = 0),
                                        null == (s = u - s) && (s = 0),
                                        ((t = this.m_u2).x = s),
                                        (t.y = r),
                                        (u = this.m_u2.length()) > Me.b2_linearSlop ? ((this.m_u2.x *= 1 / u), (this.m_u2.y *= 1 / u)) : (((r = this.m_u2).x = 0), (r.y = 0)),
                                        (l = this.m_maxLength2 - u),
                                        (A = kd.max(A, -l)),
                                        (l = kd.clamp(l + Me.b2_linearSlop, -Me.b2_maxLinearCorrection, 0)),
                                        (u = -(l *= -this.m_limitMass2) * this.m_u2.x),
                                        (l = -l * this.m_u2.y),
                                        (e.m_sweep.c.x += e.m_invMass * u),
                                        (e.m_sweep.c.y += e.m_invMass * l),
                                        (e.m_sweep.a += e.m_invI * (g * l - m * u)),
                                        e.synchronizeTransform()),
                                    A < Me.b2_linearSlop
                                );
                            },
                            m_ground: null,
                            m_groundAnchor1: null,
                            m_groundAnchor2: null,
                            m_localAnchor1: null,
                            m_localAnchor2: null,
                            m_u1: null,
                            m_u2: null,
                            m_constant: null,
                            m_ratio: null,
                            m_maxLength1: null,
                            m_maxLength2: null,
                            m_pulleyMass: null,
                            m_limitMass1: null,
                            m_limitMass2: null,
                            m_impulse: null,
                            m_limitImpulse1: null,
                            m_limitImpulse2: null,
                            m_state: null,
                            m_limitState1: null,
                            m_limitState2: null,
                            __class__: pQ,
                        }));
                    var K4 = function () {
                        Sw.call(this), (this.groundAnchorA = new td()), (this.groundAnchorB = new td()), (this.localAnchorA = new td()), (this.localAnchorB = new td()), (this.type = 4);
                        var e = this.groundAnchorA,
                            t = -1,
                            n = 1;
                        null == n && (n = 0),
                            null == t && (t = 0),
                            (e.x = t),
                            (e.y = n),
                            null == (n = t = 1) && (n = 0),
                            null == t && (t = 0),
                            ((e = this.groundAnchorB).x = t),
                            (e.y = n),
                            null == (n = 0) && (n = 0),
                            null == (t = -1) && (t = 0),
                            ((e = this.localAnchorA).x = t),
                            (e.y = n),
                            null == (n = 0) && (n = 0),
                            null == (t = 1) && (t = 0),
                            ((e = this.localAnchorB).x = t),
                            (e.y = n),
                            (this.maxLengthB = this.lengthB = this.maxLengthA = this.lengthA = 0),
                            (this.ratio = 1),
                            (this.collideConnected = !0);
                    };
                    (v["box2D.dynamics.joints.B2PulleyJointDef"] = K4),
                        (K4.__name__ = "box2D.dynamics.joints.B2PulleyJointDef"),
                        (K4.__super__ = Sw),
                        (K4.prototype = K(Sw.prototype, {
                            initialize: function (e, t, n, a, s, r, A) {
                                (this.bodyA = e),
                                    (this.bodyB = t),
                                    ((e = this.groundAnchorA).x = n.x),
                                    (e.y = n.y),
                                    ((e = this.groundAnchorB).x = a.x),
                                    (e.y = a.y),
                                    (this.localAnchorA = this.bodyA.getLocalPoint(s)),
                                    (this.localAnchorB = this.bodyB.getLocalPoint(r)),
                                    (e = s.x - n.x),
                                    (n = s.y - n.y),
                                    (this.lengthA = Math.sqrt(e * e + n * n)),
                                    (n = r.x - a.x),
                                    (a = r.y - a.y),
                                    (this.lengthB = Math.sqrt(n * n + a * a)),
                                    (this.ratio = A),
                                    (A = this.lengthA + this.ratio * this.lengthB),
                                    (this.maxLengthA = A - this.ratio * pQ.b2_minPulleyLength),
                                    (this.maxLengthB = (A - pQ.b2_minPulleyLength) / this.ratio);
                            },
                            groundAnchorA: null,
                            groundAnchorB: null,
                            localAnchorA: null,
                            localAnchorB: null,
                            lengthA: null,
                            maxLengthA: null,
                            lengthB: null,
                            maxLengthB: null,
                            ratio: null,
                            __class__: K4,
                        }));
                    var QP = function (e) {
                        Or.call(this, e),
                            (this.K = new Tv()),
                            (this.K1 = new Tv()),
                            (this.K2 = new Tv()),
                            (this.K3 = new Tv()),
                            (this.impulse3 = new qz()),
                            (this.impulse2 = new td()),
                            (this.reduced = new td()),
                            (this.m_localAnchor1 = new td()),
                            (this.m_localAnchor2 = new td()),
                            (this.m_impulse = new qz()),
                            (this.m_mass = new JV());
                        var t = this.m_localAnchor1,
                            n = e.localAnchorA;
                        (t.x = n.x),
                            (t.y = n.y),
                            (t = this.m_localAnchor2),
                            (n = e.localAnchorB),
                            (t.x = n.x),
                            (t.y = n.y),
                            (this.m_referenceAngle = e.referenceAngle),
                            this.m_impulse.setZero(),
                            (this.m_motorImpulse = 0),
                            (this.m_lowerAngle = e.lowerAngle),
                            (this.m_upperAngle = e.upperAngle),
                            (this.m_maxMotorTorque = e.maxMotorTorque),
                            (this.m_motorSpeed = e.motorSpeed),
                            (this.m_enableLimit = e.enableLimit),
                            (this.m_enableMotor = e.enableMotor),
                            (this.m_limitState = 0);
                    };
                    (v["box2D.dynamics.joints.B2RevoluteJoint"] = QP),
                        (QP.__name__ = "box2D.dynamics.joints.B2RevoluteJoint"),
                        (QP.__super__ = Or),
                        (QP.prototype = K(Or.prototype, {
                            getAnchorA: function () {
                                return this.m_bodyA.getWorldPoint(this.m_localAnchor1);
                            },
                            getAnchorB: function () {
                                return this.m_bodyB.getWorldPoint(this.m_localAnchor2);
                            },
                            getReactionForce: function (e) {
                                return new td(e * this.m_impulse.x, e * this.m_impulse.y);
                            },
                            getReactionTorque: function (e) {
                                return e * this.m_impulse.z;
                            },
                            getJointAngle: function () {
                                return this.m_bodyB.m_sweep.a - this.m_bodyA.m_sweep.a - this.m_referenceAngle;
                            },
                            getJointSpeed: function () {
                                return this.m_bodyB.m_angularVelocity - this.m_bodyA.m_angularVelocity;
                            },
                            isLimitEnabled: function () {
                                return this.m_enableLimit;
                            },
                            enableLimit: function (e) {
                                this.m_enableLimit = e;
                            },
                            getLowerLimit: function () {
                                return this.m_lowerAngle;
                            },
                            getUpperLimit: function () {
                                return this.m_upperAngle;
                            },
                            setLimits: function (e, t) {
                                (this.m_lowerAngle = e), (this.m_upperAngle = t);
                            },
                            isMotorEnabled: function () {
                                return this.m_bodyA.setAwake(!0), this.m_bodyB.setAwake(!0), this.m_enableMotor;
                            },
                            enableMotor: function (e) {
                                this.m_enableMotor = e;
                            },
                            setMotorSpeed: function (e) {
                                this.m_bodyA.setAwake(!0), this.m_bodyB.setAwake(!0), (this.m_motorSpeed = e);
                            },
                            getMotorSpeed: function () {
                                return this.m_motorSpeed;
                            },
                            setMaxMotorTorque: function (e) {
                                this.m_maxMotorTorque = e;
                            },
                            getMotorTorque: function () {
                                return this.m_maxMotorTorque;
                            },
                            K: null,
                            K1: null,
                            K2: null,
                            K3: null,
                            initVelocityConstraints: function (e) {
                                var t = this.m_bodyA,
                                    n = this.m_bodyB,
                                    a = t.m_xf.R,
                                    s = this.m_localAnchor1.x - t.m_sweep.localCenter.x,
                                    r = this.m_localAnchor1.y - t.m_sweep.localCenter.y,
                                    A = a.col1.x * s + a.col2.x * r;
                                (r = a.col1.y * s + a.col2.y * r), (s = A), (a = n.m_xf.R);
                                var l = this.m_localAnchor2.x - n.m_sweep.localCenter.x,
                                    o = this.m_localAnchor2.y - n.m_sweep.localCenter.y;
                                (A = a.col1.x * l + a.col2.x * o), (o = a.col1.y * l + a.col2.y * o), (l = A), (a = t.m_invMass), (A = n.m_invMass);
                                var i = t.m_invI,
                                    u = n.m_invI;
                                if (
                                    ((this.m_mass.col1.x = a + A + r * r * i + o * o * u),
                                    (this.m_mass.col2.x = -r * s * i - o * l * u),
                                    (this.m_mass.col3.x = -r * i - o * u),
                                    (this.m_mass.col1.y = this.m_mass.col2.x),
                                    (this.m_mass.col2.y = a + A + s * s * i + l * l * u),
                                    (this.m_mass.col3.y = s * i + l * u),
                                    (this.m_mass.col1.z = this.m_mass.col3.x),
                                    (this.m_mass.col2.z = this.m_mass.col3.y),
                                    (this.m_mass.col3.z = i + u),
                                    (this.m_motorMass = 1 / (i + u)),
                                    0 == this.m_enableMotor && (this.m_motorImpulse = 0),
                                    this.m_enableLimit)
                                ) {
                                    var g = n.m_sweep.a - t.m_sweep.a - this.m_referenceAngle;
                                    kd.abs(this.m_upperAngle - this.m_lowerAngle) < 2 * Me.b2_angularSlop
                                        ? (this.m_limitState = 3)
                                        : g <= this.m_lowerAngle
                                        ? (1 != this.m_limitState && (this.m_impulse.z = 0), (this.m_limitState = 1))
                                        : g >= this.m_upperAngle
                                        ? (2 != this.m_limitState && (this.m_impulse.z = 0), (this.m_limitState = 2))
                                        : ((this.m_limitState = 0), (this.m_impulse.z = 0));
                                } else this.m_limitState = 0;
                                e.warmStarting
                                    ? ((this.m_impulse.x *= e.dtRatio),
                                      (this.m_impulse.y *= e.dtRatio),
                                      (this.m_motorImpulse *= e.dtRatio),
                                      (e = this.m_impulse.x),
                                      (g = this.m_impulse.y),
                                      (t.m_linearVelocity.x -= a * e),
                                      (t.m_linearVelocity.y -= a * g),
                                      (t.m_angularVelocity -= i * (s * g - r * e + this.m_motorImpulse + this.m_impulse.z)),
                                      (n.m_linearVelocity.x += A * e),
                                      (n.m_linearVelocity.y += A * g),
                                      (n.m_angularVelocity += u * (l * g - o * e + this.m_motorImpulse + this.m_impulse.z)))
                                    : (this.m_impulse.setZero(), (this.m_motorImpulse = 0));
                            },
                            impulse3: null,
                            impulse2: null,
                            reduced: null,
                            solveVelocityConstraints: function (e) {
                                var t = this.m_bodyA,
                                    n = this.m_bodyB,
                                    a = t.m_linearVelocity,
                                    s = t.m_angularVelocity,
                                    r = n.m_linearVelocity,
                                    A = n.m_angularVelocity,
                                    l = t.m_invMass,
                                    o = n.m_invMass,
                                    i = t.m_invI,
                                    u = n.m_invI;
                                if (this.m_enableMotor && 3 != this.m_limitState) {
                                    var g = this.m_motorMass * -(A - s - this.m_motorSpeed),
                                        m = this.m_motorImpulse;
                                    (e = e.dt * this.m_maxMotorTorque), (this.m_motorImpulse = kd.clamp(this.m_motorImpulse + g, -e, e)), (s -= i * (g = this.m_motorImpulse - m)), (A += u * g);
                                }
                                if (this.m_enableLimit && 0 != this.m_limitState) {
                                    var d = t.m_xf.R;
                                    (g = this.m_localAnchor1.x - t.m_sweep.localCenter.x), (m = this.m_localAnchor1.y - t.m_sweep.localCenter.y);
                                    var c = d.col1.x * g + d.col2.x * m;
                                    (m = d.col1.y * g + d.col2.y * m), (g = c), (d = n.m_xf.R), (e = this.m_localAnchor2.x - n.m_sweep.localCenter.x);
                                    var p = this.m_localAnchor2.y - n.m_sweep.localCenter.y;
                                    (c = d.col1.x * e + d.col2.x * p), (p = d.col1.y * e + d.col2.y * p), (e = c), (c = r.x + -A * p - a.x - -s * m);
                                    var h = r.y + A * e - a.y - s * g;
                                    this.m_mass.solve33(this.impulse3, -c, -h, -(A - s)),
                                        3 == this.m_limitState
                                            ? this.m_impulse.add(this.impulse3)
                                            : 1 == this.m_limitState
                                            ? 0 > (d = this.m_impulse.z + this.impulse3.z) &&
                                              (this.m_mass.solve22(this.reduced, -c, -h),
                                              (this.impulse3.x = this.reduced.x),
                                              (this.impulse3.y = this.reduced.y),
                                              (this.impulse3.z = -this.m_impulse.z),
                                              (this.m_impulse.x += this.reduced.x),
                                              (this.m_impulse.y += this.reduced.y),
                                              (this.m_impulse.z = 0))
                                            : 2 == this.m_limitState &&
                                              0 < (d = this.m_impulse.z + this.impulse3.z) &&
                                              (this.m_mass.solve22(this.reduced, -c, -h),
                                              (this.impulse3.x = this.reduced.x),
                                              (this.impulse3.y = this.reduced.y),
                                              (this.impulse3.z = -this.m_impulse.z),
                                              (this.m_impulse.x += this.reduced.x),
                                              (this.m_impulse.y += this.reduced.y),
                                              (this.m_impulse.z = 0)),
                                        (a.x -= l * this.impulse3.x),
                                        (a.y -= l * this.impulse3.y),
                                        (s -= i * (g * this.impulse3.y - m * this.impulse3.x + this.impulse3.z)),
                                        (r.x += o * this.impulse3.x),
                                        (r.y += o * this.impulse3.y),
                                        (A += u * (e * this.impulse3.y - p * this.impulse3.x + this.impulse3.z));
                                } else
                                    (d = t.m_xf.R),
                                        (g = this.m_localAnchor1.x - t.m_sweep.localCenter.x),
                                        (m = this.m_localAnchor1.y - t.m_sweep.localCenter.y),
                                        (c = d.col1.x * g + d.col2.x * m),
                                        (m = d.col1.y * g + d.col2.y * m),
                                        (g = c),
                                        (d = n.m_xf.R),
                                        (e = this.m_localAnchor2.x - n.m_sweep.localCenter.x),
                                        (p = this.m_localAnchor2.y - n.m_sweep.localCenter.y),
                                        (c = d.col1.x * e + d.col2.x * p),
                                        (p = d.col1.y * e + d.col2.y * p),
                                        (e = c),
                                        this.m_mass.solve22(this.impulse2, -(r.x + -A * p - a.x - -s * m), -(r.y + A * e - a.y - s * g)),
                                        (this.m_impulse.x += this.impulse2.x),
                                        (this.m_impulse.y += this.impulse2.y),
                                        (a.x -= l * this.impulse2.x),
                                        (a.y -= l * this.impulse2.y),
                                        (s -= i * (g * this.impulse2.y - m * this.impulse2.x)),
                                        (r.x += o * this.impulse2.x),
                                        (r.y += o * this.impulse2.y),
                                        (A += u * (e * this.impulse2.y - p * this.impulse2.x));
                                ((l = t.m_linearVelocity).x = a.x), (l.y = a.y), (t.m_angularVelocity = s), ((t = n.m_linearVelocity).x = r.x), (t.y = r.y), (n.m_angularVelocity = A);
                            },
                            solvePositionConstraints: function (e) {
                                e = this.m_bodyA;
                                var t = this.m_bodyB,
                                    n = 0;
                                if (this.m_enableLimit && 0 != this.m_limitState) {
                                    var a = t.m_sweep.a - e.m_sweep.a - this.m_referenceAngle,
                                        s = 0;
                                    3 == this.m_limitState
                                        ? ((a = kd.clamp(a - this.m_lowerAngle, -Me.b2_maxAngularCorrection, Me.b2_maxAngularCorrection)), (s = -this.m_motorMass * a), (n = kd.abs(a)))
                                        : 1 == this.m_limitState
                                        ? ((n = -(a -= this.m_lowerAngle)), (a = kd.clamp(a + Me.b2_angularSlop, -Me.b2_maxAngularCorrection, 0)), (s = -this.m_motorMass * a))
                                        : 2 == this.m_limitState && ((n = a -= this.m_upperAngle), (a = kd.clamp(a - Me.b2_angularSlop, 0, Me.b2_maxAngularCorrection)), (s = -this.m_motorMass * a)),
                                        (e.m_sweep.a -= e.m_invI * s),
                                        (t.m_sweep.a += t.m_invI * s),
                                        e.synchronizeTransform(),
                                        t.synchronizeTransform();
                                }
                                var r = e.m_xf.R;
                                (s = this.m_localAnchor1.x - e.m_sweep.localCenter.x), (a = this.m_localAnchor1.y - e.m_sweep.localCenter.y);
                                var A = r.col1.x * s + r.col2.x * a;
                                (a = r.col1.y * s + r.col2.y * a), (s = A), (r = t.m_xf.R);
                                var l = this.m_localAnchor2.x - t.m_sweep.localCenter.x,
                                    o = this.m_localAnchor2.y - t.m_sweep.localCenter.y;
                                (A = r.col1.x * l + r.col2.x * o), (o = r.col1.y * l + r.col2.y * o), (l = A);
                                var i = t.m_sweep.c.x + l - e.m_sweep.c.x - s,
                                    u = t.m_sweep.c.y + o - e.m_sweep.c.y - a,
                                    g = i * i + u * u;
                                (r = Math.sqrt(g)), (A = e.m_invMass);
                                var m = t.m_invMass,
                                    d = e.m_invI,
                                    c = t.m_invI,
                                    p = 10 * Me.b2_linearSlop;
                                return (
                                    g > p * p &&
                                        ((i = (g = 1 / (A + m)) * -i),
                                        (u = g * -u),
                                        (e.m_sweep.c.x -= 0.5 * A * i),
                                        (e.m_sweep.c.y -= 0.5 * A * u),
                                        (t.m_sweep.c.x += 0.5 * m * i),
                                        (t.m_sweep.c.y += 0.5 * m * u),
                                        (i = t.m_sweep.c.x + l - e.m_sweep.c.x - s),
                                        (u = t.m_sweep.c.y + o - e.m_sweep.c.y - a)),
                                    (this.K1.col1.x = A + m),
                                    (this.K1.col2.x = 0),
                                    (this.K1.col1.y = 0),
                                    (this.K1.col2.y = A + m),
                                    (this.K2.col1.x = d * a * a),
                                    (this.K2.col2.x = -d * s * a),
                                    (this.K2.col1.y = -d * s * a),
                                    (this.K2.col2.y = d * s * s),
                                    (this.K3.col1.x = c * o * o),
                                    (this.K3.col2.x = -c * l * o),
                                    (this.K3.col1.y = -c * l * o),
                                    (this.K3.col2.y = c * l * l),
                                    this.K.setM(this.K1),
                                    this.K.addM(this.K2),
                                    this.K.addM(this.K3),
                                    this.K.solve(QP.tImpulse, -i, -u),
                                    (i = QP.tImpulse.x),
                                    (u = QP.tImpulse.y),
                                    (e.m_sweep.c.x -= e.m_invMass * i),
                                    (e.m_sweep.c.y -= e.m_invMass * u),
                                    (e.m_sweep.a -= e.m_invI * (s * u - a * i)),
                                    (t.m_sweep.c.x += t.m_invMass * i),
                                    (t.m_sweep.c.y += t.m_invMass * u),
                                    (t.m_sweep.a += t.m_invI * (l * u - o * i)),
                                    e.synchronizeTransform(),
                                    t.synchronizeTransform(),
                                    r <= Me.b2_linearSlop && n <= Me.b2_angularSlop
                                );
                            },
                            m_localAnchor1: null,
                            m_localAnchor2: null,
                            m_impulse: null,
                            m_motorImpulse: null,
                            m_mass: null,
                            m_motorMass: null,
                            m_enableMotor: null,
                            m_maxMotorTorque: null,
                            m_motorSpeed: null,
                            m_enableLimit: null,
                            m_referenceAngle: null,
                            m_lowerAngle: null,
                            m_upperAngle: null,
                            m_limitState: null,
                            __class__: QP,
                        }));
                    var MV = function () {
                        Sw.call(this), (this.localAnchorA = new td()), (this.localAnchorB = new td()), (this.type = 1);
                        var e = this.localAnchorA,
                            t = 0,
                            n = 0;
                        null == n && (n = 0),
                            null == t && (t = 0),
                            (e.x = t),
                            (e.y = n),
                            null == (n = t = 0) && (n = 0),
                            null == t && (t = 0),
                            ((e = this.localAnchorB).x = t),
                            (e.y = n),
                            (this.motorSpeed = this.maxMotorTorque = this.upperAngle = this.lowerAngle = this.referenceAngle = 0),
                            (this.enableMotor = this.enableLimit = !1);
                    };
                    (v["box2D.dynamics.joints.B2RevoluteJointDef"] = MV),
                        (MV.__name__ = "box2D.dynamics.joints.B2RevoluteJointDef"),
                        (MV.__super__ = Sw),
                        (MV.prototype = K(Sw.prototype, {
                            initialize: function (e, t, n) {
                                (this.bodyA = e), (this.bodyB = t), (this.localAnchorA = this.bodyA.getLocalPoint(n)), (this.localAnchorB = this.bodyB.getLocalPoint(n)), (this.referenceAngle = this.bodyB.getAngle() - this.bodyA.getAngle());
                            },
                            localAnchorA: null,
                            localAnchorB: null,
                            referenceAngle: null,
                            enableLimit: null,
                            lowerAngle: null,
                            upperAngle: null,
                            enableMotor: null,
                            motorSpeed: null,
                            maxMotorTorque: null,
                            __class__: MV,
                        }));
                    var N4 = function (e) {
                        Or.call(this, e), (this.m_localAnchorA = new td()), (this.m_localAnchorB = new td()), (this.m_impulse = new qz()), (this.m_mass = new JV());
                        var t = this.m_localAnchorA,
                            n = e.localAnchorA;
                        (t.x = n.x), (t.y = n.y), (t = this.m_localAnchorB), (n = e.localAnchorB), (t.x = n.x), (t.y = n.y), (this.m_referenceAngle = e.referenceAngle), this.m_impulse.setZero(), (this.m_mass = new JV());
                    };
                    (v["box2D.dynamics.joints.B2WeldJoint"] = N4),
                        (N4.__name__ = "box2D.dynamics.joints.B2WeldJoint"),
                        (N4.__super__ = Or),
                        (N4.prototype = K(Or.prototype, {
                            getAnchorA: function () {
                                return this.m_bodyA.getWorldPoint(this.m_localAnchorA);
                            },
                            getAnchorB: function () {
                                return this.m_bodyB.getWorldPoint(this.m_localAnchorB);
                            },
                            getReactionForce: function (e) {
                                return new td(e * this.m_impulse.x, e * this.m_impulse.y);
                            },
                            getReactionTorque: function (e) {
                                return e * this.m_impulse.z;
                            },
                            initVelocityConstraints: function (e) {
                                var t = this.m_bodyA,
                                    n = this.m_bodyB,
                                    a = t.m_xf.R,
                                    s = this.m_localAnchorA.x - t.m_sweep.localCenter.x,
                                    r = this.m_localAnchorA.y - t.m_sweep.localCenter.y,
                                    A = a.col1.x * s + a.col2.x * r;
                                (r = a.col1.y * s + a.col2.y * r), (s = A), (a = n.m_xf.R);
                                var l = this.m_localAnchorB.x - n.m_sweep.localCenter.x,
                                    o = this.m_localAnchorB.y - n.m_sweep.localCenter.y;
                                (A = a.col1.x * l + a.col2.x * o), (o = a.col1.y * l + a.col2.y * o), (l = A), (a = t.m_invMass), (A = n.m_invMass);
                                var i = t.m_invI,
                                    u = n.m_invI;
                                (this.m_mass.col1.x = a + A + r * r * i + o * o * u),
                                    (this.m_mass.col2.x = -r * s * i - o * l * u),
                                    (this.m_mass.col3.x = -r * i - o * u),
                                    (this.m_mass.col1.y = this.m_mass.col2.x),
                                    (this.m_mass.col2.y = a + A + s * s * i + l * l * u),
                                    (this.m_mass.col3.y = s * i + l * u),
                                    (this.m_mass.col1.z = this.m_mass.col3.x),
                                    (this.m_mass.col2.z = this.m_mass.col3.y),
                                    (this.m_mass.col3.z = i + u),
                                    e.warmStarting
                                        ? ((this.m_impulse.x *= e.dtRatio),
                                          (this.m_impulse.y *= e.dtRatio),
                                          (this.m_impulse.z *= e.dtRatio),
                                          (t.m_linearVelocity.x -= a * this.m_impulse.x),
                                          (t.m_linearVelocity.y -= a * this.m_impulse.y),
                                          (t.m_angularVelocity -= i * (s * this.m_impulse.y - r * this.m_impulse.x + this.m_impulse.z)),
                                          (n.m_linearVelocity.x += A * this.m_impulse.x),
                                          (n.m_linearVelocity.y += A * this.m_impulse.y),
                                          (n.m_angularVelocity += u * (l * this.m_impulse.y - o * this.m_impulse.x + this.m_impulse.z)))
                                        : this.m_impulse.setZero();
                            },
                            solveVelocityConstraints: function (e) {
                                e = this.m_bodyA;
                                var t = this.m_bodyB,
                                    n = e.m_linearVelocity,
                                    a = e.m_angularVelocity,
                                    s = t.m_linearVelocity,
                                    r = t.m_angularVelocity,
                                    A = e.m_invMass,
                                    l = t.m_invMass,
                                    o = e.m_invI,
                                    i = t.m_invI,
                                    u = e.m_xf.R,
                                    g = this.m_localAnchorA.x - e.m_sweep.localCenter.x,
                                    m = this.m_localAnchorA.y - e.m_sweep.localCenter.y,
                                    d = u.col1.x * g + u.col2.x * m;
                                (m = u.col1.y * g + u.col2.y * m), (g = d), (u = t.m_xf.R);
                                var c = this.m_localAnchorB.x - t.m_sweep.localCenter.x,
                                    p = this.m_localAnchorB.y - t.m_sweep.localCenter.y;
                                (d = u.col1.x * c + u.col2.x * p), (p = u.col1.y * c + u.col2.y * p), (c = d), (u = s.x - r * p - n.x + a * m), (d = s.y + r * c - n.y - a * g);
                                var h = r - a,
                                    f = new qz();
                                this.m_mass.solve33(f, -u, -d, -h),
                                    this.m_impulse.add(f),
                                    (n.x -= A * f.x),
                                    (n.y -= A * f.y),
                                    (a -= o * (g * f.y - m * f.x + f.z)),
                                    (s.x += l * f.x),
                                    (s.y += l * f.y),
                                    (r += i * (c * f.y - p * f.x + f.z)),
                                    (e.m_angularVelocity = a),
                                    (t.m_angularVelocity = r);
                            },
                            solvePositionConstraints: function (e) {
                                e = this.m_bodyA;
                                var t = this.m_bodyB,
                                    n = e.m_xf.R,
                                    a = this.m_localAnchorA.x - e.m_sweep.localCenter.x,
                                    s = this.m_localAnchorA.y - e.m_sweep.localCenter.y,
                                    r = n.col1.x * a + n.col2.x * s;
                                (s = n.col1.y * a + n.col2.y * s), (a = r), (n = t.m_xf.R);
                                var A = this.m_localAnchorB.x - t.m_sweep.localCenter.x,
                                    l = this.m_localAnchorB.y - t.m_sweep.localCenter.y;
                                (r = n.col1.x * A + n.col2.x * l), (l = n.col1.y * A + n.col2.y * l), (A = r), (n = e.m_invMass), (r = t.m_invMass);
                                var o = e.m_invI,
                                    i = t.m_invI,
                                    u = t.m_sweep.c.x + A - e.m_sweep.c.x - a,
                                    g = t.m_sweep.c.y + l - e.m_sweep.c.y - s,
                                    m = t.m_sweep.a - e.m_sweep.a - this.m_referenceAngle,
                                    d = 10 * Me.b2_linearSlop,
                                    c = Math.sqrt(u * u + g * g),
                                    p = kd.abs(m);
                                return (
                                    c > d && ((o *= 1), (i *= 1)),
                                    (this.m_mass.col1.x = n + r + s * s * o + l * l * i),
                                    (this.m_mass.col2.x = -s * a * o - l * A * i),
                                    (this.m_mass.col3.x = -s * o - l * i),
                                    (this.m_mass.col1.y = this.m_mass.col2.x),
                                    (this.m_mass.col2.y = n + r + a * a * o + A * A * i),
                                    (this.m_mass.col3.y = a * o + A * i),
                                    (this.m_mass.col1.z = this.m_mass.col3.x),
                                    (this.m_mass.col2.z = this.m_mass.col3.y),
                                    (this.m_mass.col3.z = o + i),
                                    (d = new qz()),
                                    this.m_mass.solve33(d, -u, -g, -m),
                                    (e.m_sweep.c.x -= n * d.x),
                                    (e.m_sweep.c.y -= n * d.y),
                                    (e.m_sweep.a -= o * (a * d.y - s * d.x + d.z)),
                                    (t.m_sweep.c.x += r * d.x),
                                    (t.m_sweep.c.y += r * d.y),
                                    (t.m_sweep.a += i * (A * d.y - l * d.x + d.z)),
                                    e.synchronizeTransform(),
                                    t.synchronizeTransform(),
                                    c <= Me.b2_linearSlop && p <= Me.b2_angularSlop
                                );
                            },
                            m_localAnchorA: null,
                            m_localAnchorB: null,
                            m_referenceAngle: null,
                            m_impulse: null,
                            m_mass: null,
                            __class__: N4,
                        }));
                    var O4 = function () {
                        Sw.call(this), (this.localAnchorA = new td()), (this.localAnchorB = new td()), (this.type = 8), (this.referenceAngle = 0);
                    };
                    (v["box2D.dynamics.joints.B2WeldJointDef"] = O4),
                        (O4.__name__ = "box2D.dynamics.joints.B2WeldJointDef"),
                        (O4.__super__ = Sw),
                        (O4.prototype = K(Sw.prototype, {
                            initialize: function (e, t, n) {
                                (this.bodyA = e),
                                    (this.bodyB = t),
                                    (e = this.localAnchorA),
                                    (t = this.bodyA.getLocalPoint(n)),
                                    (e.x = t.x),
                                    (e.y = t.y),
                                    (e = this.localAnchorB),
                                    (n = this.bodyB.getLocalPoint(n)),
                                    (e.x = n.x),
                                    (e.y = n.y),
                                    (this.referenceAngle = this.bodyB.getAngle() - this.bodyA.getAngle());
                            },
                            localAnchorA: null,
                            localAnchorB: null,
                            referenceAngle: null,
                            __class__: O4,
                        }));
                    var Q8 = function () {
                        (this.stringMapCloner = new u5(this, p)), (this.intMapCloner = new u5(this, wi));
                        var t = (this.classHandles = new p()),
                            n = N(this, this.returnString);
                        null != e.String ? t.setReserved("String", n) : (t.h.String = n),
                            (t = this.classHandles),
                            (n = N(this, this.cloneArray)),
                            null != e.Array ? t.setReserved("Array", n) : (t.h.Array = n),
                            (t = N((ob = this.stringMapCloner), ob.clone)),
                            (n = this.classHandles),
                            null != e["haxe.ds.StringMap"] ? n.setReserved("haxe.ds.StringMap", t) : (n.h["haxe.ds.StringMap"] = t),
                            (t = N((ob = this.intMapCloner), ob.clone)),
                            (n = this.classHandles),
                            null != e["haxe.ds.IntMap"] ? n.setReserved("haxe.ds.IntMap", t) : (n.h["haxe.ds.IntMap"] = t);
                    };
                    (v["cloner.Cloner"] = Q8),
                        (Q8.__name__ = "cloner.Cloner"),
                        (Q8.prototype = {
                            cache: null,
                            classHandles: null,
                            stringMapCloner: null,
                            intMapCloner: null,
                            returnString: function (e) {
                                return e;
                            },
                            clone: function (e) {
                                return (this.cache = new Ug()), (e = this._clone(e)), (this.cache = null), e;
                            },
                            _clone: function (e) {
                                if ("string" == typeof e) return e;
                                try {
                                    if (null != e.__name__) return e;
                                } catch (e) {
                                    yf.lastException = e;
                                }
                                var t = uf.typeof(e);
                                switch (t._hx_index) {
                                    case 0:
                                        return null;
                                    case 1:
                                    case 2:
                                    case 3:
                                        return e;
                                    case 4:
                                        return this.handleAnonymous(e);
                                    case 5:
                                        return null;
                                    case 6:
                                        return (t = t.c), null == this.cache.h.__keys__[e.__id__] && this.cache.set(e, this.handleClass(t, e)), this.cache.h[e.__id__];
                                    case 7:
                                        return e;
                                    case 8:
                                        return null;
                                }
                            },
                            handleAnonymous: function (e) {
                                for (var t = Fe.fields(e), n = {}, a = 0, s = t.length; a < s; ) {
                                    var r = a++;
                                    n[(r = t[r])] = this._clone(Fe.getProperty(e, r));
                                }
                                return n;
                            },
                            handleClass: function (t, n) {
                                t = t.__name__;
                                var a = this.classHandles;
                                return null == (t = null != e[t] ? a.getReserved(t) : a.h[t]) && (t = N(this, this.cloneClass)), t(n);
                            },
                            cloneArray: function (e) {
                                for (var t = 0, n = (e = e.slice()).length; t < n; ) {
                                    var a = t++;
                                    e[a] = this._clone(e[a]);
                                }
                                return e;
                            },
                            cloneClass: function (e) {
                                for (var t = Object.create(d.getClass(e).prototype), n = Fe.fields(e), a = 0, s = n.length; a < s; ) {
                                    var r = a++;
                                    r = n[r];
                                    var A = Fe.getProperty(e, r);
                                    t[r] = this._clone(A);
                                }
                                return t;
                            },
                            __class__: Q8,
                        });
                    var u5 = function (e, t) {
                        (this.cloner = e), (this.type = t), (this.noArgs = []);
                    };
                    (v["cloner.MapCloner"] = u5),
                        (u5.__name__ = "cloner.MapCloner"),
                        (u5.prototype = {
                            cloner: null,
                            type: null,
                            noArgs: null,
                            clone: function (e) {
                                for (var t = uf.createInstance(this.type, this.noArgs), n = e.keys(); n.hasNext(); ) {
                                    var a = n.next();
                                    t.set(a, this.cloner._clone(e.get(a)));
                                }
                                return t;
                            },
                            __class__: u5,
                        });
                    var zU = function (e) {
                        null == e && (e = !0),
                            Yb.call(this),
                            (this.alignRight = e),
                            (this.start = !0),
                            (this.fps = this.mem_max = 0),
                            (this.text = new BA()),
                            this.text.set_defaultTextFormat(new RP("_sans", 10, 16777215)),
                            this.text.set_wordWrap(!0),
                            this.text.set_multiline(!0),
                            this.text.set_width(70),
                            this.text.set_height(50),
                            this.text.set_selectable(!1),
                            (this.text.mouseEnabled = !1),
                            (this.rectangle = new xe(69, 0, 1, 50)),
                            this.addEventListener("addedToStage", N(this, this.init), !1, 0, !0),
                            this.addEventListener("removedFromStage", N(this, this.destroy), !1, 0, !0);
                    };
                    (v["com.nmefermmmtools.debug.Stats"] = zU),
                        (zU.__name__ = "com.nmefermmmtools.debug.Stats"),
                        (zU.__super__ = Yb),
                        (zU.prototype = K(Yb.prototype, {
                            text: null,
                            timer: null,
                            fps: null,
                            ms: null,
                            ms_prev: null,
                            mem: null,
                            mem_max: null,
                            graph: null,
                            rectangle: null,
                            alignRight: null,
                            start: null,
                            fps_graph: null,
                            mem_graph: null,
                            ms_graph: null,
                            mem_max_graph: null,
                            _stage: null,
                            fpsStr: null,
                            memStr: null,
                            memMaxStr: null,
                            msStr: null,
                            init: function (e) {
                                (this._stage = Hh.get_current().stage),
                                    this.get_graphics().beginFill(51),
                                    this.get_graphics().drawRect(0, 0, 70, 50),
                                    this.get_graphics().endFill(),
                                    this.addChild(this.text),
                                    (this.graph = new y(70, 50, !1, 51)),
                                    this.addEventListener("enterFrame", N(this, this.update));
                            },
                            destroy: function (e) {
                                for (this.get_graphics().clear(); 0 < this.get_numChildren(); ) this.removeChildAt(0);
                                this.graph.dispose(), this.removeEventListener("enterFrame", N(this, this.update));
                            },
                            update: function (e) {
                                this.start && this.alignRight && (this.set_x(this._stage.stageWidth - this.get_width()), (this.start = !1)),
                                    (this.timer = Hh.getTimer()),
                                    this.timer - 1e3 > this.ms_prev
                                        ? ((this.mem = 954e-9 * SP.get_totalMemory()),
                                          (this.mem_max = this.mem_max > this.mem ? this.mem_max : this.mem),
                                          (this.fps_graph = 50 - (0 | Math.min(50, (this.fps / this._stage.get_frameRate()) * 50))),
                                          (this.mem_graph = 50 - this.normalizeMem(this.mem)),
                                          (this.mem_max_graph = 50 - this.normalizeMem(this.mem_max)),
                                          (this.ms_graph = (50 - ((this.timer - this.ms) >> 1)) | 0),
                                          this.graph.scroll(-1, 0),
                                          this.get_graphics().clear(),
                                          this.get_graphics().beginFill(51),
                                          this.get_graphics().drawRect(0, 0, 70, 50),
                                          this.get_graphics().endFill(),
                                          this.get_graphics().beginBitmapFill(this.graph, new uh(1, 0, 0, 1, 0, 50)),
                                          this.get_graphics().drawRect(0, 50, 70, 50),
                                          this.get_graphics().endFill(),
                                          this.graph.fillRect(this.rectangle, 51),
                                          this.graph.lock(),
                                          this.graph.setPixel(69, this.fps_graph, 16776960),
                                          this.graph.setPixel(69, this.mem_graph, 65535),
                                          this.graph.setPixel(69, this.mem_max_graph, 16711792),
                                          this.graph.setPixel(69, this.ms_graph, 65280),
                                          this.graph.unlock(),
                                          60 < this.fps && (this.fps = 60),
                                          (this.fpsStr = "FPS: " + this.fps + " / 60"),
                                          (this.memStr = "MEM: " + Math.round(this.mem)),
                                          (this.memMaxStr = "MAX: " + Math.round(this.mem_max)),
                                          (this.fps = 0),
                                          (this.ms_prev = this.timer),
                                          this.text.set_htmlText("<font color='#ffff00'>" + this.fpsStr + "</font><br><font color='#00ffff'>" + this.memStr + "</font><br><font color='#ff0070'>" + this.memMaxStr + "</font>"))
                                        : (this.fps++, (this.ms = this.timer));
                            },
                            normalizeMem: function (e) {
                                return (Math.min(50, Math.sqrt(Math.sqrt(5e3 * e))) - 2) | 0;
                            },
                            __class__: zU,
                        }));
                    var qQ = function () {};
                    (v["com.nmefermmmtools.debug.Colors"] = qQ), (qQ.__name__ = "com.nmefermmmtools.debug.Colors");
                    var cV = function () {};
                    (v["com.stencyl.APIKeys"] = cV), (cV.__name__ = "com.stencyl.APIKeys");
                    var x = function () {};
                    (v["com.stencyl.Config"] = x),
                        (x.__name__ = "com.stencyl.Config"),
                        (x.load = function () {
                            var e = Gb.getConfigText("config/game-config.json");
                            x.loadFromString(e);
                        }),
                        (x.loadMap = function (t, n) {
                            for (var a = 0, s = Fe.fields(t); a < s.length; ) {
                                var r = s[a];
                                if ((++a, Nc.startsWith(r, "config-"))) {
                                    var A = Qc.substr(r, 7, null),
                                        l = x.defines;
                                    (null != e[A] ? l.existsReserved(A) : l.h.hasOwnProperty(A)) && x.loadMap(Fe.field(t, r), n);
                                } else n[r] = Fe.field(t, r);
                            }
                            return n;
                        }),
                        (x.loadFromString = function (e, t) {
                            if ((null == t && (t = !0), null != x.data && t)) {
                                (t = x.data), (x.data = x.loadMap(JSON.parse(e), {})), x.setStaticFields();
                                for (var n = (e = !1), s = 0, r = Fe.fields(t); s < r.length; ) {
                                    var A = r[s];
                                    if ((++s, Fe.field(t, A) != Fe.field(x.data, A)))
                                        switch (A) {
                                            case "debugDraw":
                                                (a.DEBUG_DRAW = x.debugDraw) || (null != a.debugDrawer && null != a.debugDrawer.m_sprite && a.debugDrawer.m_sprite.get_graphics().clear());
                                                break;
                                            case "disposeImages":
                                            case "physicsMode":
                                                n = !0;
                                                break;
                                            case "antialias":
                                            case "forceHiResAssets":
                                            case "gameScale":
                                            case "scaleMode":
                                            case "scales":
                                            case "stageHeight":
                                            case "stageWidth":
                                                e = !0;
                                                break;
                                            case "keys":
                                                Hd.loadInputConfig();
                                                break;
                                            case "releaseMode":
                                            case "useGciLogging":
                                                ke.setupTracing(!x.releaseMode);
                                                break;
                                            case "showConsole":
                                                a.engine.setStatsVisible(x.showConsole);
                                        }
                                }
                                n ? ke.reloadGame() : e && a.engine.reloadScreen();
                            } else (x.data = x.loadMap(JSON.parse(e), {})), x.setStaticFields();
                        }),
                        (x.setStaticFields = function () {
                            (x.landscape = x.data.landscape),
                                (x.autorotate = x.data.autorotate),
                                (x.scaleMode = rQ.fromString(x.data.scaleMode)),
                                (x.stageWidth = x.data.stageWidth),
                                (x.stageHeight = x.data.stageHeight),
                                (x.initSceneID = x.data.initSceneID),
                                (x.physicsMode = AU.fromString(x.data.physicsMode)),
                                (x.gameScale = x.data.gameScale),
                                (x.forceHiResAssets = x.data.forceHiResAssets),
                                (x.antialias = x.data.antialias),
                                (x.pixelsnap = x.data.pixelsnap),
                                (x.startInFullScreen = x.data.startInFullScreen),
                                (x.disposeImages = x.data.disposeImages),
                                (x.adPositionBottom = x.data.adPositionBottom),
                                (x.testAds = x.data.testAds),
                                (x.releaseMode = x.data.releaseMode),
                                (x.showConsole = x.data.showConsole),
                                (x.debugDraw = x.data.debugDraw),
                                (x.disableBackButton = x.data.disableBackButton),
                                (x.useGciLogging = x.data.useGciLogging),
                                (x.keys = x.asMap(x.data.keys));
                            for (var e = x.data.scales, t = AA.fromString, n = Array(e.length), a = 0, s = e.length; a < s; ) {
                                var r = a++;
                                n[r] = t(e[r]);
                            }
                            (x.scales = Eg.array(n)), (x.toolsetInterfaceHost = x.data.toolsetInterfaceHost), (x.toolsetInterfacePort = x.data.toolsetInterfacePort), (x.buildConfig = x.data.buildConfig);
                        }),
                        (x.asMap = function (t) {
                            for (var n = new p(), a = 0, s = Fe.fields(t); a < s.length; ) {
                                var r = s[a];
                                ++a;
                                var A = Fe.field(t, r);
                                null != e[r] ? n.setReserved(r, A) : (n.h[r] = A);
                            }
                            return n;
                        });
                    var hu = function () {
                        if (((this.actorTypesLoaded = !1), (this.resourceLookup = this.resourceNameLookup = this.behaviorLookup = this.behaviorReader = this.resourceReaderPool = null), null == Jh.getBytes("assets/data/game.mbs")))
                            throw new Gc("Data.hx - Could not load game. Check your logs for a possible cause.");
                    };
                    (v["com.stencyl.Data"] = hu),
                        (hu.__name__ = "com.stencyl.Data"),
                        (hu.get = function () {
                            return null == hu.instance && ((hu.instance = new hu()), hu.instance.loadAll()), hu.instance;
                        }),
                        (hu.resetStatics = function () {
                            hu.instance = null;
                        }),
                        (hu.prototype = {
                            readers: null,
                            gameMbs: null,
                            resourceListMbs: null,
                            sceneListMbs: null,
                            behaviorListMbs: null,
                            resources: null,
                            resourceMap: null,
                            behaviors: null,
                            resourceLookup: null,
                            resourceNameLookup: null,
                            behaviorLookup: null,
                            behaviorReader: null,
                            resourceReaderPool: null,
                            loadAll: function () {
                                (this.gameMbs = new dV(kK.get(), !1, !0)),
                                    this.gameMbs.readData(cg.toBytes(Jh.getBytes("assets/data/game.mbs"))),
                                    (this.sceneListMbs = new dV(kK.get(), !1, !0)),
                                    this.sceneListMbs.readData(cg.toBytes(Jh.getBytes("assets/data/scenes.mbs"))),
                                    (this.resourceListMbs = new dV(kK.get(), !1, !1)),
                                    this.resourceListMbs.readData(cg.toBytes(Jh.getBytes("assets/data/resources.mbs"))),
                                    (this.behaviorListMbs = new dV(kK.get(), !1, !1)),
                                    this.behaviorListMbs.readData(cg.toBytes(Jh.getBytes("assets/data/behaviors.mbs"))),
                                    (this.behaviors = new v5(new wi(), N(this, this.loadBehaviorFromMbs))),
                                    (this.resources = new v5(new wi(), N(this, this.loadResourceFromMbs))),
                                    (this.resourceMap = new R8(new p(), N(this, this.loadResourceFromMbsByName))),
                                    this.loadReaders(),
                                    this.scanBehaviorMbs(),
                                    this.scanResourceMbs();
                            },
                            loadReaders: function () {
                                (this.readers = []), this.readers.push(new w5()), this.readers.push(new x5()), this.readers.push(new y5()), this.readers.push(new z5()), this.readers.push(new A5()), this.readers.push(new B5());
                            },
                            scanBehaviorMbs: function () {
                                this.behaviorLookup = new wi();
                                for (var e = this.behaviorListMbs.getRoot(), t = 0, n = e.length(); t < n; ) {
                                    t++;
                                    var a = e.elementAddress;
                                    this.behaviorReader = e.getNextObject();
                                    var s = this.behaviorLookup,
                                        r = this.behaviorReader.getId();
                                    s.h[r] = a;
                                }
                            },
                            scanResourceMbs: function () {
                                (this.resourceLookup = new wi()), (this.resourceNameLookup = new p());
                                var t = this.resourceListMbs.getRoot();
                                this.resourceReaderPool = AD.createObjectPool(this.resourceListMbs);
                                for (var n = new mk(this.resourceListMbs), a = Rc.INTEGER.getSize(), s = 0, r = t.length(); s < r; ) {
                                    s++;
                                    var A = t.elementAddress,
                                        l = this.resourceListMbs.readInt(A + a);
                                    (t.elementAddress += t.elementSize), n.setAddress(l), (l = this.resourceLookup);
                                    var o = n.getId();
                                    (l.h[o] = A),
                                        this.resourceListMbs.readTypecode(A) == dv.MBS_SPRITE ? ((o = this.resourceNameLookup), (A = "Sprite_" + n.getName())) : ((o = this.resourceNameLookup), (A = n.getName())),
                                        (l = n.getId()),
                                        null != e[A] ? o.setReserved(A, l) : (o.h[A] = l);
                                }
                            },
                            loadResourceFromMbsByName: function (t) {
                                var n = this.resourceNameLookup;
                                return null == (t = null != e[t] ? n.getReserved(t) : n.h[t]) ? null : this.loadResourceFromMbs(t);
                            },
                            loadResourceFromMbs: function (t) {
                                if (null == (t = this.resourceLookup.h[t])) return null;
                                if (((t = AD.readDynamicUsingPool(this.resourceListMbs, t, this.resourceReaderPool)), null != (t = this.readResource(t.getMbsType().getName(), t)))) {
                                    if (((this.resources.map.h[t.ID] = t), t instanceof yW))
                                        var n = "Sprite_" + t.name,
                                            a = this.resourceMap.map;
                                    else (n = t.name), (a = this.resourceMap.map);
                                    null != e[n] ? a.setReserved(n, t) : (a.h[n] = t);
                                }
                                return t;
                            },
                            loadAllResourcesOfType: function (e) {
                                var t = this.resourceListMbs.getRoot(),
                                    n = new mk(this.resourceListMbs),
                                    a = Rc.INTEGER.getSize();
                                t.elementAddress = t.getAddress() + 2 * a;
                                for (var s = 0, r = t.length(); s < r; ) {
                                    s++;
                                    var A = t.elementAddress;
                                    this.resourceListMbs.readTypecode(A) == e && ((A = this.resourceListMbs.readInt(A + a)), n.setAddress(A), this.loadResourceFromMbs(n.getId())), (t.elementAddress += t.elementSize);
                                }
                            },
                            loadBehaviorFromMbs: function (e) {
                                return null == (e = this.behaviorLookup.h[e]) ? null : (this.behaviorReader.setAddress(e), zW.readBehavior(this.behaviorReader));
                            },
                            readResource: function (e, t) {
                                for (var n = 0, a = this.readers; n < a.length; ) {
                                    var s = a[n];
                                    if ((++n, s.accepts(e))) return s.read(t);
                                }
                                return null;
                            },
                            actorTypesLoaded: null,
                            getAllActorTypes: function () {
                                this.actorTypesLoaded || (this.loadAllResourcesOfType(qi.MBS_ACTOR_TYPE), (this.actorTypesLoaded = !0));
                                for (var e = [], t = this.resources.map.iterator(); t.hasNext(); ) {
                                    var n = t.next();
                                    n instanceof TP && e.push(d.__cast(n, TP));
                                }
                                return e;
                            },
                            loadAtlas: function (e) {
                                var t = Fi.get().atlases.h[e];
                                if (null != t && !t.active)
                                    for (t.active = !0, e = 0, t = t.members; e < t.length; ) {
                                        var n = t[e];
                                        ++e, null != (n = this.resources.get(n)) && n.loadGraphics();
                                    }
                            },
                            unloadAtlas: function (e) {},
                            reloadScaledResources: function () {
                                for (var e = this.resources.map.iterator(); e.hasNext(); ) {
                                    var t = e.next();
                                    null != t && (t instanceof OV || t instanceof TP || (t.isAtlasActive() && t.reloadGraphics(-1)));
                                }
                            },
                            __class__: hu,
                        });
                    var my = function () {
                        (this.eventTable = new wi()), (this.eventTable.h[my.TYPE_ADS] = []), (this.eventTable.h[my.TYPE_PURCHASES] = []), (this.eventTable.h[my.TYPE_GAMECENTER] = []), (this.eventTable.h[my.TYPE_KEYBOARD] = []);
                    };
                    (v["com.stencyl.event.EventMaster"] = my),
                        (my.__name__ = "com.stencyl.event.EventMaster"),
                        (my.prototype = {
                            eventTable: null,
                            addAdEvent: function (e) {
                                this.eventTable.h[my.TYPE_ADS].push(e);
                            },
                            addPurchaseEvent: function (e) {
                                this.eventTable.h[my.TYPE_PURCHASES].push(e);
                            },
                            addGameCenterEvent: function (e) {
                                this.eventTable.h[my.TYPE_GAMECENTER].push(e);
                            },
                            addKeyboardEvent: function (e) {
                                this.eventTable.h[my.TYPE_KEYBOARD].push(e);
                            },
                            clear: function () {
                                (this.eventTable.h[my.TYPE_ADS].length = 0), (this.eventTable.h[my.TYPE_PURCHASES].length = 0), (this.eventTable.h[my.TYPE_GAMECENTER].length = 0), (this.eventTable.h[my.TYPE_KEYBOARD].length = 0);
                            },
                            __class__: my,
                        });
                    var a = function (e) {
                        (this.isHUDZoomable = this.sceneInitialized = this.keyPollOccurred = this.isFullScreen = this.ignoreResize = !1),
                            (this.zoomMultiplier = 1),
                            ("opengl" != a.stage.window.context.type && "opengles" != a.stage.window.context.type && "webgl" != a.stage.window.context.type) || Hy.initialize(),
                            sz.get_isSupported() && (this.shaderLayer = new Yb()),
                            (e.mouseChildren = !1),
                            (e.mouseEnabled = !1),
                            x.debugDraw && (a.DEBUG_DRAW = !0),
                            (a.engine = this),
                            (h.engine = this),
                            (this.root = e),
                            (this.isFullScreen = x.startInFullScreen),
                            (a.screenScaleX = a.unzoomedScaleX = e.get_scaleX()),
                            (a.screenScaleY = a.unzoomedScaleY = e.get_scaleY()),
                            (a.screenOffsetX = 0 | e.get_x()),
                            (a.screenOffsetY = 0 | e.get_y()),
                            (a.NO_PHYSICS = 1 == x.physicsMode),
                            a.stage.addEventListener("enterFrame", N(this, this.onUpdate)),
                            a.stage.addEventListener("deactivate", N(this, this.onFocusLost)),
                            a.stage.addEventListener("activate", N(this, this.onFocus)),
                            a.stage.addEventListener("resize", N(this, this.onWindowResize)),
                            a.stage.window.onRestore.add(N(this, this.onWindowRestore)),
                            a.stage.window.onMaximize.add(N(this, this.onWindowMaximize)),
                            a.stage.window.onFullscreen.add(N(this, this.onWindowFullScreen)),
                            this.begin(x.initSceneID);
                    };
                    (v["com.stencyl.Engine"] = a),
                        (a.__name__ = "com.stencyl.Engine"),
                        (a.resetStatics = function () {
                            a.stage.removeEventListener("enterFrame", N((ob = a.engine), ob.onUpdate)),
                                a.stage.removeEventListener("deactivate", N((ob = a.engine), ob.onFocusLost)),
                                a.stage.removeEventListener("activate", N((ob = a.engine), ob.onFocus)),
                                a.stage.removeEventListener("resize", N((ob = a.engine), ob.onWindowResize)),
                                a.stage.window.onRestore.remove(N((ob = a.engine), ob.onWindowRestore)),
                                a.stage.window.onMaximize.remove(N((ob = a.engine), ob.onWindowMaximize)),
                                a.stage.window.onFullscreen.remove(N((ob = a.engine), ob.onWindowFullScreen)),
                                null != a.engine.stats && a.stage.removeChild(a.engine.stats),
                                (a.NO_PHYSICS = !1),
                                (a.DEBUG_DRAW = !1),
                                (a.IMG_BASE = ""),
                                (a.SCALE = 1),
                                (a.checkedWideScreen = !1),
                                (a.isStandardIOS = !1),
                                (a.isExtendedIOS = !1),
                                (a.isIPhone6 = !1),
                                (a.isIPhone6Plus = !1),
                                (a.isTabletIOS = !1),
                                (a.engine = null),
                                (a.landscape = !1),
                                (a.cameraX = 0),
                                (a.cameraY = 0),
                                (a.screenScaleX = 0),
                                (a.screenScaleY = 0),
                                (a.unzoomedScaleX = 0),
                                (a.unzoomedScaleY = 0),
                                (a.screenOffsetX = 0),
                                (a.screenOffsetY = 0),
                                (a.screenWidth = 0),
                                (a.screenHeight = 0),
                                (a.sceneWidth = 0),
                                (a.sceneHeight = 0),
                                (a.screenWidthHalf = 0),
                                (a.screenHeightHalf = 0),
                                (a.paused = !1),
                                (a.started = !1),
                                (a.events = new my()),
                                (a.ITERATIONS = 3),
                                (a.physicsScale = 10),
                                (a.preservePadding = !1),
                                (a.paddingLeft = 0),
                                (a.paddingRight = 0),
                                (a.paddingTop = 0),
                                (a.paddingBottom = 0),
                                (a.ngID = ""),
                                (a.ngKey = ""),
                                (a.movieClip = null),
                                (a.stage = null),
                                (a.STEP_SIZE = 10),
                                (a.MS_PER_SEC = 1e3),
                                (a.elapsedTime = 0),
                                (a.timeScale = 1),
                                (a.totalElapsedTime = 0),
                                (a.debug = !1),
                                (a.debugDrawer = null);
                        }),
                        (a.initBehaviors = function (t, n, a, s, r) {
                            if (null != n) {
                                for (n = new jy(n, n.arrayKeys()); n.hasNext(); ) {
                                    var A = n.next();
                                    if (null != A && A.enabled) {
                                        var l = hu.get().behaviors.get(A.behaviorID),
                                            o = new p();
                                        if (null != l) {
                                            if (l.isEvent)
                                                for (var i = l.attributes.keys(); i.hasNext(); ) {
                                                    var u = i.next(),
                                                        g = l.attributes;
                                                    if (null != (g = null != e[u] ? g.getReserved(u) : g.h[u])) {
                                                        var m = g.type,
                                                            d = g.ID;
                                                        "list" == m
                                                            ? ((g = new AW(d, g.fieldName, g.fullName, [], m, null, g.hidden)), null != e[u] ? o.setReserved(u, g) : (o.h[u] = g))
                                                            : "map" == m && ((g = new AW(d, g.fieldName, g.fullName, new p(), m, null, g.hidden)), null != e[u] ? o.setReserved(u, g) : (o.h[u] = g));
                                                    }
                                                }
                                            for (i = A.values.keys(); i.hasNext(); )
                                                (u = i.next()),
                                                    (g = A.values),
                                                    (g = null != e[u] ? g.getReserved(u) : g.h[u]),
                                                    (m = l.attributes),
                                                    null != (m = null != e[u] ? m.getReserved(u) : m.h[u]) && ((g = new AW(m.ID, m.fieldName, m.fullName, g, m.type, null, m.hidden)), null != e[u] ? o.setReserved(u, g) : (o.h[u] = g));
                                            (A = new C5(a, s, l.ID, l.name, l.classname, !0, !1, o, l.type, l.isEvent)), t.add(A);
                                        }
                                    }
                                }
                                r && t.initScripts();
                            }
                        }),
                        (a.toPhysicalUnits = function (e) {
                            return e / a.physicsScale;
                        }),
                        (a.toPixelUnits = function (e) {
                            return e * a.physicsScale;
                        }),
                        (a.vToPhysicalUnits = function (e) {
                            return (e.x = a.toPhysicalUnits(e.x)), (e.y = a.toPhysicalUnits(e.y)), e;
                        }),
                        (a.vToPixelUnits = function (e) {
                            return (e.x = a.toPixelUnits(e.x)), (e.y = a.toPixelUnits(e.y)), e;
                        }),
                        (a.invokeListeners = function (e) {
                            for (var t = 0; t < e.length; ) {
                                try {
                                    var n = e[t];
                                    n(e), -1 == Gb.indexOf(e, n) && --t;
                                } catch (e) {
                                    if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                }
                                ++t;
                            }
                        }),
                        (a.invokeListeners2 = function (e, t) {
                            for (var n = 0; n < e.length; ) {
                                try {
                                    var a = e[n];
                                    a(t, e), -1 == Gb.indexOf(e, a) && --n;
                                } catch (e) {
                                    if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                }
                                ++n;
                            }
                        }),
                        (a.invokeListeners3 = function (e, t, n) {
                            for (var a = 0; a < e.length; ) {
                                try {
                                    var s = e[a];
                                    s(t, n, e), -1 == Gb.indexOf(e, s) && --a;
                                } catch (e) {
                                    if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                }
                                ++a;
                            }
                        }),
                        (a.invokeListeners4 = function (e, t, n, a) {
                            for (var s = 0; s < e.length; ) {
                                try {
                                    var r = e[s];
                                    r(t, n, a, e), -1 == Gb.indexOf(e, r) && --s;
                                } catch (e) {
                                    if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                }
                                ++s;
                            }
                        }),
                        (a.invokeListeners5 = function (e, t, n, a, s) {
                            for (var r = 0; r < e.length; ) {
                                try {
                                    var A = e[r];
                                    A(t, n, a, s, e), -1 == Gb.indexOf(e, A) && --r;
                                } catch (e) {
                                    if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                }
                                ++r;
                            }
                        }),
                        (a.invokeListeners6 = function (e, t, n, a, s, r) {
                            for (var A = 0; A < e.length; ) {
                                try {
                                    var l = e[A];
                                    l(t, n, a, s, r, e), -1 == Gb.indexOf(e, l) && --A;
                                } catch (e) {
                                    if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                }
                                ++A;
                            }
                        }),
                        (a.prototype = {
                            zoomMultiplier: null,
                            isHUDZoomable: null,
                            world: null,
                            gravityX: null,
                            gravityY: null,
                            physicalWidth: null,
                            physicalHeight: null,
                            leave: null,
                            enter: null,
                            sceneToEnter: null,
                            shakeTimer: null,
                            shakeIntensity: null,
                            isShaking: null,
                            scene: null,
                            camera: null,
                            sceneInitialized: null,
                            channels: null,
                            tasks: null,
                            regions: null,
                            terrainRegions: null,
                            joints: null,
                            root: null,
                            colorLayer: null,
                            maskLayer: null,
                            master: null,
                            hudLayer: null,
                            transitionLayer: null,
                            debugLayer: null,
                            g: null,
                            groups: null,
                            reverseGroups: null,
                            allActors: null,
                            nextID: null,
                            actorsOfType: null,
                            recycledActorsOfType: null,
                            actorsToCreateInNextScene: null,
                            layers: null,
                            layersByName: null,
                            interactiveLayers: null,
                            backgroundLayers: null,
                            dynamicTiles: null,
                            animatedTiles: null,
                            topLayer: null,
                            bottomLayer: null,
                            middleLayer: null,
                            layersToDraw: null,
                            tileUpdated: null,
                            loadedAtlases: null,
                            atlasesToLoad: null,
                            atlasesToUnload: null,
                            actorsToCreate: null,
                            gameAttributes: null,
                            behaviors: null,
                            lastTime: null,
                            acc: null,
                            mx: null,
                            my: null,
                            collisionPairs: null,
                            disableCollisionList: null,
                            keyPollOccurred: null,
                            whenKeyPressedListeners: null,
                            hasKeyPressedListeners: null,
                            whenAnyKeyPressedListeners: null,
                            whenAnyKeyReleasedListeners: null,
                            whenAnyGamepadPressedListeners: null,
                            whenAnyGamepadReleasedListeners: null,
                            whenTypeGroupCreatedListeners: null,
                            whenTypeGroupDiesListeners: null,
                            typeGroupPositionListeners: null,
                            collisionListeners: null,
                            soundListeners: null,
                            channelListeners: null,
                            whenUpdatedListeners: null,
                            whenDrawingListeners: null,
                            whenMousePressedListeners: null,
                            whenMouseReleasedListeners: null,
                            whenMouseMovedListeners: null,
                            whenMouseDraggedListeners: null,
                            whenPausedListeners: null,
                            fullscreenListeners: null,
                            screenSizeListeners: null,
                            gameScaleListeners: null,
                            whenSwipedListeners: null,
                            whenMTStartListeners: null,
                            whenMTDragListeners: null,
                            whenMTEndListeners: null,
                            whenFocusChangedListeners: null,
                            nativeListeners: null,
                            shader: null,
                            shaderLayer: null,
                            shaders: null,
                            isFullScreen: null,
                            ignoreResize: null,
                            stats: null,
                            onKeyDown: function (e) {
                                this.isFullScreen && 27 == e.keyCode && this.setFullScreen(!1);
                            },
                            onWindowResize: function (e) {
                                !this.isFullScreen || a.stage.window.__fullscreen || a.stage.window.__minimized || this.ignoreResize || this.setFullScreen(!1);
                            },
                            onWindowRestore: function () {
                                this.isFullScreen && !a.stage.window.__fullscreen && (a.stage.window.__fullscreen = !0);
                            },
                            onWindowMaximize: function () {
                                this.isFullScreen && !a.stage.window.__fullscreen && (a.stage.window.__fullscreen = !0);
                            },
                            onWindowFullScreen: function () {
                                this.isFullScreen || this.setFullScreen(!0);
                            },
                            isInFullScreen: function () {
                                return 1 == Hh.get_current().stage.get_displayState();
                            },
                            setFullScreen: function (e) {
                                if (this.isFullScreen != e) {
                                    (this.ignoreResize = !0), (this.isFullScreen = e), this.reloadScreen(), (e = this.fullscreenListeners);
                                    for (var t = 0; t < e.length; ) {
                                        try {
                                            var n = e[t];
                                            n(e), -1 == Gb.indexOf(e, n) && --t;
                                        } catch (e) {
                                            if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                        }
                                        ++t;
                                    }
                                    this.ignoreResize = !1;
                                }
                            },
                            toggleFullScreen: function () {
                                this.setFullScreen(!this.isFullScreen);
                            },
                            reloadScreen: function () {
                                var e = a.IMG_BASE,
                                    t = a.SCALE,
                                    n = a.screenWidth,
                                    s = a.screenHeight;
                                if (
                                    (this.root.initScreen(this.isFullScreen),
                                    (a.screenWidth = 0 | ke.logicalWidth),
                                    (a.screenWidthHalf = (a.screenWidth / 2) | 0),
                                    (a.screenHeight = 0 | ke.logicalHeight),
                                    (a.screenHeightHalf = (a.screenHeight / 2) | 0),
                                    this.setColorBackground(this.scene.colorBackground),
                                    (n = a.screenWidth != n || a.screenHeight != s),
                                    (s = t != a.SCALE),
                                    e != a.IMG_BASE && hu.get().reloadScaledResources(),
                                    t != a.SCALE)
                                ) {
                                    for (
                                        null != a.debugDrawer && a.debugDrawer.setDrawScale(10 * a.SCALE),
                                            this.g.scaleX = this.g.scaleY = a.SCALE,
                                            Gb.applyToAllChildren(this.root, function (e) {
                                                d.__implements(e, eV) && d.__cast(e, eV).updateScale();
                                            }),
                                            e = this.allActors.iterator();
                                        e.hasNext();

                                    )
                                        null == (t = e.next()) || t.dead || t.recycled || (t.updateMatrix = !0);
                                    for (e = this.recycledActorsOfType.iterator(); e.hasNext(); ) {
                                        t = e.next();
                                        for (var r = 0; r < t.length; ) {
                                            var A = t[r];
                                            ++r, null != A.currAnimation && A.currAnimation.framesUpdated(), (A.updateMatrix = !0);
                                        }
                                    }
                                    ((e = this.g).font = e.defaultFont), e.font.fontScale != a.SCALE && (e.font.fontScale = a.SCALE), this.moveCamera(this.camera.realX, this.camera.realY);
                                }
                                if (
                                    ((a.unzoomedScaleX = a.screenScaleX = this.root.get_scaleX()),
                                    (a.unzoomedScaleY = a.screenScaleY = this.root.get_scaleY()),
                                    (a.screenOffsetX = 0 | this.root.get_x()),
                                    (a.screenOffsetY = 0 | this.root.get_y()),
                                    null != this.stats && (this.stats.set_x(a.stage.stageWidth - this.stats.get_width()), this.stats.set_y(0)),
                                    this.resetShaders(),
                                    s)
                                )
                                    for (s = this.gameScaleListeners, e = 0; e < s.length; ) {
                                        try {
                                            var l = s[e];
                                            l(s), -1 == Gb.indexOf(s, l) && --e;
                                        } catch (e) {
                                            if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                        }
                                        ++e;
                                    }
                                if (n)
                                    for (l = this.screenSizeListeners, n = 0; n < l.length; ) {
                                        try {
                                            var o = l[n];
                                            o(l), -1 == Gb.indexOf(l, o) && --n;
                                        } catch (e) {
                                            if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                        }
                                        ++n;
                                    }
                            },
                            addShader: function (e) {
                                if (sz.get_isSupported()) {
                                    for (e = e.basicShader, null != this.shaders && this.clearShaders(), this.shaders = [e.model], e = e.multipassParent; null != e; ) this.shaders.splice(0, 0, e.model), (e = e.multipassParent);
                                    e = 0;
                                    for (var t = this.shaders; e < t.length; ) {
                                        var n = t[e];
                                        ++e, this.shaderLayer.addChild(n);
                                    }
                                }
                            },
                            clearShaders: function () {
                                Gb.removeAllChildren(this.shaderLayer), a.stage.context3D.setRenderToBackBuffer(), (this.shaders = []);
                            },
                            toggleShadersForHUD: function () {
                                null != this.shaderLayer && null != this.hudLayer && null != this.root && this.root.swapChildren(this.shaderLayer, this.hudLayer);
                            },
                            resetShaders: function () {
                                if (null != this.shaders)
                                    for (var e = 0, t = this.shaders; e < t.length; ) {
                                        var n = t[e];
                                        ++e, n.rebuild();
                                    }
                            },
                            begin: function (t) {
                                (this.loadedAtlases = new wi()),
                                    (this.atlasesToLoad = new wi()),
                                    (this.atlasesToUnload = new wi()),
                                    Hd.enable(),
                                    Hd.define("iSHIFT", [16]),
                                    Hd.define("iCTRL", [17]),
                                    Hd.define("iCOMMAND", [15]),
                                    (a.landscape = x.landscape);
                                var n = ke.logicalWidth,
                                    s = ke.logicalHeight;
                                for (
                                    a.screenWidth = 0 | n,
                                        a.screenHeight = 0 | s,
                                        a.screenWidthHalf = (n / 2) | 0,
                                        a.screenHeightHalf = (s / 2) | 0,
                                        hu.get(),
                                        Fi.get().loadScenes(),
                                        this.g = new r(),
                                        a.started = !0,
                                        this.tileUpdated = !1,
                                        this.shakeTimer = 0,
                                        this.shakeIntensity = 0.01,
                                        this.isShaking = !1,
                                        this.enter = this.leave = null,
                                        a.cameraX = 0,
                                        this.acc = a.cameraY = 0,
                                        this.lastTime = Hh.getTimer(),
                                        a.sceneWidth = 0 | n,
                                        a.sceneHeight = 0 | s,
                                        this.colorLayer = new ly(),
                                        this.root.addChild(this.colorLayer),
                                        this.master = new Yb(),
                                        this.root.addChild(this.master),
                                        this.hudLayer = new Uv(-1, "__hud__", -1, 0, 0, 1, 10, null),
                                        this.root.addChild(this.hudLayer),
                                        this.transitionLayer = new Yb(),
                                        this.root.addChild(this.transitionLayer),
                                        this.debugLayer = new Yb(),
                                        this.root.addChild(this.debugLayer),
                                        sz.get_isSupported() && this.root.addChild(this.shaderLayer),
                                        this.root.addChild(this.root.maskLayer),
                                        this.actorsToCreateInNextScene = [],
                                        this.gameAttributes = new p(),
                                        this.setStatsVisible(x.showConsole),
                                        n = Fi.get().gameAttributes.keys();
                                    n.hasNext();

                                ) {
                                    s = n.next();
                                    var A = Fi.get().gameAttributes,
                                        l = null != e[s] ? A.getReserved(s) : A.h[s];
                                    (A = this.gameAttributes), null != e[s] ? A.setReserved(s, l) : (A.h[s] = l);
                                }
                                (this.channels = []),
                                    this.channels.push(new zr(this, 0)),
                                    this.channels.push(new zr(this, 1)),
                                    this.channels.push(new zr(this, 2)),
                                    this.channels.push(new zr(this, 3)),
                                    this.channels.push(new zr(this, 4)),
                                    this.channels.push(new zr(this, 5)),
                                    this.channels.push(new zr(this, 6)),
                                    this.channels.push(new zr(this, 7)),
                                    this.channels.push(new zr(this, 8)),
                                    this.channels.push(new zr(this, 9)),
                                    this.channels.push(new zr(this, 10)),
                                    this.channels.push(new zr(this, 11)),
                                    this.channels.push(new zr(this, 12)),
                                    this.channels.push(new zr(this, 13)),
                                    this.channels.push(new zr(this, 14)),
                                    this.channels.push(new zr(this, 15)),
                                    this.channels.push(new zr(this, 16)),
                                    this.channels.push(new zr(this, 17)),
                                    this.channels.push(new zr(this, 18)),
                                    this.channels.push(new zr(this, 19)),
                                    this.channels.push(new zr(this, 20)),
                                    this.channels.push(new zr(this, 21)),
                                    this.channels.push(new zr(this, 22)),
                                    this.channels.push(new zr(this, 23)),
                                    this.channels.push(new zr(this, 24)),
                                    this.channels.push(new zr(this, 25)),
                                    this.channels.push(new zr(this, 26)),
                                    this.channels.push(new zr(this, 27)),
                                    this.channels.push(new zr(this, 28)),
                                    this.channels.push(new zr(this, 29)),
                                    this.channels.push(new zr(this, 30)),
                                    this.channels.push(new zr(this, 31)),
                                    (this.sceneToEnter = t),
                                    this.loadScene(t),
                                    (this.sceneInitialized = !0);
                            },
                            setStatsVisible: function (e) {
                                e != (null != this.stats) &&
                                    (e ? ((this.stats = new zU()), a.stage.addChild(this.stats), this.stats.set_x(a.stage.stageWidth - this.stats.get_width()), this.stats.set_y(0)) : (a.stage.removeChild(this.stats), (this.stats = null)));
                            },
                            loadScene: function (t) {
                                if (
                                    ((this.collisionPairs = new kE(32)),
                                    a.preservePadding || ((a.paddingTop = 0), (a.paddingLeft = 0), (a.paddingBottom = 0), (a.paddingRight = 0)),
                                    (this.tasks = []),
                                    (this.scene = Fi.get().scenes.h[t]),
                                    (-1 != t && null != this.scene) || ((this.scene = Fi.get().scenes.h[x.initSceneID]), null != this.scene))
                                ) {
                                    if ((this.scene.load(), (t = new wi()), this.scene.retainsAtlases))
                                        for (var n = this.loadedAtlases.iterator(); n.hasNext(); ) {
                                            var s = n.next();
                                            t.h[s] = s;
                                        }
                                    else {
                                        for (n = this.loadedAtlases.iterator(); n.hasNext(); ) (s = n.next()), Fi.get().atlases.h[s].allScenes && (t.h[s] = s);
                                        for (n = 0, s = this.scene.atlases; n < s.length; ) {
                                            var r = s[n];
                                            ++n, (t.h[r] = r);
                                        }
                                    }
                                    for (n = this.atlasesToLoad.iterator(); n.hasNext(); ) (s = n.next()), (t.h[s] = s);
                                    for (n = this.atlasesToUnload.iterator(); n.hasNext(); ) (s = n.next()), t.remove(s);
                                    for (n = this.loadedAtlases.iterator(); n.hasNext(); ) (s = n.next()), t.h.hasOwnProperty(s) || (hu.get().unloadAtlas(s), this.loadedAtlases.remove(s));
                                    for (t = t.iterator(); t.hasNext(); ) (n = t.next()), this.loadedAtlases.h.hasOwnProperty(n) || (hu.get().loadAtlas(n), (this.loadedAtlases.h[n] = n));
                                    for (
                                        this.atlasesToLoad = new wi(),
                                            this.atlasesToUnload = new wi(),
                                            a.sceneWidth = this.scene.sceneWidth,
                                            a.sceneHeight = this.scene.sceneHeight,
                                            this.behaviors = new c3(),
                                            this.groups = new wi(),
                                            this.reverseGroups = new p(),
                                            t = 0,
                                            n = Fi.get().groups;
                                        t < n.length;

                                    ) {
                                        (s = n[t]), ++t, (r = new BW(s.ID, s.name)), (this.groups.h[s.ID] = r);
                                        var A = s.name,
                                            l = this.reverseGroups;
                                        null != e[A] ? l.setReserved(A, r) : (l.h[A] = r), (r.name = s.name);
                                    }
                                    (t = new BW(-2, "Regions")),
                                        (this.groups.h[-2] = t),
                                        (n = this.reverseGroups),
                                        null != e.Regions ? n.setReserved("Regions", t) : (n.h.Regions = t),
                                        (this.disableCollisionList = []),
                                        (this.actorsOfType = new wi()),
                                        (this.recycledActorsOfType = new wi()),
                                        (this.regions = new kE(32)),
                                        (this.regions.reuseIterator = !0),
                                        (this.terrainRegions = new wi()),
                                        (this.joints = new wi()),
                                        (this.dynamicTiles = new p()),
                                        (this.animatedTiles = []),
                                        (this.allActors = new kE(256)),
                                        (this.allActors.reuseIterator = !0),
                                        (this.nextID = 0),
                                        (this.whenKeyPressedListeners = new p()),
                                        (this.hasKeyPressedListeners = !1),
                                        (this.whenAnyKeyPressedListeners = []),
                                        (this.whenAnyKeyReleasedListeners = []),
                                        (this.whenAnyGamepadPressedListeners = []),
                                        (this.whenAnyGamepadReleasedListeners = []),
                                        (this.whenTypeGroupCreatedListeners = new Ug()),
                                        (this.whenTypeGroupDiesListeners = new Ug()),
                                        (this.typeGroupPositionListeners = new wi()),
                                        (this.collisionListeners = new wi()),
                                        (this.soundListeners = new Ug()),
                                        (this.channelListeners = new wi()),
                                        (this.nativeListeners = []),
                                        (this.whenUpdatedListeners = []),
                                        (this.whenDrawingListeners = []),
                                        (this.whenMousePressedListeners = []),
                                        (this.whenMouseReleasedListeners = []),
                                        (this.whenMouseMovedListeners = []),
                                        (this.whenMouseDraggedListeners = []),
                                        (this.whenPausedListeners = []),
                                        (this.whenSwipedListeners = []),
                                        (this.whenMTStartListeners = []),
                                        (this.whenMTDragListeners = []),
                                        (this.whenMTEndListeners = []),
                                        (this.whenFocusChangedListeners = []),
                                        (this.fullscreenListeners = []),
                                        (this.screenSizeListeners = []),
                                        (this.gameScaleListeners = []),
                                        a.NO_PHYSICS || this.initPhysics(),
                                        (this.gravityX = this.scene.gravityX),
                                        (this.gravityY = this.scene.gravityY),
                                        this.loadTerrain(),
                                        this.loadRegions(),
                                        this.loadTerrainRegions(),
                                        this.loadActors(),
                                        this.loadCamera(),
                                        this.loadJoints(),
                                        this.loadDeferredActors(),
                                        a.initBehaviors(this.behaviors, this.scene.behaviorValues, this, this, !0),
                                        this.initActorScripts();
                                } else a.stage.removeEventListener("enterFrame", N(this, this.onUpdate));
                            },
                            initPhysics: function () {
                                var e = new td(this.scene.gravityX, this.scene.gravityY);
                                (this.world = new zs(e, !1)),
                                    (zs.m_continuousPhysics = !1),
                                    (zs.m_warmStarting = !0),
                                    ((e = new $h()).lowerBound.x = 0),
                                    (e.lowerBound.y = 0),
                                    (e.upperBound.x = a.screenWidth / a.physicsScale),
                                    (e.upperBound.y = a.screenHeight / a.physicsScale),
                                    this.world.setScreenBounds(e),
                                    (a.debugDrawer = new gJ()),
                                    a.debugDrawer.setSprite(this.debugLayer),
                                    a.debugDrawer.setLineThickness(3),
                                    a.debugDrawer.setDrawScale(10 * a.SCALE),
                                    a.debugDrawer.setFillAlpha(0),
                                    a.debugDrawer.setFlags(gJ.e_shapeBit | gJ.e_jointBit),
                                    this.world.setDebugDraw(a.debugDrawer);
                            },
                            loadActors: function () {
                                this.actorsToCreate = [];
                                for (var e = this.scene.actors.iterator(); e.hasNext(); ) {
                                    var t = e.next();
                                    this.actorsToCreate.push(this.createActor(t, !0));
                                }
                                for (e = 0, t = this.interactiveLayers; e < t.length; ) {
                                    var n = t[e];
                                    ++e;
                                    for (var a = 0, s = n.actorContainer.get_numChildren(); a < s; ) {
                                        var r = a++,
                                            A = n.actorContainer.getChildAt(r);
                                        for (A = this.scene.actors.h[A.ID]; A.orderInLayer != r; ) n.actorContainer.swapChildrenAt(r, A.orderInLayer), (A = n.actorContainer.getChildAt(r)), (A = this.scene.actors.h[A.ID]);
                                    }
                                }
                            },
                            loadDeferredActors: function () {
                                for (var e = 0, t = this.actorsToCreateInNextScene; e < t.length; ) {
                                    var n = t[e];
                                    ++e, (h.lastCreatedActor = this.createActorOfType(n.type, n.x, n.y, n.layer));
                                }
                                this.actorsToCreateInNextScene = [];
                            },
                            initActorScripts: function () {
                                for (var e = 0, t = this.actorsToCreate; e < t.length; ) {
                                    var n = t[e];
                                    ++e, n.initScripts();
                                }
                                this.actorsToCreate = null;
                            },
                            loadCamera: function () {
                                (this.camera = new Xr(this, -1, 2, 0, 0, -1, 2, 2, null, null, null, null, !0, !1, !0, !1, null, !0, !1)), this.camera.set_name("Camera"), (this.camera.isCamera = !0), (a.cameraX = 0), (a.cameraY = 0);
                            },
                            loadRegions: function () {
                                (this.regions = new kE(32)), (this.regions.reuseIterator = !0);
                                for (var e = this.scene.regions.iterator(); e.hasNext(); ) {
                                    var t = e.next(),
                                        n = new rz(this, t.x, t.y, t.shapes, t.simpleBounds);
                                    n.set_name(t.name), a.NO_PHYSICS || n.setXY(t.x + n.regionWidth / 2, t.y + n.regionHeight / 2), (n.ID = t.ID), this.addRegion(n);
                                }
                            },
                            loadTerrainRegions: function () {
                                if (((this.terrainRegions = new wi()), !a.NO_PHYSICS))
                                    for (var e = this.scene.terrainRegions.iterator(); e.hasNext(); ) {
                                        var t = e.next(),
                                            n = new yU(this, t.x, t.y, t.shapes, t.groupID, t.fillColor);
                                        n.set_name(t.name), n.setX(a.toPixelUnits(t.x) + n.regionWidth / 2), n.setY(a.toPixelUnits(t.y) + n.regionHeight / 2), (n.ID = t.ID), this.addTerrainRegion(n);
                                    }
                            },
                            loadJoints: function () {
                                if (!a.NO_PHYSICS)
                                    for (var e = this.scene.joints.iterator(); e.hasNext(); ) {
                                        var t = e.next(),
                                            n = t.actor1,
                                            s = t.actor2,
                                            r = t.collideConnected;
                                        if (3 == t.type) {
                                            var A = this.joints,
                                                l = t.ID;
                                            (t = this.createStickJoint(this.getActor(n).body, this.getActor(s).body, t.ID, r)), (A.h[l] = t);
                                        } else if (1 == t.type) {
                                            (l = d.__cast(t, MV)),
                                                ((A = this.getActor(n).body.getLocalCenter().copy()).x = a.toPixelUnits(A.x)),
                                                (A.y = a.toPixelUnits(A.y)),
                                                (n = this.getActor(n).body),
                                                (s = -1 == s ? this.world.m_groundBody : this.getActor(s).body);
                                            var o = this.joints,
                                                i = t.ID;
                                            (t = this.createHingeJoint(n, s, A, t.ID, r, l.enableLimit, l.enableMotor, l.lowerAngle, l.upperAngle, l.maxMotorTorque, -l.motorSpeed)), (o.h[i] = t);
                                        } else
                                            (2 != t.type && 7 != t.type) ||
                                                ((l = d.__cast(t, NV)),
                                                ((A = this.getActor(n).body.getLocalCenter().copy()).x = a.toPixelUnits(A.x)),
                                                (A.y = a.toPixelUnits(A.y)),
                                                (n = this.getActor(n).body),
                                                (s = -1 == s ? this.world.m_groundBody : this.getActor(s).body),
                                                (A = this.joints),
                                                (o = t.ID),
                                                (t = this.createSlidingJoint(n, s, l.localAxisA, t.ID, r, l.enableLimit, l.enableMotor, l.lowerTranslation, l.upperTranslation, l.maxMotorForce, l.motorSpeed)),
                                                (A.h[o] = t));
                                    }
                            },
                            loadTerrain: function () {
                                this.initLayers();
                                for (var e = 0, t = this.scene.wireframes; e < t.length; ) {
                                    var n = t[e];
                                    ++e;
                                    var s = null;
                                    a.NO_PHYSICS || (s = new Xr(this, 1e8, 1, n.x, n.y, -1, 0 | n.width, 0 | n.height, null, new p(), null, null, !1, !0, !1, !1, n.shape)),
                                        s.set_name("Terrain"),
                                        (s.typeID = -1),
                                        s.set_visible(!1),
                                        this.getGroup(1).addChild(s);
                                }
                            },
                            initLayers: function () {
                                if ((this.setColorBackground(this.scene.colorBackground), (this.animatedTiles = this.scene.animatedTiles), null != this.animatedTiles))
                                    for (var t = 0, n = this.animatedTiles; t < n.length; ) {
                                        var a = n[t];
                                        ++t, (a.currFrame = 0), (a.currTime = 0), (a.updateSource = !0);
                                    }
                                (this.layers = this.scene.layers), (this.layersToDraw = new wi()), (this.layersByName = new p()), (this.interactiveLayers = []), (this.backgroundLayers = []), (n = t = !1), (a = 0);
                                var s = -1,
                                    r = {};
                                if (0 == this.layers.mSize) {
                                    var A = new Rx(0, this.scene, (this.scene.sceneWidth / this.scene.tileWidth) | 0, (this.scene.sceneHeight / this.scene.tileHeight) | 0);
                                    (A = new Uv(0, "default", 0, 1, 1, 1, 10, A)), this.layers.set(A.ID, A);
                                }
                                for (A = this.layers.iterator(); A.hasNext(); ) {
                                    var l = A.next();
                                    (s = 0 | Math.max(s, l.order)), (r[l.order] = l);
                                    var o = l.layerName,
                                        i = this.layersByName;
                                    null != e[o] ? i.setReserved(o, l) : (i.h[o] = l), l instanceof Uv ? this.interactiveLayers.push(d.__cast(l, Uv)) : l instanceof nD && this.backgroundLayers.push(d.__cast(l, nD));
                                }
                                for (A = 0, l = s + 1; A < l; ) (o = s - (i = A++)), ((i = r[i]).order = o), (this.layersToDraw.h[o] = i);
                                for (r = 0, s += 1; r < s; )
                                    (A = r++),
                                        (A = this.layersToDraw.h[A]) instanceof nD
                                            ? ((A = d.__cast(A, nD)).load(), this.master.addChild(A))
                                            : A instanceof Uv &&
                                              ((A = d.__cast(A, Uv)),
                                              t || ((t = !0), (this.bottomLayer = A)),
                                              n || a != Math.floor(this.interactiveLayers.length / 2) || ((n = !0), (this.middleLayer = A)),
                                              this.master.addChild(A),
                                              (this.topLayer = A),
                                              A.tiles.mountGrid(),
                                              ++a);
                            },
                            setColorBackground: function (e) {
                                e.draw(this.colorLayer.get_graphics(), 0, 0, (a.screenWidth * a.SCALE) | 0, (a.screenHeight * a.SCALE) | 0);
                            },
                            optimizePool: function () {
                                for (var e = this.recycledActorsOfType.iterator(); e.hasNext(); ) {
                                    for (var t = e.next(), n = [], a = 0; a < t.length; ) {
                                        var s = t[a];
                                        ++a, null != s && s.recycled && n.push(s);
                                    }
                                    for (a = 0; a < n.length; ) (s = n[a]), ++a, Qc.remove(t, s), this.removeActor(s);
                                }
                            },
                            cleanup: function () {
                                null != a.debugDrawer && null != a.debugDrawer.m_sprite && a.debugDrawer.m_sprite.get_graphics().clear();
                                for (var e = 0, t = this.interactiveLayers; e < t.length; ) {
                                    var n = t[e];
                                    ++e, n.clear();
                                }
                                if ((this.hudLayer.clear(), Gb.removeAllChildren(this.master), this.behaviors.destroy(), this.camera.destroy(), (this.camera = null), null != this.world)) {
                                    for (e = this.world.getBodyList(), t = this.world.getJointList(); null != t; ) this.world.destroyJoint(t), (t = t.getNext());
                                    for (; null != e; ) this.world.destroyBody(e), (e = e.getNext());
                                }
                                for (e = this.actorsOfType.iterator(); e.hasNext(); ) e.next().length = 0;
                                for (e = this.recycledActorsOfType.iterator(); e.hasNext(); )
                                    for (t = e.next(), n = 0; n < t.length; ) {
                                        var s = t[n];
                                        ++n, s.destroyed || s.destroy();
                                    }
                                for (e = this.recycledActorsOfType.iterator(); e.hasNext(); ) e.next().length = 0;
                                for (e = this.allActors.iterator(); e.hasNext(); ) e.next().destroy();
                                for (; 0 < Eg.count(this.allActors); ) for (e = this.allActors.keys(); e.hasNext(); ) (t = e.next()), this.allActors.unset(t);
                                this.scene.unload(),
                                    (this.whenKeyPressedListeners = this.disableCollisionList = this.collisionPairs = this.tasks = this.scene = this.allActors = this.reverseGroups = this.groups = this.joints = this.terrainRegions = this.regions = this.animatedTiles = this.dynamicTiles = this.layersToDraw = this.backgroundLayers = this.interactiveLayers = this.layersByName = this.layers = this.recycledActorsOfType = this.actorsOfType = null),
                                    (this.hasKeyPressedListeners = !1),
                                    (this.nativeListeners = this.whenFocusChangedListeners = this.whenMTEndListeners = this.whenMTDragListeners = this.whenMTStartListeners = this.whenSwipedListeners = this.gameScaleListeners = this.screenSizeListeners = this.fullscreenListeners = this.whenPausedListeners = this.whenMouseDraggedListeners = this.whenMouseMovedListeners = this.whenMouseReleasedListeners = this.whenMousePressedListeners = this.whenDrawingListeners = this.whenUpdatedListeners = this.channelListeners = this.soundListeners = this.collisionListeners = this.typeGroupPositionListeners = this.whenTypeGroupDiesListeners = this.whenTypeGroupCreatedListeners = this.whenAnyGamepadReleasedListeners = this.whenAnyGamepadPressedListeners = this.whenAnyKeyReleasedListeners = this.whenAnyKeyPressedListeners = null),
                                    (h.lastCreatedActor = null),
                                    (h.lastCreatedJoint = null),
                                    (h.lastCreatedRegion = null),
                                    (h.lastCreatedTerrainRegion = null),
                                    Hd.update(),
                                    (this.world = null);
                            },
                            switchScene: function (e, t, n) {
                                this.isTransitioning() ||
                                    (null != t && t.isComplete() && t.reset(),
                                    (null != t && 0 != t.duration) || (t = new To(0)),
                                    (null != n && 0 != n.duration) || (n = new To(1)),
                                    (this.leave = t),
                                    (this.enter = n),
                                    this.leave.isComplete() || this.leave.start(),
                                    (this.sceneToEnter = e));
                            },
                            enterScene: function () {
                                this.enter.isComplete() || (this.enter.start(), null != this.leave && this.leave.cleanup()),
                                    (this.leave = null),
                                    (this.sceneInitialized = !1),
                                    this.cleanup(),
                                    this.loadScene(this.sceneToEnter),
                                    (this.sceneInitialized = !0);
                            },
                            isTransitioning: function () {
                                return !!((null != this.enter && this.enter.isActive()) || (null != this.leave && this.leave.isActive()));
                            },
                            isTransitioningOut: function () {
                                return !(null == this.leave || !this.leave.isActive());
                            },
                            createActorInNextScene: function (e, t, n, a) {
                                this.actorsToCreateInNextScene.push(new S8(e, t, n, a));
                            },
                            createActor: function (e, t) {
                                if (
                                    ((t = d.__cast(hu.get().resources.get(e.actorType.spriteID), yW)),
                                    (t = new Xr(
                                        this,
                                        e.elementID,
                                        e.groupID,
                                        e.x,
                                        e.y,
                                        e.layerID,
                                        -1,
                                        -1,
                                        t,
                                        e.behaviorValues,
                                        e.actorType,
                                        a.NO_PHYSICS ? null : e.actorType.bodyDef,
                                        !1,
                                        !1,
                                        !1,
                                        !1,
                                        null,
                                        e.actorType.autoScale,
                                        e.actorType.ignoreGravity,
                                        e.actorType.physicsMode
                                    )),
                                    0 != e.angle)
                                )
                                    if (0 != t.currOffset.x || 0 != t.currOffset.y) {
                                        var n = 0 | t.currOrigin.x,
                                            s = 0 | t.currOrigin.y;
                                        t.setOriginPoint((t.cacheWidth / 2) | 0, (t.cacheHeight / 2) | 0), t.setAngle(e.angle, !1), t.setOriginPoint(n, s);
                                    } else t.setAngle(e.angle, !1);
                                if (1 != e.scaleX || 1 != e.scaleY) {
                                    var r = (t.cacheWidth / 2) | 0,
                                        A = (t.cacheHeight / 2) | 0;
                                    (t.currOrigin.x == r && t.currOrigin.y == A) ||
                                        ((n = Math.sin(0.01745329251994278 * e.angle)),
                                        (s = Math.cos(0.01745329251994278 * e.angle)),
                                        (r = (t.currOrigin.x - r) * e.scaleX - t.currOffset.x),
                                        (A = (t.currOrigin.y - A) * e.scaleY - t.currOffset.y),
                                        t.setX(t.getX(!1) + r * s - A * n),
                                        t.setY(t.getY(!1) + r * n + A * s)),
                                        t.growTo(e.scaleX, e.scaleY, 0);
                                }
                                return (
                                    t.set_name(e.actorType.name),
                                    null == this.recycledActorsOfType.h[e.actorType.ID] && (this.recycledActorsOfType.h[e.actorType.ID] = []),
                                    this.recycledActorsOfType.h[e.actorType.ID].push(t),
                                    2 != e.actorType.physicsMode && null != (n = this.groups.h[e.groupID]) && n.addChild(t),
                                    1e8 == e.elementID ? (this.nextID++, (t.ID = this.nextID), this.allActors.set(t.ID, t)) : (this.allActors.set(t.ID, t), (this.nextID = 0 | Math.max(t.ID, this.nextID))),
                                    t.internalUpdate(0, !1),
                                    t.updateDrawingMatrix(),
                                    null != e.actorType && -1 != e.actorType.ID && (null == (n = this.actorsOfType.h[e.actorType.ID]) && ((n = []), (this.actorsOfType.h[e.actorType.ID] = n)), null != n && n.push(t)),
                                    (h.lastCreatedActor = t)
                                );
                            },
                            removeActor: function (e) {
                                this.allActors.unset(e.ID), this.removeActorFromLayer(e, e.layer);
                                var t = this.groups,
                                    n = e.getGroupID();
                                t.h[n].removeChild(e), e.destroy(), null != e.type && -1 != e.typeID && null != (t = this.actorsOfType.h[e.typeID]) && Qc.remove(t, e);
                            },
                            removeActorFromLayer: function (e, t) {
                                null != t &&
                                    e.layer == t &&
                                    (t == this.hudLayer && (0 == e.physicsMode && e.body.setAlwaysActive(e.alwaysSimulate), (e.isHUD = !1), (e.cachedLayer = null)),
                                    t.actorContainer.contains(e) && (t.actorContainer.removeChild(e), (e.layer = null)));
                            },
                            moveActorToLayer: function (e, t) {
                                e.layer != t &&
                                    null != t &&
                                    ((null != e.layer && e.layer.scrollFactorX == t.scrollFactorX && e.layer.scrollFactorY == t.scrollFactorY) || (e.updateMatrix = !0),
                                    t == this.hudLayer && (0 == e.physicsMode && e.body.setAlwaysActive(!0), (e.isHUD = !0), (e.cachedLayer = e.layer)),
                                    null != e.layer && this.removeActorFromLayer(e, e.layer),
                                    t.actorContainer.addChild(e),
                                    (e.layer = t));
                            },
                            recycleActor: function (e) {
                                if (null != e && !e.recycled) {
                                    var t = a.engine.whenTypeGroupDiesListeners,
                                        n = e.getType();
                                    (t = t.h[n.__id__]), (n = a.engine.whenTypeGroupDiesListeners);
                                    var s = e.getGroup();
                                    (n = n.h[s.__id__]), (s = e.whenKilledListeners);
                                    for (var r = 0; r < s.length; ) {
                                        try {
                                            var A = s[r];
                                            A(s), -1 == Gb.indexOf(s, A) && --r;
                                        } catch (e) {
                                            if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                        }
                                        ++r;
                                    }
                                    if (null != t)
                                        for (A = 0; A < t.length; ) {
                                            try {
                                                var l = t[A];
                                                l(e, t), -1 == Gb.indexOf(t, l) && --A;
                                            } catch (e) {
                                                if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                            }
                                            ++A;
                                        }
                                    if (null != n)
                                        for (l = 0; l < n.length; ) {
                                            try {
                                                var o = n[l];
                                                o(e, n), -1 == Gb.indexOf(n, o) && --l;
                                            } catch (e) {
                                                if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                            }
                                            ++l;
                                        }
                                    if (
                                        (e.isHUD && e.unanchorFromScreen(),
                                        e.alwaysSimulate && e.makeSometimesSimulate(!1),
                                        (e.firstMove = !1),
                                        e.setXY(1e6, 1e6, !1, !0),
                                        (e.colX = 1e6),
                                        (e.colY = 1e6),
                                        (e.recycled = !0),
                                        (e.killLeaveScreen = !1),
                                        (e.lastScreenState = !1),
                                        (e.lastSceneState = !1),
                                        e.cancelTweens(),
                                        e.clearFilters(),
                                        e.resetBlendMode(),
                                        e.set_alpha(1),
                                        (e.realScaleX = 1),
                                        (e.realScaleY = 1),
                                        e.switchToDefaultAnimation(),
                                        e.disableActorDrawing(),
                                        e.removeAttachedImages(),
                                        0 == e.physicsMode && null != e.body)
                                    )
                                        for (o = e.body.getContactList(); null != o; ) a.engine.world.m_contactManager.m_contactListener.endContact(o.contact), (o = o.next);
                                    for (
                                        e.removeAllListeners(),
                                            e.resetListeners(),
                                            this.removeActorFromLayer(e, e.layer),
                                            0 == e.physicsMode &&
                                                (e.body.setActive(!1),
                                                e.body.setAwake(!1),
                                                e.body.setBullet(e.type.bodyDef.bullet),
                                                null != e.body.m_prev && (e.body.m_prev.m_next = e.body.m_next),
                                                null != e.body.m_next && (e.body.m_next.m_prev = e.body.m_prev),
                                                e.body == this.world.m_bodyList && (this.world.m_bodyList = e.body.m_next),
                                                (e.body.m_prev = null),
                                                (e.body.m_next = null),
                                                --this.world.m_bodyCount),
                                            e.xSpeed = 0,
                                            e.ySpeed = 0,
                                            e.rSpeed = 0,
                                            e.continuousCollision = !1,
                                            o = 0,
                                            l = this.tasks;
                                        o < l.length;

                                    )
                                        (A = l[o]), ++o, A.actor == e && this.removeTask(A);
                                    this.allActors.unset(e.ID);
                                }
                            },
                            getRecycledActorOfType: function (e, t, n, s) {
                                return (e = this.getRecycledActorOfTypeOnLayer(e, t, n, this.getLayerByOrder(s).ID)), a.paused && (e.updateDrawingMatrix(), e.pause()), e;
                            },
                            getRecycledActorOfTypeOnLayer: function (e, t, n, s) {
                                var r = null;
                                null == this.recycledActorsOfType.h[e.ID] && (this.recycledActorsOfType.h[e.ID] = []);
                                var A = this.recycledActorsOfType.h[e.ID];
                                if (null != A) {
                                    for (var l = 0; l < A.length; )
                                        if (((r = A[l]), ++l, null != r && r.recycled)) {
                                            if (
                                                ((r.createTime = Hh.getTimer()),
                                                this.allActors.set(r.ID, r),
                                                (r.dead = !1),
                                                (r.dying = !1),
                                                (r.recycled = !1),
                                                (r.killLeaveScreen = !1),
                                                r.switchToDefaultAnimation(),
                                                r.customizedBehaviors ? ((r.customizedBehaviors = !1), (r.behaviors = new c3()), a.initBehaviors(r.behaviors, e.behaviorValues, r, this, !1)) : r.enableAllBehaviors(),
                                                0 == r.physicsMode &&
                                                    (r.body.setActive(!0),
                                                    r.body.setAwake(!0),
                                                    (r.body.m_prev = null),
                                                    (r.body.m_next = this.world.m_bodyList),
                                                    null != this.world.m_bodyList && (this.world.m_bodyList.m_prev = r.body),
                                                    (this.world.m_bodyList = r.body),
                                                    ++this.world.m_bodyCount),
                                                (r.registry = new p()),
                                                r.enableActorDrawing(),
                                                r.setXY(t, n, !1, !0),
                                                0 == r.physicsMode && ((r.colX = t), (r.colY = n)),
                                                r.setAngle(0, !1),
                                                r.setIgnoreGravity(r.defaultGravity),
                                                r.set_alpha(1),
                                                (r.realScaleX = 1),
                                                (r.realScaleY = 1),
                                                null != r.bodyDef && (r.continuousCollision = r.bodyDef.bullet),
                                                r.updateDrawingMatrix(!0),
                                                this.moveActorToLayer(r, this.getLayerById(s)),
                                                r.initScripts(),
                                                (e = this.whenTypeGroupCreatedListeners.h[e.__id__]),
                                                (t = this.whenTypeGroupCreatedListeners),
                                                (n = r.getGroup()),
                                                (t = t.h[n.__id__]),
                                                null != e)
                                            )
                                                for (n = r, s = 0; s < e.length; ) {
                                                    try {
                                                        var o = e[s];
                                                        o(n, e), -1 == Gb.indexOf(e, o) && --s;
                                                    } catch (e) {
                                                        if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                                    }
                                                    ++s;
                                                }
                                            if (null != t)
                                                for (o = r, e = 0; e < t.length; ) {
                                                    try {
                                                        var i = t[e];
                                                        i(o, t), -1 == Gb.indexOf(t, i) && --e;
                                                    } catch (e) {
                                                        if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                                    }
                                                    ++e;
                                                }
                                            return r;
                                        }
                                    r = this.createActorOfType(e, t, n, s);
                                }
                                return r;
                            },
                            createActorOfType: function (e, t, n, a) {
                                if (null == e) return null;
                                if (
                                    ((t = new D5(1e8, 0 | t, 0 | n, 1, 1, a, -1, 0, e.groupID, e.ID, null, !1)),
                                    (t = this.createActor(t, !0)).initScripts(),
                                    (e = this.whenTypeGroupCreatedListeners.h[e.__id__]),
                                    (n = this.whenTypeGroupCreatedListeners),
                                    (a = t.getGroup()),
                                    (n = n.h[a.__id__]),
                                    null != e)
                                )
                                    for (a = 0; a < e.length; ) {
                                        try {
                                            var s = e[a];
                                            s(t, e), -1 == Gb.indexOf(e, s) && --a;
                                        } catch (e) {
                                            if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                        }
                                        ++a;
                                    }
                                if (null != n)
                                    for (s = 0; s < n.length; ) {
                                        try {
                                            var r = n[s];
                                            r(t, n), -1 == Gb.indexOf(n, r) && --s;
                                        } catch (e) {
                                            if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                        }
                                        ++s;
                                    }
                                return t;
                            },
                            getTopLayer: function () {
                                return this.topLayer.ID;
                            },
                            getBottomLayer: function () {
                                return this.bottomLayer.ID;
                            },
                            getMiddleLayer: function () {
                                return this.middleLayer.ID;
                            },
                            update: function (t) {
                                if (null != this.scene) {
                                    if ((Xq.update(0 | t), !a.NO_PHYSICS)) {
                                        var n = this.world.getScreenBounds();
                                        (n.lowerBound.x = (a.cameraX / a.SCALE - a.paddingLeft) / a.physicsScale),
                                            (n.lowerBound.y = (a.cameraY / a.SCALE - a.paddingTop) / a.physicsScale),
                                            (n.upperBound.x = n.lowerBound.x + (a.screenWidth + a.paddingRight + a.paddingLeft) / a.physicsScale),
                                            (n.upperBound.y = n.lowerBound.y + (a.screenHeight + a.paddingBottom + a.paddingTop) / a.physicsScale);
                                    }
                                    n = (Hd.mouseX / a.SCALE) | 0;
                                    var s = (Hd.mouseY / a.SCALE) | 0;
                                    if (Hd.mousePressed) {
                                        (h.mpx = n), (h.mpy = s);
                                        for (var r = this.whenMousePressedListeners, A = 0; A < r.length; ) {
                                            try {
                                                var l = r[A];
                                                l(r), -1 == Gb.indexOf(r, l) && --A;
                                            } catch (e) {
                                                if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                            }
                                            ++A;
                                        }
                                    }
                                    if (Hd.mouseReleased)
                                        for (h.mrx = n, h.mry = s, l = this.whenMouseReleasedListeners, r = 0; r < l.length; ) {
                                            try {
                                                var o = l[r];
                                                o(l), -1 == Gb.indexOf(l, o) && --r;
                                            } catch (e) {
                                                if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                            }
                                            ++r;
                                        }
                                    if (this.mx != n || this.my != s) {
                                        for (this.mx = n, this.my = s, o = this.whenMouseMovedListeners, n = 0; n < o.length; ) {
                                            try {
                                                var i = o[n];
                                                i(o), -1 == Gb.indexOf(o, i) && --n;
                                            } catch (e) {
                                                if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                            }
                                            ++n;
                                        }
                                        if (Hd.mouseDown && !Hd.mousePressed)
                                            for (i = this.whenMouseDraggedListeners, o = 0; o < i.length; ) {
                                                try {
                                                    var u = i[o];
                                                    u(i), -1 == Gb.indexOf(i, u) && --o;
                                                } catch (e) {
                                                    if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                                }
                                                ++o;
                                            }
                                    }
                                    for (u = 0; u < this.tasks.length; ) (i = this.tasks[u]).done || i.update(a.STEP_SIZE), i.done && (Qc.remove(this.tasks, i), --u), ++u;
                                    if (this.hasKeyPressedListeners) {
                                        for (u = this.whenKeyPressedListeners.keys(); u.hasNext(); )
                                            if (((o = u.next()), (n = Hd.pressed(o)), (i = Hd.released(o)), n || i))
                                                for (s = this.whenKeyPressedListeners, o = null != e[o] ? s.getReserved(o) : s.h[o], s = 0; s < o.length; ) {
                                                    try {
                                                        var g = o[s];
                                                        g(n, i, o), -1 == Gb.indexOf(o, g) && --s;
                                                    } catch (e) {
                                                        if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                                    }
                                                    ++s;
                                                }
                                        this.keyPollOccurred = !0;
                                    }
                                    for (g = this.whenUpdatedListeners, u = 0; u < g.length; ) {
                                        try {
                                            var m = g[u];
                                            m(t, g), -1 == Gb.indexOf(g, m) && --u;
                                        } catch (e) {
                                            if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                        }
                                        ++u;
                                    }
                                    if ((a.NO_PHYSICS || (this.world.step(0.01, 3, 3), this.world.clearForces(), a.DEBUG_DRAW && this.world.drawDebugData()), 0 != this.regions.mSize))
                                        for (m = this.regions.iterator(); m.hasNext(); ) null != (g = m.next()) && g.innerUpdate(t, !0);
                                    for (; 0 < this.disableCollisionList.length; ) this.disableCollisionList.pop();
                                    if (0 != this.collisionPairs.mSize) for (m = this.collisionPairs.keys(); m.hasNext(); ) (g = m.next()), this.collisionPairs.unset(g);
                                    if ((YD.updateAll(t), 0 != this.allActors.mSize))
                                        for (m = this.allActors.iterator(); m.hasNext(); )
                                            null == (g = m.next()) ||
                                                g.dead ||
                                                g.recycled ||
                                                ((u =
                                                    (0 != g.physicsMode || g.body.isActive()) &&
                                                    g.colX + g.cacheWidth >= a.cameraX / a.SCALE - a.paddingLeft &&
                                                    g.colY + g.cacheHeight >= a.cameraY / a.SCALE - a.paddingTop &&
                                                    g.colX < a.cameraX / a.SCALE + a.screenWidth + a.paddingRight &&
                                                    g.colY < a.cameraY / a.SCALE + a.screenHeight + a.paddingBottom),
                                                (g.isOnScreenCache = u || g.isHUD),
                                                0 == g.physicsMode && null != g.body
                                                    ? g.killLeaveScreen && !u
                                                        ? this.recycleActor(g)
                                                        : (g.body.isActive() || g.alwaysSimulate || g.isHUD) && g.innerUpdate(t, !1)
                                                    : 0 != g.physicsMode && (g.killLeaveScreen && !u ? this.recycleActor(g) : (u || g.alwaysSimulate || g.isHUD) && g.innerUpdate(t, !1)),
                                                g.dead && this.disableCollisionList.push(g));
                                    for (this.keyPollOccurred = !1, m = 0, g = this.disableCollisionList.length; m < g; ) (u = m++), null != (u = this.disableCollisionList[u]) && (u.handlesCollisions = !1);
                                    for (m = 0, g = this.animatedTiles.length; m < g; ) (u = m++), (u = this.animatedTiles[u]).update(t), (this.tileUpdated = this.tileUpdated || u.updateSource);
                                    for (null != this.leave && this.leave.isActive() ? this.leave.update(t) : null != this.enter && this.enter.isActive() && this.enter.update(t), m = this.layers.iterator(); m.hasNext(); )
                                        m.next().updatePosition(a.cameraX, a.cameraY, t);
                                    !a.NO_PHYSICS && a.DEBUG_DRAW && (this.debugLayer.set_x(-a.cameraX), this.debugLayer.set_y(-a.cameraY)),
                                        this.isShaking &&
                                            ((this.shakeTimer -= a.STEP_SIZE),
                                            0 >= this.shakeTimer
                                                ? this.stopShakingScreen()
                                                : ((t = -this.shakeIntensity * a.screenHeight + 2 * Math.random() * this.shakeIntensity * a.screenHeight),
                                                  this.master.set_x((-this.shakeIntensity * a.screenWidth + 2 * Math.random() * this.shakeIntensity * a.screenWidth) * a.SCALE),
                                                  this.master.set_y(t * a.SCALE)));
                                }
                            },
                            onUpdate: function (e) {
                                var t = (e = Hh.getTimer()) - this.lastTime;
                                200 <= t && (t = 200),
                                    (this.acc += t),
                                    (a.elapsedTime = t),
                                    (a.totalElapsedTime += 0 | t),
                                    null != this.leave
                                        ? (this.leave.isComplete() && (this.leave.deactivate(), this.enterScene()), this.postUpdate(e))
                                        : (null != this.enter && this.enter.isComplete() && (this.enter.deactivate(), this.enter.cleanup(), (this.enter = null)), this.sceneInitialized && this.postUpdate(e));
                            },
                            postUpdate: function (e) {
                                for (; this.acc > a.STEP_SIZE; ) this.update(a.STEP_SIZE), (this.acc -= a.STEP_SIZE), Hd.update();
                                if (((this.lastTime = e), 0 != this.allActors.mSize))
                                    for (e = this.allActors.iterator(); e.hasNext(); ) {
                                        var t = e.next();
                                        null == t ||
                                            (0 == t.physicsMode && null == t.body) ||
                                            (t.dead || t.dying
                                                ? this.removeActor(t)
                                                : t.updateMatrix || t.resetOrigin
                                                ? (t.updateDrawingMatrix(), (t.updateMatrix = !1), (t.resetOrigin = !1))
                                                : t.smoothMove && (t.drawX != t.realX || t.drawY != t.realY) && t.updateDrawingMatrix());
                                    }
                                this.draw();
                            },
                            onFocus: function (e) {
                                a.inFocus || ((a.inFocus = !0), this.focusChanged(!1));
                            },
                            onFocusLost: function (e) {
                                a.inFocus && ((a.inFocus = !1), this.focusChanged(!0));
                            },
                            focusChanged: function (e) {
                                if (null != this.whenFocusChangedListeners)
                                    for (var t = this.whenFocusChangedListeners, n = 0; n < t.length; ) {
                                        try {
                                            var a = t[n];
                                            a(e, t), -1 == Gb.indexOf(t, a) && --n;
                                        } catch (e) {
                                            if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                        }
                                        ++n;
                                    }
                            },
                            handleCollision: function (e, t) {
                                var n = e.typeID,
                                    s = t.otherActor.typeID;
                                if (a.NO_PHYSICS)
                                    var r = 1e6 + t.thisActor.groupID,
                                        A = 1e6 + t.otherActor.groupID;
                                else if (
                                    (null != t.thisShape ? (-1e3 == (r = t.thisShape.groupID) && null != (A = t.thisShape.getBody()) && (r = A.getUserData().groupID), (r = 1e6 + r)) : (r = 1e6 + t.thisActor.groupID), null != t.otherShape)
                                ) {
                                    if (-1e3 == (A = t.otherShape.groupID)) {
                                        var l = t.otherShape.getBody();
                                        null != l && (A = l.getUserData().groupID);
                                    }
                                    A = 1e6 + A;
                                } else A = 1e6 + t.otherActor.groupID;
                                if (null != this.collisionPairs) {
                                    l = e.ID;
                                    var o = this.collisionPairs.mH,
                                        i = o.mHash[(73856093 * l) & o.mMask];
                                    if (-1 == i) l = !1;
                                    else if ((o = o.mData)[i] == l) l = !0;
                                    else {
                                        var u = !1;
                                        for (i = o[i + 2]; -1 != i; ) {
                                            if (o[i] == l) {
                                                u = !0;
                                                break;
                                            }
                                            i = o[i + 2];
                                        }
                                        l = u;
                                    }
                                    if ((l || this.collisionPairs.set(e.ID, new wi()), (l = t.otherActor.ID), -1 == (i = (o = this.collisionPairs.mH).mHash[(73856093 * l) & o.mMask]))) l = !1;
                                    else if ((o = o.mData)[i] == l) l = !0;
                                    else {
                                        for (u = !1, i = o[i + 2]; -1 != i; ) {
                                            if (o[i] == l) {
                                                u = !0;
                                                break;
                                            }
                                            i = o[i + 2];
                                        }
                                        l = u;
                                    }
                                    if ((l || this.collisionPairs.set(t.otherActor.ID, new wi()), (l = this.collisionPairs), (i = e.ID), -1 == (o = (u = l.mH).mHash[(73856093 * i) & u.mMask]))) i = -2147483648;
                                    else if ((u = u.mData)[o] == i) i = u[o + 1];
                                    else {
                                        var g = -2147483648;
                                        for (o = u[o + 2]; -1 != o; ) {
                                            if (u[o] == i) {
                                                g = u[o + 1];
                                                break;
                                            }
                                            o = u[o + 2];
                                        }
                                        i = g;
                                    }
                                    if ((-2147483648 == i ? null : l.mVals[i]).h.hasOwnProperty(t.otherActor.ID)) l = !0;
                                    else {
                                        if (((l = this.collisionPairs), (i = t.otherActor.ID), -1 == (o = (u = l.mH).mHash[(73856093 * i) & u.mMask]))) i = -2147483648;
                                        else if ((u = u.mData)[o] == i) i = u[o + 1];
                                        else {
                                            for (g = -2147483648, o = u[o + 2]; -1 != o; ) {
                                                if (u[o] == i) {
                                                    g = u[o + 1];
                                                    break;
                                                }
                                                o = u[o + 2];
                                            }
                                            i = g;
                                        }
                                        l = (-2147483648 == i ? null : l.mVals[i]).h.hasOwnProperty(e.ID);
                                    }
                                    if (l) return;
                                }
                                if (-1 < n || -1 < s) {
                                    if (!t.otherCollidedWithTerrain && this.collisionListeners.h.hasOwnProperty(n) && this.collisionListeners.h[n].h.hasOwnProperty(s)) {
                                        for (l = this.collisionListeners.h[n].h[s], i = 0; i < l.length; ) {
                                            try {
                                                var m = l[i];
                                                m(t, l), -1 == Gb.indexOf(l, m) && --i;
                                            } catch (e) {
                                                if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                            }
                                            ++i;
                                        }
                                        0 == l.length && this.collisionListeners.h[n].remove(s);
                                    }
                                    if (n != s && this.collisionListeners.h.hasOwnProperty(s) && this.collisionListeners.h[s].h.hasOwnProperty(n)) {
                                        for (m = this.collisionListeners.h[s].h[n], l = t.switchData(ov.get()), i = 0; i < m.length; ) {
                                            try {
                                                var d = m[i];
                                                d(l, m), -1 == Gb.indexOf(m, d) && --i;
                                            } catch (e) {
                                                if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                            }
                                            ++i;
                                        }
                                        0 == m.length && this.collisionListeners.h[s].remove(n);
                                    }
                                }
                                if (0 < r && 0 < A) {
                                    if (this.collisionListeners.h.hasOwnProperty(r) && this.collisionListeners.h[r].h.hasOwnProperty(A)) {
                                        for (n = this.collisionListeners.h[r].h[A], s = 0; s < n.length; ) {
                                            try {
                                                var c = n[s];
                                                c(t, n), -1 == Gb.indexOf(n, c) && --s;
                                            } catch (e) {
                                                if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                            }
                                            ++s;
                                        }
                                        0 == n.length && this.collisionListeners.h[r].remove(A);
                                    }
                                    if (r != A && this.collisionListeners.h.hasOwnProperty(A) && this.collisionListeners.h[A].h.hasOwnProperty(r)) {
                                        for (c = this.collisionListeners.h[A].h[r], n = t.switchData(ov.get()), s = 0; s < c.length; ) {
                                            try {
                                                var p = c[s];
                                                p(n, c), -1 == Gb.indexOf(c, p) && --s;
                                            } catch (e) {
                                                if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                            }
                                            ++s;
                                        }
                                        0 == c.length && this.collisionListeners.h[A].remove(r);
                                    }
                                }
                                if (null != this.collisionPairs) {
                                    if (((p = this.collisionPairs), (r = e.ID), -1 == (c = (A = p.mH).mHash[(73856093 * r) & A.mMask]))) r = -2147483648;
                                    else if ((A = A.mData)[c] == r) r = A[c + 1];
                                    else {
                                        for (n = -2147483648, c = A[c + 2]; -1 != c; ) {
                                            if (A[c] == r) {
                                                n = A[c + 1];
                                                break;
                                            }
                                            c = A[c + 2];
                                        }
                                        r = n;
                                    }
                                    if ((((-2147483648 == r ? null : p.mVals[r]).h[t.otherActor.ID] = !1), (p = this.collisionPairs), (t = t.otherActor.ID), -1 == (r = (c = p.mH).mHash[(73856093 * t) & c.mMask]))) t = -2147483648;
                                    else if ((c = c.mData)[r] == t) t = c[r + 1];
                                    else {
                                        for (A = -2147483648, r = c[r + 2]; -1 != r; ) {
                                            if (c[r] == t) {
                                                A = c[r + 1];
                                                break;
                                            }
                                            r = c[r + 2];
                                        }
                                        t = A;
                                    }
                                    (-2147483648 == t ? null : p.mVals[t]).h[e.ID] = !1;
                                }
                            },
                            soundFinished: function (e) {
                                var t = d.__cast(this.channels[e], zr);
                                if (null != this.soundListeners) {
                                    var n = this.soundListeners.h[t.currentClip.__id__];
                                    if (((t.currentSound = null), null != n))
                                        for (t = 0; t < n.length; ) {
                                            try {
                                                var a = n[t];
                                                a(n), -1 == Gb.indexOf(n, a) && --t;
                                            } catch (e) {
                                                if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                            }
                                            ++t;
                                        }
                                } else t.currentSound = null;
                                if (null != this.channelListeners && null != (e = this.channelListeners.h[e]))
                                    for (n = 0; n < e.length; ) {
                                        try {
                                            var s = e[n];
                                            s(e), -1 == Gb.indexOf(e, s) && --n;
                                        } catch (e) {
                                            if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                        }
                                        ++n;
                                    }
                            },
                            addTask: function (e) {
                                this.tasks.push(e);
                            },
                            removeTask: function (e) {
                                Qc.remove(this.tasks, e);
                            },
                            shakeScreen: function (e, t) {
                                (this.shakeTimer = (a.MS_PER_SEC * t) | 0), (this.isShaking = !0), (this.shakeIntensity = e);
                            },
                            stopShakingScreen: function () {
                                (this.shakeTimer = 0), (this.isShaking = !1), this.master.set_x(0), this.master.set_y(0);
                            },
                            cameraFollow: function (e, t, n) {
                                this.moveCamera(e.colX + e.cacheWidth / 2, e.colY + e.cacheHeight / 2);
                            },
                            moveCamera: function (e, t) {
                                this.camera.setLocation(e, t),
                                    (a.cameraX = this.camera.realX - a.screenWidthHalf),
                                    (a.cameraY = this.camera.realY - a.screenHeightHalf),
                                    a.limitCameraToScene && ((a.cameraX = Math.max(0, Math.min(a.sceneWidth - a.screenWidth, a.cameraX))), (a.cameraY = Math.max(0, Math.min(a.sceneHeight - a.screenHeight, a.cameraY)))),
                                    (a.cameraX *= a.SCALE),
                                    (a.cameraY *= a.SCALE),
                                    1 != this.zoomMultiplier && this.isHUDZoomable && (this.hudLayer.set_x(-h.getScreenX()), this.hudLayer.set_y(-h.getScreenY()));
                            },
                            setZoom: function (e, t) {
                                null == t && (t = !0),
                                    0 >= e ||
                                        this.zoomMultiplier == e ||
                                        ((this.zoomMultiplier = e),
                                        this.root.set_scaleX((a.screenScaleX = e * a.unzoomedScaleX)),
                                        this.root.set_scaleY((a.screenScaleY = e * a.unzoomedScaleY)),
                                        t &&
                                            ((a.screenWidth = ((1 / e) * ke.logicalWidth) | 0),
                                            (a.screenWidthHalf = (a.screenWidth / 2) | 0),
                                            (a.screenHeight = ((1 / e) * ke.logicalHeight) | 0),
                                            (a.screenHeightHalf = (a.screenHeight / 2) | 0)),
                                        this.setColorBackground(this.scene.colorBackground),
                                        this.root.set_scrollRect(new xe(0, 0, a.screenWidth * a.SCALE, a.screenHeight * a.SCALE)),
                                        this.moveCamera(this.camera.realX, this.camera.realY),
                                        this.isHUDZoomable || (this.hudLayer.set_scaleX(1 / e), this.hudLayer.set_scaleY(1 / e)));
                            },
                            pause: function () {
                                if (!this.isTransitioning()) {
                                    if (((a.paused = !0), 0 != this.allActors.mSize))
                                        for (var e = this.allActors.keys(); e.hasNext(); ) {
                                            var t = e.next(),
                                                n = this.allActors,
                                                s = n.mH,
                                                r = s.mHash[(73856093 * t) & s.mMask];
                                            if (-1 == r) t = -2147483648;
                                            else if ((s = s.mData)[r] == t) t = s[r + 1];
                                            else {
                                                var A = -2147483648;
                                                for (r = s[r + 2]; -1 != r; ) {
                                                    if (s[r] == t) {
                                                        A = s[r + 1];
                                                        break;
                                                    }
                                                    r = s[r + 2];
                                                }
                                                t = A;
                                            }
                                            null != (n = -2147483648 == t ? null : n.mVals[t]) && n.pause();
                                        }
                                    for (e = this.whenPausedListeners, n = 0; n < e.length; ) {
                                        try {
                                            var l = e[n];
                                            l(!0, e), -1 == Gb.indexOf(e, l) && --n;
                                        } catch (e) {
                                            if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                        }
                                        ++n;
                                    }
                                }
                            },
                            unpause: function () {
                                if (((a.paused = !1), 0 != this.allActors.mSize))
                                    for (var e = this.allActors.keys(); e.hasNext(); ) {
                                        var t = e.next(),
                                            n = this.allActors,
                                            s = n.mH,
                                            r = s.mHash[(73856093 * t) & s.mMask];
                                        if (-1 == r) t = -2147483648;
                                        else if ((s = s.mData)[r] == t) t = s[r + 1];
                                        else {
                                            var A = -2147483648;
                                            for (r = s[r + 2]; -1 != r; ) {
                                                if (s[r] == t) {
                                                    A = s[r + 1];
                                                    break;
                                                }
                                                r = s[r + 2];
                                            }
                                            t = A;
                                        }
                                        null != (n = -2147483648 == t ? null : n.mVals[t]) && n.unpause();
                                    }
                                for (e = this.whenPausedListeners, n = 0; n < e.length; ) {
                                    try {
                                        var l = e[n];
                                        l(!1, e), -1 == Gb.indexOf(e, l) && --n;
                                    } catch (e) {
                                        if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                    }
                                    ++n;
                                }
                            },
                            isPaused: function () {
                                return a.paused;
                            },
                            draw: function () {
                                for (var e = 0, t = this.interactiveLayers; e < t.length; ) {
                                    var n = t[e];
                                    ++e, n.overlay.get_graphics().clear();
                                }
                                if (
                                    (this.hudLayer.overlay.get_graphics().clear(),
                                    (this.g.graphics = this.transitionLayer.get_graphics()),
                                    this.g.graphics.clear(),
                                    ((e = this.g).alpha = 1),
                                    (e.strokeSize = 0),
                                    (e.fillColor = 0),
                                    (e.strokeColor = 0),
                                    (e.font = e.defaultFont),
                                    0 != this.allActors.mSize)
                                )
                                    for (e = this.allActors.iterator(); e.hasNext(); )
                                        if (0 < (t = e.next()).whenDrawingListeners.length && null != t.layer) {
                                            if (((this.g.graphics = t.layer.overlay.get_graphics()), ((n = this.g).drawActor = !0), (n.actor = t), t.smoothMove)) {
                                                var s = t.drawY - Math.floor(t.cacheHeight / 2) - t.currOffset.y;
                                                (n.x = (t.drawX - Math.floor(t.cacheWidth / 2) - t.currOffset.x) * n.scaleX), (n.y = s * n.scaleY);
                                            } else (n.x = t.colX * n.scaleX), (n.y = t.colY * n.scaleY);
                                            for ((n = this.g).alpha = 1, n.strokeSize = 0, n.fillColor = 0, n.strokeColor = 0, n.font = n.defaultFont, t = t.whenDrawingListeners, n = this.g, s = 0; s < t.length; ) {
                                                try {
                                                    var A = t[s];
                                                    A(n, 0, 0, t), -1 == Gb.indexOf(t, A) && --s;
                                                } catch (e) {
                                                    if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                                }
                                                ++s;
                                            }
                                        }
                                for (A = 0, e = this.interactiveLayers; A < e.length; )
                                    (t = e[A]), ++A, (t.cameraMoved || this.tileUpdated) && (t.tiles.draw((a.cameraX * t.scrollFactorX) | 0, (a.cameraY * t.scrollFactorY) | 0), (t.cameraMoved = !1));
                                for (
                                    this.tileUpdated = !1,
                                        this.g.graphics = this.transitionLayer.get_graphics(),
                                        (A = this.g).drawActor = !1,
                                        A.actor = null,
                                        A.x = 0,
                                        A.y = 0,
                                        (A = this.g).alpha = 1,
                                        A.strokeSize = 0,
                                        A.fillColor = 0,
                                        A.strokeColor = 0,
                                        A.font = A.defaultFont,
                                        A = this.whenDrawingListeners,
                                        e = this.g,
                                        t = 0;
                                    t < A.length;

                                ) {
                                    try {
                                        var l = A[t];
                                        l(e, 0, 0, A), -1 == Gb.indexOf(A, l) && --t;
                                    } catch (e) {
                                        if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                    }
                                    ++t;
                                }
                                r.visitStringCache(),
                                    null != this.leave && this.leave.isActive() ? this.leave.draw(null) : null != this.enter && this.enter.isActive() && this.enter.draw(null),
                                    null != this.shaders && 0 < this.shaders.length && this.shaders[0].capture();
                            },
                            getValue: function (e, t) {
                                return this.behaviors.getAttribute(e, t);
                            },
                            setValue: function (e, t, n) {
                                this.behaviors.setAttribute(e, t, n);
                            },
                            say: function (e, t, n) {
                                return this.behaviors.call2(e, t, n);
                            },
                            shout: function (e, t) {
                                return this.behaviors.call(e, t);
                            },
                            getActor: function (e) {
                                var t = this.allActors,
                                    n = t.mH,
                                    a = n.mHash[(73856093 * e) & n.mMask];
                                if (-1 == a) e = -2147483648;
                                else if ((n = n.mData)[a] == e) e = n[a + 1];
                                else {
                                    var s = -2147483648;
                                    for (a = n[a + 2]; -1 != a; ) {
                                        if (n[a] == e) {
                                            s = n[a + 1];
                                            break;
                                        }
                                        a = n[a + 2];
                                    }
                                    e = s;
                                }
                                return -2147483648 == e ? null : t.mVals[e];
                            },
                            getActorsOfType: function (e) {
                                return null == e ? [] : null != this.actorsOfType.h[e.ID] ? this.actorsOfType.h[e.ID] : [];
                            },
                            getRecycledActorsOfType: function (e) {
                                return this.recycledActorsOfType.h[e.ID];
                            },
                            getLayer: function (e, t) {
                                return 0 == e ? this.getLayerById(g.parseInt(t)) : this.getLayerByName(t);
                            },
                            getLayerById: function (e, t) {
                                if ((null == t && (t = !0), -1 == e)) return null;
                                var n = a.engine.layers,
                                    s = n.mH,
                                    r = s.mHash[(73856093 * e) & s.mMask];
                                if (-1 == r) e = -2147483648;
                                else if ((s = s.mData)[r] == e) e = s[r + 1];
                                else {
                                    var A = -2147483648;
                                    for (r = s[r + 2]; -1 != r; ) {
                                        if (s[r] == e) {
                                            A = s[r + 1];
                                            break;
                                        }
                                        r = s[r + 2];
                                    }
                                    e = A;
                                }
                                return null == (n = -2147483648 == e ? null : n.mVals[e]) && t && (n = this.topLayer), n;
                            },
                            getLayerByName: function (t, n) {
                                null == n && (n = !0);
                                var s = a.engine.layersByName;
                                return null == (t = null != e[t] ? s.getReserved(t) : s.h[t]) && n && (t = this.topLayer), t;
                            },
                            getLayerByOrder: function (e) {
                                switch (e) {
                                    case 0:
                                        e = this.topLayer;
                                        break;
                                    case 1:
                                        e = this.middleLayer;
                                        break;
                                    case 2:
                                        e = this.bottomLayer;
                                        break;
                                    default:
                                        e = this.topLayer;
                                }
                                return e;
                            },
                            sendToBack: function (e) {
                                e.isHUD || this.moveActorToLayer(e, this.bottomLayer);
                            },
                            sendBackward: function (e) {
                                if (!e.isHUD)
                                    for (var t = e.layer.order; this.layersToDraw.h.hasOwnProperty(--t); )
                                        if (this.layersToDraw.h[t] instanceof Uv) {
                                            this.moveActorToLayer(e, this.layersToDraw.h[t]);
                                            break;
                                        }
                            },
                            bringToFront: function (e) {
                                e.isHUD || this.moveActorToLayer(e, this.topLayer);
                            },
                            bringForward: function (e) {
                                if (!e.isHUD)
                                    for (var t = e.layer.order; this.layersToDraw.h.hasOwnProperty(++t); )
                                        if (this.layersToDraw.h[t] instanceof Uv) {
                                            this.moveActorToLayer(e, this.layersToDraw.h[t]);
                                            break;
                                        }
                            },
                            getNumberOfActorsWithinLayer: function (e) {
                                return e instanceof Uv ? d.__cast(e, Uv).actorContainer.get_numChildren() : 0;
                            },
                            getNumberOfLayers: function () {
                                return this.master.get_numChildren();
                            },
                            getOrderOfLayer: function (e) {
                                return e.order;
                            },
                            moveLayerToOrder: function (e, t) {
                                0 > t && (t = 0), t > this.master.get_numChildren() - 1 && (t = this.master.get_numChildren() - 1), e.order != t && (this.master.setChildIndex(e, t), this.refreshLayers());
                            },
                            getNextLayerID: function () {
                                for (var e = -1, t = this.layers.iterator(); t.hasNext(); ) {
                                    var n = t.next();
                                    e = 0 | Math.max(e, n.ID);
                                }
                                return e + 1;
                            },
                            insertLayer: function (t, n) {
                                this.master.addChildAt(t, n), t instanceof nD ? this.backgroundLayers.push(d.__cast(t, nD)) : t instanceof Uv && this.interactiveLayers.push(d.__cast(t, Uv)), this.layers.set(t.ID, t), (n = t.layerName);
                                var a = this.layersByName;
                                null != e[n] ? a.setReserved(n, t) : (a.h[n] = t), this.refreshLayers();
                            },
                            removeLayer: function (e) {
                                this.master.removeChild(e),
                                    e instanceof nD ? Qc.remove(this.backgroundLayers, d.__cast(e, nD)) : e instanceof Uv && Qc.remove(this.interactiveLayers, d.__cast(e, Uv)),
                                    this.layers.unset(e.ID),
                                    this.layersByName.remove(e.layerName),
                                    this.refreshLayers();
                            },
                            refreshLayers: function () {
                                for (var e = !1, t = !1, n = 0, a = 0, s = this.master.get_numChildren(); a < s; ) {
                                    var r = a++,
                                        A = d.__cast(this.master.getChildAt(r), sQ);
                                    (this.layersToDraw.h[r] = A),
                                        (A.order = r),
                                        A instanceof Uv && (e || ((e = !0), (this.bottomLayer = A)), t || n != Math.floor(this.interactiveLayers.length / 2) || ((t = !0), (this.middleLayer = A)), (this.topLayer = A), ++n);
                                }
                            },
                            getPhysicalWidth: function () {
                                return this.physicalWidth;
                            },
                            getPhysicalHeight: function () {
                                return this.physicalHeight;
                            },
                            enableGlobalSleeping: function () {
                                this.world.m_allowSleep = !0;
                            },
                            disableGlobalSleeping: function () {
                                this.world.m_allowSleep = !1;
                            },
                            getGroup: function (e, t) {
                                return -1e3 == e && null != t ? ((e = this.groups), (t = t.getGroupID()), e.h[t]) : this.groups.h[e];
                            },
                            getGroupByName: function (t) {
                                var n = this.reverseGroups;
                                return null == (t = null != e[t] ? n.getReserved(t) : n.h[t]) ? this.groups.h[3] : t;
                            },
                            nextJointID: function () {
                                for (var e = -1, t = this.joints.iterator(); t.hasNext(); ) {
                                    var n = t.next();
                                    null != n && (e = 0 | Math.max(e, n.ID));
                                }
                                return e + 1;
                            },
                            addJoint: function (e) {
                                var t = this.nextJointID();
                                (e.ID = t), (this.joints.h[t] = e);
                            },
                            getJoint: function (e) {
                                return this.joints.h[e];
                            },
                            destroyJoint: function (e) {
                                this.joints.remove(e.ID), this.world.destroyJoint(e);
                            },
                            createStickJoint: function (e, t, n, a, s, r) {
                                null == r && (r = 0), null == s && (s = 0), null == a && (a = !1), null == n && (n = -1);
                                var A = e.getLocalCenter(),
                                    l = t.getLocalCenter();
                                0 == e.getType() && ((A.x = e.getUserData().getPhysicsWidth() / 2), (A.y = e.getUserData().getPhysicsHeight() / 2)),
                                    0 == t.getType() && ((l.x = t.getUserData().getPhysicsWidth() / 2), (l.y = t.getUserData().getPhysicsHeight() / 2)),
                                    (A = e.getWorldPoint(A)),
                                    (l = t.getWorldPoint(l));
                                var o = new LV();
                                return (
                                    o.initialize(e, t, A, l),
                                    (o.collideConnected = a),
                                    (o.dampingRatio = s),
                                    (o.frequencyHz = r),
                                    (e = this.world.createJoint(o)),
                                    -1 == n ? this.addJoint(e) : ((this.joints.h[n] = e), (e.ID = n)),
                                    d.__cast(e, wW)
                                );
                            },
                            createCustomStickJoint: function (e, t, n, s, r, A) {
                                return (
                                    (t = new td(t, n)),
                                    (r = new td(r, A)),
                                    (t.x = a.toPhysicalUnits(t.x)),
                                    (t.y = a.toPhysicalUnits(t.y)),
                                    (r.x = a.toPhysicalUnits(r.x)),
                                    (r.y = a.toPhysicalUnits(r.y)),
                                    (t = e.getWorldPoint(t)),
                                    (r = s.getWorldPoint(r)),
                                    (A = new LV()).initialize(e, s, t, r),
                                    (e = this.world.createJoint(A)),
                                    this.addJoint(e),
                                    d.__cast(e, wW)
                                );
                            },
                            createHingeJoint: function (e, t, n, s, r, A, l, o, i, u, g) {
                                null == g && (g = 0),
                                    null == u && (u = 0),
                                    null == i && (i = 0),
                                    null == o && (o = 0),
                                    null == l && (l = !1),
                                    null == A && (A = !1),
                                    null == r && (r = !1),
                                    null == s && (s = -1),
                                    null == t && (t = this.world.m_groundBody),
                                    null == n && (n = e.getLocalCenter());
                                var m = new MV();
                                return (
                                    (m.bodyA = e),
                                    (m.bodyB = t),
                                    (n.x = a.toPhysicalUnits(n.x)),
                                    (n.y = a.toPhysicalUnits(n.y)),
                                    (m.localAnchorA = n),
                                    (m.localAnchorB = t.getLocalPoint(e.getWorldPoint(n))),
                                    (m.collideConnected = r),
                                    (m.enableLimit = A),
                                    (m.enableMotor = l),
                                    (m.lowerAngle = o),
                                    (m.upperAngle = i),
                                    (m.maxMotorTorque = u),
                                    (m.motorSpeed = g),
                                    (e = this.world.createJoint(m)),
                                    -1 == s ? this.addJoint(e) : ((this.joints.h[s] = e), (e.ID = s)),
                                    d.__cast(e, QP)
                                );
                            },
                            createSlidingJoint: function (e, t, n, s, r, A, l, o, i, u, g) {
                                null == g && (g = 0),
                                    null == u && (u = 0),
                                    null == i && (i = 0),
                                    null == o && (o = 0),
                                    null == l && (l = !1),
                                    null == A && (A = !1),
                                    null == r && (r = !1),
                                    null == s && (s = -1),
                                    null == t && (t = this.world.m_groundBody),
                                    null == n && (n = new td(1, 0)),
                                    n.normalize();
                                var m = e.getWorldCenter(),
                                    c = t.getWorldCenter();
                                return (
                                    0 == e.getType() && null != e.getUserData() && ((m.x = e.getUserData().getPhysicsWidth() / 2), (m.y = e.getUserData().getPhysicsHeight() / 2), (m = e.getWorldPoint(m))),
                                    0 == t.getType() && null != t.getUserData() && ((c.x = t.getUserData().getPhysicsWidth() / 2), (c.y = t.getUserData().getPhysicsHeight() / 2), t.getWorldPoint(c)),
                                    (c = new NV()).initialize(e, t, m, n),
                                    (c.collideConnected = r),
                                    (c.enableLimit = A),
                                    (c.enableMotor = l),
                                    (c.lowerTranslation = a.toPhysicalUnits(o)),
                                    (c.upperTranslation = a.toPhysicalUnits(i)),
                                    (c.maxMotorForce = u),
                                    (c.motorSpeed = a.toPhysicalUnits(g)),
                                    (e = this.world.createJoint(c)),
                                    -1 == s ? this.addJoint(e) : ((this.joints.h[s] = e), (e.ID = s)),
                                    d.__cast(e, b3)
                                );
                            },
                            createRegion: function (e, t, n, a) {
                                null == a && (a = !1);
                                var s = [];
                                return s.push(n), (n = new rz(this, e, t, s)), a && n.setXY(e + n.regionWidth / 2, t + n.regionHeight / 2), this.addRegion(n), n;
                            },
                            createBoxRegion: function (e, t, n, s) {
                                if (a.NO_PHYSICS) return (e = new rz(this, e, t, [], new xe(0, 0, n, s))), this.addRegion(e), e;
                                (n = a.toPhysicalUnits(n)), (s = a.toPhysicalUnits(s));
                                var r = new ct();
                                return r.setAsBox(n / 2, s / 2), this.createRegion(e, t, r, !0);
                            },
                            createCircularRegion: function (e, t, n) {
                                if (a.NO_PHYSICS) return (e = new rz(this, e, t, [], new xe(0, 0, 2 * n, 2 * n))), this.addRegion(e), e;
                                n = a.toPhysicalUnits(n);
                                var s = new Rw();
                                return (s.m_radius = n), this.createRegion(e, t, s, !0);
                            },
                            addRegion: function (e) {
                                -1 == e.ID && (e.ID = this.nextRegionID()), this.regions.set(e.ID, e), a.NO_PHYSICS && this.groups.h[-2].addChild(e);
                            },
                            removeRegion: function (e) {
                                (e = this.getRegion(e)), this.regions.unset(e.ID), e.destroy(), a.NO_PHYSICS && this.groups.h[-2].removeChild(e);
                            },
                            getRegion: function (e) {
                                var t = this.regions,
                                    n = t.mH,
                                    a = n.mHash[(73856093 * e) & n.mMask];
                                if (-1 == a) e = -2147483648;
                                else if ((n = n.mData)[a] == e) e = n[a + 1];
                                else {
                                    var s = -2147483648;
                                    for (a = n[a + 2]; -1 != a; ) {
                                        if (n[a] == e) {
                                            s = n[a + 1];
                                            break;
                                        }
                                        a = n[a + 2];
                                    }
                                    e = s;
                                }
                                return -2147483648 == e ? null : t.mVals[e];
                            },
                            getRegions: function () {
                                return this.regions;
                            },
                            nextRegionID: function () {
                                for (var e = -1, t = this.regions.iterator(); t.hasNext(); ) {
                                    var n = t.next();
                                    null != n && (e = 0 | Math.max(e, n.ID));
                                }
                                return e + 1;
                            },
                            isInRegion: function (e, t) {
                                if (null != t) {
                                    var n = this.regions,
                                        a = t.getID(),
                                        s = n.mH,
                                        r = s.mHash[(73856093 * a) & s.mMask];
                                    if (-1 == r) a = -2147483648;
                                    else if ((s = s.mData)[r] == a) a = s[r + 1];
                                    else {
                                        var A = -2147483648;
                                        for (r = s[r + 2]; -1 != r; ) {
                                            if (s[r] == a) {
                                                A = s[r + 1];
                                                break;
                                            }
                                            r = s[r + 2];
                                        }
                                        a = A;
                                    }
                                    n = null != (-2147483648 == a ? null : n.mVals[a]);
                                } else n = !1;
                                return !!n && t.containsActor(e);
                            },
                            createTerrainRegion: function (e, t, n, a, s) {
                                null == s && (s = 1), null == a && (a = !1);
                                var r = [];
                                return r.push(n), (n = new yU(this, e, t, r, s)), a && n.setXY(e + n.regionWidth / 2, t + n.regionHeight / 2), this.addTerrainRegion(n), n;
                            },
                            createBoxTerrainRegion: function (e, t, n, s, r) {
                                null == r && (r = 1), (n = a.toPhysicalUnits(n)), (s = a.toPhysicalUnits(s));
                                var A = new ct();
                                return A.setAsBox(n / 2, s / 2), this.createTerrainRegion(e, t, A, !0, r);
                            },
                            createCircularTerrainRegion: function (e, t, n, s) {
                                null == s && (s = 1), (n = a.toPhysicalUnits(n));
                                var r = new Rw();
                                return (r.m_radius = n), this.createTerrainRegion(e, t, r, !0, s);
                            },
                            addTerrainRegion: function (e) {
                                -1 == e.ID && (e.ID = this.nextTerrainRegionID()), (this.terrainRegions.h[e.ID] = e);
                            },
                            removeTerrainRegion: function (e) {
                                var t = this.getTerrainRegion(e);
                                this.terrainRegions.remove(e), t.destroy();
                            },
                            getTerrainRegion: function (e) {
                                return this.terrainRegions.h[e];
                            },
                            getTerrainRegions: function () {
                                return this.terrainRegions;
                            },
                            nextTerrainRegionID: function () {
                                for (var e = -1, t = this.terrainRegions.iterator(); t.hasNext(); ) {
                                    var n = t.next();
                                    null != n && (e = 0 | Math.max(e, n.ID));
                                }
                                return e + 1;
                            },
                            setGameAttribute: function (t, n) {
                                var a = this.gameAttributes;
                                null != e[t] ? a.setReserved(t, n) : (a.h[t] = n);
                            },
                            getGameAttribute: function (t) {
                                var n = this.gameAttributes;
                                return null != e[t] ? n.getReserved(t) : n.h[t];
                            },
                            setOffscreenTolerance: function (e, t, n, s) {
                                (a.paddingTop = e), (a.paddingLeft = t), (a.paddingBottom = n), (a.paddingRight = s);
                            },
                            setScrollFactor: function (e, t, n) {
                                this.setLayerScrollFactor(this.getLayerById(e), t, n);
                            },
                            setLayerScrollFactor: function (e, t, n) {
                                null == n && (n = t), (e.scrollFactorX = t), (e.scrollFactorY = n);
                            },
                            __class__: a,
                        });
                    var Hd = function () {};
                    (v["com.stencyl.Input"] = Hd),
                        (Hd.__name__ = "com.stencyl.Input"),
                        (Hd.resetStatics = function () {
                            a.stage.removeEventListener("keyDown", Hd.onKeyDown),
                                a.stage.removeEventListener("keyUp", Hd.onKeyUp),
                                a.stage.removeEventListener("mouseDown", Hd.onMouseDown),
                                a.stage.removeEventListener("mouseUp", Hd.onMouseUp),
                                a.stage.removeEventListener("mouseWheel", Hd.onMouseWheel),
                                $x.get_supportsTouchEvents() && (a.stage.removeEventListener("touchBegin", Hd.onTouchBegin), a.stage.removeEventListener("touchMove", Hd.onTouchMove), a.stage.removeEventListener("touchEnd", Hd.onTouchEnd)),
                                Hd._roxAgent.detach(),
                                a.engine.root.removeEventListener("rox_gesture_swipe", Hd.onSwipe),
                                (Hd.mouseX = 0),
                                (Hd.mouseY = 0),
                                (Hd.mouseDown = Hd.mousePressed = Hd.mouseReleased = Hd.mouseWheel = !1),
                                (Hd.rightMouseDown = Hd.rightMousePressed = Hd.rightMouseReleased = !1),
                                (Hd.middleMouseDown = Hd.middleMousePressed = Hd.middleMouseReleased = !1),
                                (Hd.mouseWheelDelta = 0),
                                (Hd.accelX = Hd.accelY = Hd.accelZ = 0),
                                (Hd.multiTouchPoints = null),
                                (Hd.numTouches = 0),
                                (Hd._swipeDirection = 0),
                                (Hd.swipedUp = Hd.swipedDown = Hd.swipedRight = Hd.swipedLeft = !1),
                                (Hd._roxAgent = null),
                                (Hd._enabled = !1),
                                (Hd._key = []),
                                (Hd._keyControlMap = new wi()),
                                (Hd._controlMap = new p()),
                                (Hd._controlsToReset = []);
                        }),
                        (Hd.define = function (t, n) {
                            var a = Hd._controlMap;
                            if (null == (null != e[t] ? a.getReserved(t) : a.h[t])) {
                                a = Hd._controlMap;
                                var s = new E5(t);
                                null != e[t] ? a.setReserved(t, s) : (a.h[t] = s);
                            } else Hd.unmapControl(t);
                            for (a = 0; a < n.length; ) (s = n[a]), ++a, Hd.mapKey(s, t);
                        }),
                        (Hd.mapKey = function (t, n) {
                            var a = Hd._keyControlMap.h[t];
                            null != a && (Qc.remove(a.keys, t), Hd.controlStateUpdated(a)), (a = Hd._controlMap), (n = null != e[n] ? a.getReserved(n) : a.h[n]).keys.push(t), Hd.controlStateUpdated(n), (Hd._keyControlMap.h[t] = n);
                        }),
                        (Hd.unmapKey = function (e) {
                            var t = Hd._keyControlMap.h[e];
                            null != t && (Qc.remove(t.keys, e), Hd.controlStateUpdated(t)), Hd._keyControlMap.remove(e);
                        }),
                        (Hd.getKeys = function (t) {
                            var n = Hd._controlMap;
                            return null != (t = null != e[t] ? n.getReserved(t) : n.h[t]) ? t.keys : null;
                        }),
                        (Hd.mapJoystickButton = function (e, t) {}),
                        (Hd.unmapJoystickButton = function (e) {}),
                        (Hd.unmapControl = function (t) {
                            var n = Hd._controlMap;
                            for (t = null != e[t] ? n.getReserved(t) : n.h[t]; 0 < t.keys.length; ) Hd._keyControlMap.remove(t.keys.pop());
                            t.down && Hd.controlReleased(t);
                        }),
                        (Hd.unmapKeyboardFromControl = function (t) {
                            var n = Hd._controlMap;
                            for (t = null != e[t] ? n.getReserved(t) : n.h[t]; 0 < t.keys.length; ) Hd._keyControlMap.remove(t.keys.pop());
                            Hd.controlStateUpdated(t);
                        }),
                        (Hd.unmapJoystickFromControl = function (t) {
                            var n = Hd._controlMap;
                            (t = null != e[t] ? n.getReserved(t) : n.h[t]), Hd.controlStateUpdated(t);
                        }),
                        (Hd.setJoySensitivity = function (e) {}),
                        (Hd.saveJoystickConfig = function (e) {}),
                        (Hd.loadJoystickConfig = function (e) {}),
                        (Hd.clearJoystickConfig = function () {}),
                        (Hd.loadInputConfig = function () {
                            for (var t = x.keys.keys(); t.hasNext(); ) {
                                var n = t.next(),
                                    a = x.keys;
                                a = null != e[n] ? a.getReserved(n) : a.h[n];
                                for (var s = [], r = 0; r < a.length; ) {
                                    var A = a[r];
                                    ++r, s.push(rj.keyFromName(A));
                                }
                                for (a = new E5(n), r = Hd._controlMap, null != e[n] ? r.setReserved(n, a) : (r.h[n] = a), a.keys = s, n = 0, s = a.keys; n < s.length; ) (r = s[n]), ++n, (Hd._keyControlMap.h[r] = a);
                            }
                        }),
                        (Hd.check = function (t) {
                            var n = Hd._controlMap;
                            return null != (t = null != e[t] ? n.getReserved(t) : n.h[t]) && t.down;
                        }),
                        (Hd.pressed = function (t) {
                            var n = Hd._controlMap;
                            return null != (t = null != e[t] ? n.getReserved(t) : n.h[t]) && t.pressed;
                        }),
                        (Hd.released = function (t) {
                            var n = Hd._controlMap;
                            return null != (t = null != e[t] ? n.getReserved(t) : n.h[t]) && t.released;
                        }),
                        (Hd.getButtonPressure = function (t) {
                            var n = Hd._controlMap;
                            return null != (t = null != e[t] ? n.getReserved(t) : n.h[t]) ? t.pressure : 0;
                        }),
                        (Hd.simulateKeyPress = function (t) {
                            var n = Hd._controlMap;
                            Hd.controlPressed(null != e[t] ? n.getReserved(t) : n.h[t], 1);
                        }),
                        (Hd.simulateKeyRelease = function (t) {
                            var n = Hd._controlMap;
                            Hd.controlReleased(null != e[t] ? n.getReserved(t) : n.h[t]);
                        }),
                        (Hd.enableJoystick = function () {}),
                        (Hd.enable = function () {
                            Hd._enabled ||
                                null == a.stage ||
                                (a.stage.addEventListener("keyDown", Hd.onKeyDown, !1, 2),
                                a.stage.addEventListener("keyUp", Hd.onKeyUp, !1, 2),
                                a.stage.addEventListener("mouseDown", Hd.onMouseDown, !1, 2),
                                a.stage.addEventListener("mouseUp", Hd.onMouseUp, !1, 2),
                                a.stage.addEventListener("mouseWheel", Hd.onMouseWheel, !1, 2),
                                $x.get_supportsTouchEvents() &&
                                    ((Hd.multiTouchPoints = new p()),
                                    ($x.inputMode = 2),
                                    a.stage.addEventListener("touchBegin", Hd.onTouchBegin),
                                    a.stage.addEventListener("touchMove", Hd.onTouchMove),
                                    a.stage.addEventListener("touchEnd", Hd.onTouchEnd)),
                                (Hd._roxAgent = new ie(a.engine.root, 2)),
                                a.engine.root.addEventListener("rox_gesture_swipe", Hd.onSwipe),
                                (Hd._swipeDirection = -1),
                                (Hd.swipedLeft = !1),
                                (Hd.swipedRight = !1),
                                (Hd.swipedUp = !1),
                                (Hd.swipedDown = !1),
                                (Hd.mouseX = 0),
                                (Hd.mouseY = 0),
                                (Hd.accelX = 0),
                                (Hd.accelY = 0),
                                (Hd.accelZ = 0),
                                (Hd.numTouches = 0),
                                (Hd._enabled = !0));
                        }),
                        (Hd.update = function () {
                            if (((Hd.swipedLeft = !1), (Hd.swipedRight = !1), (Hd.swipedUp = !1), (Hd.swipedDown = !1), -1 < Hd._swipeDirection)) {
                                switch (Hd._swipeDirection) {
                                    case 0:
                                        Hd.swipedLeft = !0;
                                        break;
                                    case 1:
                                        Hd.swipedRight = !0;
                                        break;
                                    case 2:
                                        Hd.swipedUp = !0;
                                        break;
                                    case 3:
                                        Hd.swipedDown = !0;
                                }
                                if (null != a.engine.whenSwipedListeners)
                                    for (var e = a.engine.whenSwipedListeners, t = 0; t < e.length; ) {
                                        try {
                                            var n = e[t];
                                            n(e), -1 == Gb.indexOf(e, n) && --t;
                                        } catch (e) {
                                            if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                        }
                                        ++t;
                                    }
                                Hd._swipeDirection = -1;
                            }
                            for (Hd.mouseX = (a.stage.get_mouseX() - a.screenOffsetX) / a.screenScaleX, Hd.mouseY = (a.stage.get_mouseY() - a.screenOffsetY) / a.screenScaleY, e = Hd._controlsToReset.length; 0 <= --e; )
                                ((t = Hd._controlsToReset.pop()).pressed = !1), (t.released = !1);
                            Hd.mousePressed && (Hd.mousePressed = !1),
                                Hd.mouseReleased && (Hd.mouseReleased = !1),
                                Hd.rightMousePressed && (Hd.rightMousePressed = !1),
                                Hd.rightMouseReleased && (Hd.rightMouseReleased = !1),
                                Hd.middleMousePressed && (Hd.middleMousePressed = !1),
                                Hd.middleMouseReleased && (Hd.middleMouseReleased = !1),
                                (Hd.mouseWheelDelta = 0);
                        }),
                        (Hd.onSwipe = function (e) {
                            (e = d.__cast(e.extra, wf)), Math.abs(e.x) <= Math.abs(e.y) ? (Hd._swipeDirection = 0 >= e.y ? 2 : 3) : Math.abs(e.x) > Math.abs(e.y) && (Hd._swipeDirection = 0 >= e.x ? 0 : 1);
                        }),
                        (Hd.controlPressed = function (t, n) {
                            if (null != t)
                                if (t.down) t.pressure = n;
                                else if (
                                    ((t.down = !0),
                                    (t.pressed = !0),
                                    (t.pressure = n),
                                    Hd._controlsToReset.push(t),
                                    a.engine.keyPollOccurred && ((t = t.name), (n = a.engine.whenKeyPressedListeners), null != (t = null != e[t] ? n.getReserved(t) : n.h[t])))
                                )
                                    for (n = 0; n < t.length; ) {
                                        try {
                                            var s = t[n];
                                            s(!0, !1, t), -1 == Gb.indexOf(t, s) && --n;
                                        } catch (e) {
                                            if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                        }
                                        ++n;
                                    }
                        }),
                        (Hd.controlReleased = function (t) {
                            if (null != t && t.down && ((t.down = !1), (t.released = !0), (t.pressure = 0), Hd._controlsToReset.push(t), a.engine.keyPollOccurred)) {
                                t = t.name;
                                var n = a.engine.whenKeyPressedListeners;
                                if (null != (t = null != e[t] ? n.getReserved(t) : n.h[t]))
                                    for (n = 0; n < t.length; ) {
                                        try {
                                            var s = t[n];
                                            s(!1, !0, t), -1 == Gb.indexOf(t, s) && --n;
                                        } catch (e) {
                                            if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                        }
                                        ++n;
                                    }
                            }
                        }),
                        (Hd.controlStateUpdated = function (e) {
                            for (var t = 0, n = 0, a = e.keys; n < a.length; ) {
                                var s = a[n];
                                ++n, Hd._key[s] && (t = 1);
                            }
                            (e.pressure = t), 0 < t && !e.down ? Hd.controlPressed(e, t) : 0 == t && e.down && Hd.controlReleased(e);
                        }),
                        (Hd.onKeyDown = function (e) {
                            var t = e.keyCode;
                            if (!(7e3 < t)) {
                                Hd._key[t] || ((Hd._key[t] = !0), Hd.controlPressed(Hd._keyControlMap.h[t], 1)), (t = a.engine.whenAnyKeyPressedListeners);
                                for (var n = 0; n < t.length; ) {
                                    try {
                                        var s = t[n];
                                        s(e, t), -1 == Gb.indexOf(t, s) && --n;
                                    } catch (e) {
                                        if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                    }
                                    ++n;
                                }
                            }
                        }),
                        (Hd.onKeyUp = function (e) {
                            var t = e.keyCode;
                            if (!(7e3 < t)) {
                                Hd._key[t] && ((Hd._key[t] = !1), Hd.controlReleased(Hd._keyControlMap.h[t])), (t = a.engine.whenAnyKeyReleasedListeners);
                                for (var n = 0; n < t.length; ) {
                                    try {
                                        var s = t[n];
                                        s(e, t), -1 == Gb.indexOf(t, s) && --n;
                                    } catch (e) {
                                        if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                    }
                                    ++n;
                                }
                            }
                        }),
                        (Hd.onMouseDown = function (e) {
                            (Hd.mouseX = (a.stage.get_mouseX() - a.screenOffsetX) / a.screenScaleX), (Hd.mouseY = (a.stage.get_mouseY() - a.screenOffsetY) / a.screenScaleY), Hd.mouseDown || ((Hd.mouseDown = !0), (Hd.mousePressed = !0));
                        }),
                        (Hd.onMouseUp = function (e) {
                            (Hd.mouseX = (a.stage.get_mouseX() - a.screenOffsetX) / a.screenScaleX), (Hd.mouseY = (a.stage.get_mouseY() - a.screenOffsetY) / a.screenScaleY), (Hd.mouseDown = !1), (Hd.mouseReleased = !0);
                        }),
                        (Hd.onRightMouseDown = function (e) {
                            Hd.rightMouseDown || ((Hd.rightMouseDown = !0), (Hd.rightMousePressed = !0));
                        }),
                        (Hd.onRightMouseUp = function (e) {
                            (Hd.rightMouseDown = !1), (Hd.rightMouseReleased = !0);
                        }),
                        (Hd.onMiddleMouseDown = function (e) {
                            Hd.middleMouseDown || ((Hd.middleMouseDown = !0), (Hd.middleMousePressed = !0));
                        }),
                        (Hd.onMiddleMouseUp = function (e) {
                            (Hd.middleMouseDown = !1), (Hd.middleMouseReleased = !0);
                        }),
                        (Hd.onMouseWheel = function (e) {
                            (Hd.mouseWheel = !0), (Hd.mouseWheelDelta = e.delta);
                        }),
                        (Hd.onTouchBegin = function (t) {
                            for (var n = a.engine.whenMTStartListeners, s = 0; s < n.length; ) {
                                try {
                                    var r = n[s];
                                    r(t, n), -1 == Gb.indexOf(n, r) && --s;
                                } catch (e) {
                                    if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                }
                                ++s;
                            }
                            (n = null == t.touchPointID ? "null" : "" + t.touchPointID), (s = Hd.multiTouchPoints), null != e[n] ? s.setReserved(n, t) : (s.h[n] = t), Hd.numTouches++;
                        }),
                        (Hd.onTouchMove = function (t) {
                            for (var n = a.engine.whenMTDragListeners, s = 0; s < n.length; ) {
                                try {
                                    var r = n[s];
                                    r(t, n), -1 == Gb.indexOf(n, r) && --s;
                                } catch (e) {
                                    if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                }
                                ++s;
                            }
                            (n = null == t.touchPointID ? "null" : "" + t.touchPointID), (s = Hd.multiTouchPoints), null != e[n] ? s.setReserved(n, t) : (s.h[n] = t);
                        }),
                        (Hd.onTouchEnd = function (e) {
                            for (var t = a.engine.whenMTEndListeners, n = 0; n < t.length; ) {
                                try {
                                    var s = t[n];
                                    s(e, t), -1 == Gb.indexOf(t, s) && --n;
                                } catch (e) {
                                    if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                }
                                ++n;
                            }
                            Hd.multiTouchPoints.remove(null == e.touchPointID ? "null" : "" + e.touchPointID), Hd.numTouches--;
                        });
                    var E5 = function (e) {
                        (this.pressure = 0), (this.name = e), (this.keys = []);
                    };
                    (v["com.stencyl.Control"] = E5), (E5.__name__ = "com.stencyl.Control"), (E5.prototype = { name: null, keys: null, pressed: null, released: null, down: null, pressure: null, __class__: E5 });
                    var rj = function () {};
                    (v["com.stencyl.Key"] = rj),
                        (rj.__name__ = "com.stencyl.Key"),
                        (rj.nameOfKey = function (e) {
                            if (97 <= e && 122 >= e) return String.fromCodePoint(e);
                            if (112 <= e && 126 >= e) return "F" + g.string(e - 111);
                            if (96 <= e && 105 >= e) return "NUMPAD " + g.string(e - 96);
                            switch (e) {
                                case 8:
                                    return "BACKSPACE";
                                case 9:
                                    return "TAB";
                                case 13:
                                    return "ENTER";
                                case 15:
                                    return "COMMAND";
                                case 16:
                                    return "SHIFT";
                                case 17:
                                    return "CONTROL";
                                case 20:
                                    return "CAPS LOCK";
                                case 27:
                                    return "ESCAPE";
                                case 32:
                                    return "SPACE";
                                case 33:
                                    return "PAGE UP";
                                case 34:
                                    return "PAGE DOWN";
                                case 35:
                                    return "END";
                                case 36:
                                    return "HOME";
                                case 37:
                                    return "LEFT";
                                case 38:
                                    return "UP";
                                case 39:
                                    return "RIGHT";
                                case 40:
                                    return "DOWN";
                                case 45:
                                    return "INSERT";
                                case 46:
                                    return "DELETE";
                                case 106:
                                    return "NUMPAD MULTIPLY";
                                case 107:
                                    return "NUMPAD ADD";
                                case 108:
                                    return "NUMPAD ENTER";
                                case 109:
                                    return "NUMPAD SUBTRACT";
                                case 110:
                                    return "NUMPAD DECIMAL";
                                case 111:
                                    return "NUMPAD DIVIDE";
                                default:
                                    return String.fromCodePoint(e);
                            }
                        }),
                        (rj.keyFromName = function (t) {
                            var n = rj.keyboardNameMap;
                            return null != e[t] ? n.getReserved(t) : n.h[t];
                        });
                    var wf = function (e, t) {
                        null == t && (t = 0), null == e && (e = 0), (this.x = e), (this.y = t);
                    };
                    (v["openfl.geom.Point"] = wf),
                        (wf.__name__ = "openfl.geom.Point"),
                        (wf.distance = function (e, t) {
                            var n = e.x - t.x;
                            return (e = e.y - t.y), Math.sqrt(n * n + e * e);
                        }),
                        (wf.interpolate = function (e, t, n) {
                            return new wf(t.x + n * (e.x - t.x), t.y + n * (e.y - t.y));
                        }),
                        (wf.polar = function (e, t) {
                            return new wf(e * Math.cos(t), e * Math.sin(t));
                        }),
                        (wf.prototype = {
                            x: null,
                            y: null,
                            add: function (e) {
                                return new wf(e.x + this.x, e.y + this.y);
                            },
                            clone: function () {
                                return new wf(this.x, this.y);
                            },
                            copyFrom: function (e) {
                                (this.x = e.x), (this.y = e.y);
                            },
                            equals: function (e) {
                                return null != e && e.x == this.x && e.y == this.y;
                            },
                            normalize: function (e) {
                                (0 == this.x && 0 == this.y) || ((e /= Math.sqrt(this.x * this.x + this.y * this.y)), (this.x *= e), (this.y *= e));
                            },
                            offset: function (e, t) {
                                (this.x += e), (this.y += t);
                            },
                            setTo: function (e, t) {
                                (this.x = e), (this.y = t);
                            },
                            subtract: function (e) {
                                return new wf(this.x - e.x, this.y - e.y);
                            },
                            toString: function () {
                                return "(x=" + this.x + ", y=" + this.y + ")";
                            },
                            __toLimeVector2: function () {
                                null == wf.__limeVector2 && (wf.__limeVector2 = new tz());
                                var e = wf.__limeVector2;
                                return (e.x = this.x), (e.y = this.y), wf.__limeVector2;
                            },
                            get_length: function () {
                                return Math.sqrt(this.x * this.x + this.y * this.y);
                            },
                            __class__: wf,
                            __properties__: { get_length: "get_length" },
                        });
                    var xe = function (e, t, n, a) {
                        null == a && (a = 0), null == n && (n = 0), null == t && (t = 0), null == e && (e = 0), (this.x = e), (this.y = t), (this.width = n), (this.height = a);
                    };
                    (v["openfl.geom.Rectangle"] = xe),
                        (xe.__name__ = "openfl.geom.Rectangle"),
                        (xe.prototype = {
                            height: null,
                            width: null,
                            x: null,
                            y: null,
                            clone: function () {
                                return new xe(this.x, this.y, this.width, this.height);
                            },
                            contains: function (e, t) {
                                return e >= this.x && t >= this.y && e < this.get_right() && t < this.get_bottom();
                            },
                            containsPoint: function (e) {
                                return this.contains(e.x, e.y);
                            },
                            containsRect: function (e) {
                                return 0 >= e.width || 0 >= e.height
                                    ? e.x > this.x && e.y > this.y && e.get_right() < this.get_right() && e.get_bottom() < this.get_bottom()
                                    : e.x >= this.x && e.y >= this.y && e.get_right() <= this.get_right() && e.get_bottom() <= this.get_bottom();
                            },
                            copyFrom: function (e) {
                                (this.x = e.x), (this.y = e.y), (this.width = e.width), (this.height = e.height);
                            },
                            equals: function (e) {
                                return e == this || (null != e && this.x == e.x && this.y == e.y && this.width == e.width && this.height == e.height);
                            },
                            inflate: function (e, t) {
                                (this.x -= e), (this.width += 2 * e), (this.y -= t), (this.height += 2 * t);
                            },
                            inflatePoint: function (e) {
                                this.inflate(e.x, e.y);
                            },
                            intersection: function (e) {
                                var t = this.x < e.x ? e.x : this.x,
                                    n = this.get_right() > e.get_right() ? e.get_right() : this.get_right();
                                if (n <= t) return new xe();
                                var a = this.y < e.y ? e.y : this.y;
                                return (e = this.get_bottom() > e.get_bottom() ? e.get_bottom() : this.get_bottom()) <= a ? new xe() : new xe(t, a, n - t, e - a);
                            },
                            intersects: function (e) {
                                var t = this.x < e.x ? e.x : this.x;
                                return !((this.get_right() > e.get_right() ? e.get_right() : this.get_right()) <= t) && ((t = this.y < e.y ? e.y : this.y), (this.get_bottom() > e.get_bottom() ? e.get_bottom() : this.get_bottom()) > t);
                            },
                            isEmpty: function () {
                                return 0 >= this.width || 0 >= this.height;
                            },
                            offset: function (e, t) {
                                (this.x += e), (this.y += t);
                            },
                            offsetPoint: function (e) {
                                (this.x += e.x), (this.y += e.y);
                            },
                            setEmpty: function () {
                                this.x = this.y = this.width = this.height = 0;
                            },
                            setTo: function (e, t, n, a) {
                                (this.x = e), (this.y = t), (this.width = n), (this.height = a);
                            },
                            toString: function () {
                                return "(x=" + this.x + ", y=" + this.y + ", width=" + this.width + ", height=" + this.height + ")";
                            },
                            union: function (e) {
                                if (0 == this.width || 0 == this.height) return e.clone();
                                if (0 == e.width || 0 == e.height) return this.clone();
                                var t = this.x > e.x ? e.x : this.x,
                                    n = this.get_right() < e.get_right() ? e.get_right() : this.get_right(),
                                    a = this.y > e.y ? e.y : this.y;
                                return (e = this.get_bottom() < e.get_bottom() ? e.get_bottom() : this.get_bottom()), new xe(t, a, n - t, e - a);
                            },
                            __contract: function (e, t, n, a) {
                                if (0 != this.width || 0 != this.height) {
                                    var s = 0,
                                        r = 0,
                                        A = 0,
                                        l = 0;
                                    this.x < e && (s = e - this.x),
                                        this.y < t && (r = t - this.y),
                                        this.get_right() > e + n && (A = e + n - this.get_right()),
                                        this.get_bottom() > t + a && (l = t + a - this.get_bottom()),
                                        (this.x += s),
                                        (this.y += r),
                                        (this.width += A - s),
                                        (this.height += l - r);
                                }
                            },
                            __expand: function (e, t, n, a) {
                                if (0 == this.width && 0 == this.height) (this.x = e), (this.y = t), (this.width = n), (this.height = a);
                                else {
                                    var s = this.get_right(),
                                        r = this.get_bottom();
                                    this.x > e && ((this.x = e), (this.width = s - e)), this.y > t && ((this.y = t), (this.height = r - t)), s < e + n && (this.width = e + n - this.x), r < t + a && (this.height = t + a - this.y);
                                }
                            },
                            __toLimeRectangle: function () {
                                return null == xe.__limeRectangle && (xe.__limeRectangle = new Fw()), xe.__limeRectangle.setTo(this.x, this.y, this.width, this.height), xe.__limeRectangle;
                            },
                            __transform: function (e, t) {
                                var n = t.a * this.x + t.c * this.y,
                                    a = n,
                                    s = t.b * this.x + t.d * this.y,
                                    r = s,
                                    A = t.a * (this.x + this.width) + t.c * this.y,
                                    l = t.b * (this.x + this.width) + t.d * this.y;
                                A < n && (n = A),
                                    l < s && (s = l),
                                    A > a && (a = A),
                                    l > r && (r = l),
                                    (A = t.a * (this.x + this.width) + t.c * (this.y + this.height)) < n && (n = A),
                                    (l = t.b * (this.x + this.width) + t.d * (this.y + this.height)) < s && (s = l),
                                    A > a && (a = A),
                                    l > r && (r = l),
                                    (A = t.a * this.x + t.c * (this.y + this.height)) < n && (n = A),
                                    (l = t.b * this.x + t.d * (this.y + this.height)) < s && (s = l),
                                    A > a && (a = A),
                                    l > r && (r = l),
                                    e.setTo(n + t.tx, s + t.ty, a - n, r - s);
                            },
                            get_bottom: function () {
                                return this.y + this.height;
                            },
                            set_bottom: function (e) {
                                return (this.height = e - this.y), e;
                            },
                            get_bottomRight: function () {
                                return new wf(this.x + this.width, this.y + this.height);
                            },
                            set_bottomRight: function (e) {
                                return (this.width = e.x - this.x), (this.height = e.y - this.y), e.clone();
                            },
                            get_left: function () {
                                return this.x;
                            },
                            set_left: function (e) {
                                return (this.width -= e - this.x), (this.x = e);
                            },
                            get_right: function () {
                                return this.x + this.width;
                            },
                            set_right: function (e) {
                                return (this.width = e - this.x), e;
                            },
                            get_size: function () {
                                return new wf(this.width, this.height);
                            },
                            set_size: function (e) {
                                return (this.width = e.x), (this.height = e.y), e.clone();
                            },
                            get_top: function () {
                                return this.y;
                            },
                            set_top: function (e) {
                                return (this.height -= e - this.y), (this.y = e);
                            },
                            get_topLeft: function () {
                                return new wf(this.x, this.y);
                            },
                            set_topLeft: function (e) {
                                return (this.x = e.x), (this.y = e.y), e.clone();
                            },
                            __class__: xe,
                            __properties__: {
                                set_topLeft: "set_topLeft",
                                get_topLeft: "get_topLeft",
                                set_top: "set_top",
                                get_top: "get_top",
                                set_size: "set_size",
                                get_size: "get_size",
                                set_right: "set_right",
                                get_right: "get_right",
                                set_left: "set_left",
                                get_left: "get_left",
                                set_bottomRight: "set_bottomRight",
                                get_bottomRight: "get_bottomRight",
                                set_bottom: "set_bottom",
                                get_bottom: "get_bottom",
                            },
                        });
                    var h = function () {
                        (this.checkProperties = this.scriptInit = !1), (this.nameMap = new p()), (this.propertyChangeListeners = new p()), (this.equalityPairs = new Ug()), (this.attributeTweens = new p());
                    };
                    (v["com.stencyl.behavior.Script"] = h),
                        (h.__name__ = "com.stencyl.behavior.Script"),
                        (h.resetStatics = function () {
                            (h.engine = null),
                                (h.lastCreatedActor = null),
                                (h.lastCreatedJoint = null),
                                (h.lastCreatedRegion = null),
                                (h.lastCreatedTerrainRegion = null),
                                (h.mpx = 0),
                                (h.mpy = 0),
                                (h.mrx = 0),
                                (h.mry = 0),
                                (h.imageApiAutoscale = !0);
                        }),
                        (h.sameAs = function (e, t) {
                            return e == t;
                        }),
                        (h.sameAsAny = function (e, t, n) {
                            return e == t || e == n;
                        }),
                        (h.asBoolean = function (e) {
                            return 1 == e || "true" == e;
                        }),
                        (h.strCompare = function (e, t, n) {
                            return 0 > n ? e < t : e > t;
                        }),
                        (h.strCompareBefore = function (e, t) {
                            return e < t;
                        }),
                        (h.strCompareAfter = function (e, t) {
                            return e > t;
                        }),
                        (h.asNumber = function (e) {
                            return null == e
                                ? 0
                                : "number" == typeof e
                                ? d.__cast(e, k)
                                : "number" == typeof e && (0 | e) === e
                                ? d.__cast(e, l)
                                : "boolean" == typeof e
                                ? d.__cast(e, n)
                                    ? 1
                                    : 0
                                : "string" == typeof e
                                ? parseFloat(e)
                                : parseFloat(g.string(e));
                        }),
                        (h.hasValue = function (e) {
                            return !!h.isPrimitive(e) || ("string" == typeof e ? "" != d.__cast(e, String) : null != e);
                        }),
                        (h.isPrimitive = function (e) {
                            return "boolean" == typeof e || "number" == typeof e || ("number" == typeof e && (0 | e) === e);
                        }),
                        (h.getDefaultValue = function (e) {
                            return "boolean" != typeof e && ("number" == typeof e || ("number" == typeof e && (0 | e) === e) ? 0 : "string" == typeof e ? "" : null);
                        }),
                        (h.getGroupByName = function (e) {
                            return h.engine.getGroupByName(e);
                        }),
                        (h.getLastCreatedRegion = function () {
                            return h.lastCreatedRegion;
                        }),
                        (h.getAllRegions = function () {
                            for (var e = [], t = h.engine.regions.iterator(); t.hasNext(); ) {
                                var n = t.next();
                                null != n && e.push(n);
                            }
                            return e;
                        }),
                        (h.getRegion = function (e) {
                            return h.engine.getRegion(e);
                        }),
                        (h.removeRegion = function (e) {
                            h.engine.removeRegion(e);
                        }),
                        (h.createBoxRegion = function (e, t, n, a) {
                            return (h.lastCreatedRegion = h.engine.createBoxRegion(e, t, n, a));
                        }),
                        (h.createCircularRegion = function (e, t, n) {
                            return (h.lastCreatedRegion = h.engine.createCircularRegion(e, t, n));
                        }),
                        (h.isInRegion = function (e, t) {
                            return h.engine.isInRegion(e, t);
                        }),
                        (h.getActorsInRegion = function (e) {
                            var t = [];
                            for (e = e.getContainedActors().iterator(); e.hasNext(); ) {
                                var n = e.next();
                                t.push(h.engine.getActor(n));
                            }
                            return t;
                        }),
                        (h.sceneHasBehavior = function (e) {
                            return h.engine.behaviors.hasBehavior(e);
                        }),
                        (h.enableBehaviorForScene = function (e) {
                            h.engine.behaviors.enableBehavior(e);
                        }),
                        (h.disableBehaviorForScene = function (e) {
                            h.engine.behaviors.disableBehavior(e);
                        }),
                        (h.isBehaviorEnabledForScene = function (e) {
                            return h.engine.behaviors.isBehaviorEnabled(e);
                        }),
                        (h.getValueForScene = function (e, t) {
                            return h.engine.getValue(e, t);
                        }),
                        (h.setValueForScene = function (e, t, n) {
                            h.engine.setValue(e, t, n);
                        }),
                        (h.shoutToScene = function (e, t) {
                            return h.engine.shout(e, t);
                        }),
                        (h.sayToScene = function (e, t, n) {
                            return h.engine.say(e, t, n);
                        }),
                        (h.setGameAttribute = function (t, n) {
                            var a = h.engine.gameAttributes;
                            null != e[t] ? a.setReserved(t, n) : (a.h[t] = n);
                        }),
                        (h.getGameAttribute = function (e) {
                            return h.engine.getGameAttribute(e);
                        }),
                        (h.runLater = function (e, t, n) {
                            return (e = new F5(t, 0 | e, !1, n)), h.engine.addTask(e), e;
                        }),
                        (h.runPeriodically = function (e, t, n) {
                            return (e = new F5(t, 0 | e, !0, n)), h.engine.addTask(e), e;
                        }),
                        (h.getStepSize = function () {
                            return a.STEP_SIZE;
                        }),
                        (h.getScene = function () {
                            return h.engine.scene;
                        }),
                        (h.getCurrentScene = function () {
                            return h.getScene().ID;
                        }),
                        (h.getIDForScene = function (e) {
                            for (var t = Fi.get().scenes.iterator(); t.hasNext(); ) {
                                var n = t.next();
                                if (e == n.name) return n.ID;
                            }
                            return 0;
                        }),
                        (h.getCurrentSceneName = function () {
                            return h.getScene().name;
                        }),
                        (h.getSceneWidth = function () {
                            return h.getScene().sceneWidth;
                        }),
                        (h.getSceneHeight = function () {
                            return h.getScene().sceneHeight;
                        }),
                        (h.getTileWidth = function () {
                            return h.getScene().tileWidth;
                        }),
                        (h.getTileHeight = function () {
                            return h.getScene().tileHeight;
                        }),
                        (h.reloadCurrentScene = function (e, t) {
                            h.engine.switchScene(h.getCurrentScene(), e, t);
                        }),
                        (h.switchScene = function (e, t, n) {
                            h.engine.switchScene(e, t, n);
                        }),
                        (h.createPixelizeOut = function (e, t) {
                            return new d3(e, 1, 15);
                        }),
                        (h.createPixelizeIn = function (e, t) {
                            return new d3(e, 15, 1);
                        }),
                        (h.createBubblesOut = function (e, t) {
                            return null == t && (t = -16777216), new e3(To.OUT, e, 50, t);
                        }),
                        (h.createBubblesIn = function (e, t) {
                            return null == t && (t = -16777216), new e3(To.IN, e, 50, t);
                        }),
                        (h.createBlindsOut = function (e, t) {
                            return null == t && (t = -16777216), new f3(To.OUT, e, 10, t);
                        }),
                        (h.createBlindsIn = function (e, t) {
                            return null == t && (t = -16777216), new f3(To.IN, e, 10, t);
                        }),
                        (h.createRectangleOut = function (e, t) {
                            return null == t && (t = -16777216), new g3(To.OUT, e, t);
                        }),
                        (h.createRectangleIn = function (e, t) {
                            return null == t && (t = -16777216), new g3(To.IN, e, t);
                        }),
                        (h.createSlideTransition = function (e, t) {
                            return new rJ(h.engine.master, h.engine.colorLayer, e, t);
                        }),
                        (h.createSlideUpTransition = function (e) {
                            return h.createSlideTransition(e, rJ.SLIDE_UP);
                        }),
                        (h.createSlideDownTransition = function (e) {
                            return h.createSlideTransition(e, rJ.SLIDE_DOWN);
                        }),
                        (h.createSlideLeftTransition = function (e) {
                            return h.createSlideTransition(e, rJ.SLIDE_LEFT);
                        }),
                        (h.createSlideRightTransition = function (e) {
                            return h.createSlideTransition(e, rJ.SLIDE_RIGHT);
                        }),
                        (h.createCrossfadeTransition = function (e) {
                            return new G5(h.engine.root, e);
                        }),
                        (h.createFadeOut = function (e, t) {
                            return null == t && (t = -16777216), new H5(e, t);
                        }),
                        (h.createFadeIn = function (e, t) {
                            return null == t && (t = -16777216), new I5(e, t);
                        }),
                        (h.createCircleOut = function (e, t) {
                            return null == t && (t = -16777216), new h3(To.OUT, e, t);
                        }),
                        (h.createCircleIn = function (e, t) {
                            return null == t && (t = -16777216), new h3(To.IN, e, t);
                        }),
                        (h.setBlendModeForLayer = function (e, t) {
                            e.set_blendMode(t), e instanceof Uv && d.__cast(e, Uv).tiles.set_blendMode(t);
                        }),
                        (h.showTileLayer = function (e) {
                            e.set_alpha(1);
                        }),
                        (h.hideTileLayer = function (e) {
                            e.set_alpha(0);
                        }),
                        (h.fadeTileLayerTo = function (e, t, n, a) {
                            null == e.alphaTween &&
                                (e.alphaTween = new zn().doOnUpdate(function () {
                                    e.set_alpha(e.alphaTween.value);
                                })),
                                e.alphaTween.tween(e.get_alpha(), t, a, (1e3 * n) | 0);
                        }),
                        (h.getTileLayerOpacity = function (e) {
                            return 100 * e.get_alpha();
                        }),
                        (h.setDrawingLayer = function (e) {
                            e instanceof Uv && (a.engine.g.graphics = e.overlay.get_graphics());
                        }),
                        (h.setDrawingLayerToActorLayer = function (e) {
                            null != e && (a.engine.g.graphics = e.layer.overlay.get_graphics());
                        }),
                        (h.setDrawingLayerToSceneLayer = function () {
                            a.engine.g.graphics = a.engine.transitionLayer.get_graphics();
                        }),
                        (h.getScreenX = function () {
                            return a.cameraX / a.SCALE;
                        }),
                        (h.getScreenY = function () {
                            return a.cameraY / a.SCALE;
                        }),
                        (h.getScreenXCenter = function () {
                            return a.cameraX / a.SCALE + a.screenWidth / 2;
                        }),
                        (h.getScreenYCenter = function () {
                            return a.cameraY / a.SCALE + a.screenHeight / 2;
                        }),
                        (h.getCamera = function () {
                            return h.engine.camera;
                        }),
                        (h.isCtrlDown = function () {
                            return !!Hd.check("iCTRL") || Hd.check("iCOMMAND");
                        }),
                        (h.isShiftDown = function () {
                            return Hd.check("iSHIFT");
                        }),
                        (h.simulateKeyPress = function (e) {
                            Hd.simulateKeyPress(e);
                        }),
                        (h.simulateKeyRelease = function (e) {
                            Hd.simulateKeyRelease(e);
                        }),
                        (h.isKeyDown = function (e) {
                            return Hd.check(e);
                        }),
                        (h.isKeyPressed = function (e) {
                            return Hd.pressed(e);
                        }),
                        (h.isKeyReleased = function (e) {
                            return Hd.released(e);
                        }),
                        (h.isMouseDown = function () {
                            return Hd.mouseDown;
                        }),
                        (h.isMousePressed = function () {
                            return Hd.mousePressed;
                        }),
                        (h.isMouseReleased = function () {
                            return Hd.mouseReleased;
                        }),
                        (h.getMouseX = function () {
                            return Hd.mouseX / a.SCALE;
                        }),
                        (h.getMouseY = function () {
                            return Hd.mouseY / a.SCALE;
                        }),
                        (h.getMouseWorldX = function () {
                            return Hd.mouseX / a.SCALE + a.cameraX;
                        }),
                        (h.getMouseWorldY = function () {
                            return Hd.mouseY / a.SCALE + a.cameraY;
                        }),
                        (h.getMousePressedX = function () {
                            return h.mpx;
                        }),
                        (h.getMousePressedY = function () {
                            return h.mpy;
                        }),
                        (h.getMouseReleasedX = function () {
                            return h.mrx;
                        }),
                        (h.getMouseReleasedY = function () {
                            return h.mry;
                        }),
                        (h.showCursor = function () {
                            QD.show();
                        }),
                        (h.hideCursor = function () {
                            QD.hide();
                        }),
                        (h.charFromCharCode = function (e) {
                            return 32 > e || (126 < e && 160 > e) ? "" : String.fromCodePoint(e);
                        }),
                        (h.getLastCreatedActor = function () {
                            return h.lastCreatedActor;
                        }),
                        (h.createActor = function (e, t, n, a) {
                            return (e = h.engine.createActorOfType(e, t, n, a)), (h.lastCreatedActor = e);
                        }),
                        (h.createRecycledActor = function (e, t, n, a) {
                            return (e = h.engine.getRecycledActorOfType(e, t, n, a)), (h.lastCreatedActor = e);
                        }),
                        (h.createRecycledActorOnLayer = function (e, t, n, a) {
                            return (e = h.engine.getRecycledActorOfTypeOnLayer(e, t, n, a.ID)), (h.lastCreatedActor = e);
                        }),
                        (h.recycleActor = function (e) {
                            h.engine.recycleActor(e);
                        }),
                        (h.createActorInNextScene = function (e, t, n, a) {
                            h.engine.createActorInNextScene(e, t, n, a);
                        }),
                        (h.getActorTypeByName = function (e) {
                            return hu.get().resourceMap.get(e);
                        }),
                        (h.getActorType = function (e) {
                            return hu.get().resources.get(e);
                        }),
                        (h.getAllActorTypes = function () {
                            return hu.get().getAllActorTypes();
                        }),
                        (h.getActorsOfType = function (e) {
                            return h.engine.getActorsOfType(e);
                        }),
                        (h.getActor = function (e) {
                            return h.engine.getActor(e);
                        }),
                        (h.getActorGroup = function (e) {
                            return h.engine.getGroup(e);
                        }),
                        (h.setGravity = function (e, t) {
                            (h.engine.gravityX = e), (h.engine.gravityY = t), null != h.engine.world && h.engine.world.setGravity(new td(e, t));
                        }),
                        (h.getGravity = function () {
                            return null == h.engine.world ? ((h.dummyVec.x = h.engine.gravityX), (h.dummyVec.y = h.engine.gravityY), h.dummyVec) : h.engine.world.getGravity();
                        }),
                        (h.enableContinuousCollisions = function () {
                            zs.m_continuousPhysics = !0;
                        }),
                        (h.toPhysicalUnits = function (e) {
                            return a.toPhysicalUnits(e);
                        }),
                        (h.toPixelUnits = function (e) {
                            return a.toPixelUnits(e);
                        }),
                        (h.makeActorNotPassThroughTerrain = function (e) {
                            a.NO_PHYSICS ? null != e && 1 == e.physicsMode && (e.continuousCollision = !0) : ((zs.m_continuousPhysics = !0), null != e && 0 == e.physicsMode && e.body.setBullet(!0));
                        }),
                        (h.makeActorPassThroughTerrain = function (e) {
                            if (a.NO_PHYSICS) null != e && 1 == e.physicsMode && (e.continuousCollision = !1);
                            else if (null != e && 0 == e.physicsMode) {
                                e.body.setBullet(!1), (e = !1);
                                for (var t = h.engine.allActors.iterator(); t.hasNext(); ) {
                                    var n = t.next();
                                    if (null != n.body && n.body.isBullet()) {
                                        e = !0;
                                        break;
                                    }
                                }
                                e || (zs.m_continuousPhysics = !1);
                            }
                        }),
                        (h.mute = function () {}),
                        (h.unmute = function () {}),
                        (h.getSound = function (e) {
                            return hu.get().resources.get(e);
                        }),
                        (h.getSoundByName = function (e) {
                            return hu.get().resourceMap.get(e);
                        }),
                        (h.playSound = function (e) {
                            if (null != e)
                                for (var t = 0; 32 > t; ) {
                                    var n = t++;
                                    if (null == (n = h.engine.channels[n]).currentSound) {
                                        n.playSound(e), n.setVolume(1), n.setPanning(0);
                                        break;
                                    }
                                }
                        }),
                        (h.loopSound = function (e) {
                            if (null != e)
                                for (var t = 0; 32 > t; ) {
                                    var n = t++;
                                    if (null == (n = h.engine.channels[n]).currentSound) {
                                        n.loopSound(e), n.setVolume(1), n.setPanning(0);
                                        break;
                                    }
                                }
                        }),
                        (h.playSoundOnChannel = function (e, t) {
                            (t = h.engine.channels[t]).playSound(e), t.setVolume(1), t.setPanning(0);
                        }),
                        (h.loopSoundOnChannel = function (e, t) {
                            (t = h.engine.channels[t]).loopSound(e), t.setVolume(1), t.setPanning(0);
                        }),
                        (h.stopSoundOnChannel = function (e) {
                            h.engine.channels[e].stopSound();
                        }),
                        (h.pauseSoundOnChannel = function (e) {
                            h.engine.channels[e].setPause(!0);
                        }),
                        (h.resumeSoundOnChannel = function (e) {
                            h.engine.channels[e].setPause(!1);
                        }),
                        (h.setVolumeForChannel = function (e, t) {
                            h.engine.channels[t].setVolume(e);
                        }),
                        (h.setPanningForChannel = function (e, t) {
                            h.engine.channels[t].setPanning(e);
                        }),
                        (h.stopAllSounds = function () {
                            for (var e = 0; 32 > e; ) {
                                var t = e++;
                                h.engine.channels[t].stopSound();
                            }
                        }),
                        (h.setVolumeForAllSounds = function (e) {
                            for (zr.masterVolume = e, e = 0; 32 > e; ) {
                                var t = e++;
                                (t = h.engine.channels[t]).setVolume(t.volume);
                            }
                        }),
                        (h.fadeInSoundOnChannel = function (e, t) {
                            h.engine.channels[e].fadeInSound(t);
                        }),
                        (h.fadeOutSoundOnChannel = function (e, t) {
                            h.engine.channels[e].fadeOutSound(t);
                        }),
                        (h.fadeSoundOnChannel = function (e, t, n) {
                            h.engine.channels[e].fadeSound(t, n / 100);
                        }),
                        (h.fadeInForAllSounds = function (e) {
                            for (var t = 0; 32 > t; ) {
                                var n = t++;
                                h.engine.channels[n].fadeInSound(e);
                            }
                        }),
                        (h.fadeOutForAllSounds = function (e) {
                            for (var t = 0; 32 > t; ) {
                                var n = t++;
                                h.engine.channels[n].fadeOutSound(e);
                            }
                        }),
                        (h.fadeForAllSounds = function (e, t) {
                            for (var n = 0; 32 > n; ) {
                                var a = n++;
                                h.engine.channels[a].fadeSound(e, t / 100);
                            }
                        }),
                        (h.getPositionForChannel = function (e) {
                            return null != (e = h.engine.channels[e]) && null != e.currentSound ? (e.paused ? e.position : e.currentSound.get_position()) : 0;
                        }),
                        (h.setPositionForChannel = function (e, t) {
                            null != (e = h.engine.channels[e]) && null != e.currentSound && (e.paused ? (e.position = t) : e.looping ? e.loopSound(e.currentClip, t) : e.playSound(e.currentClip, t));
                        }),
                        (h.getSoundLengthForChannel = function (e) {
                            return null != (e = h.engine.channels[e]) && null != e.currentSource ? e.currentSource.get_length() : 0;
                        }),
                        (h.getSoundLength = function (e) {
                            return null != e && null != e.src ? e.src.get_length() : 0;
                        }),
                        (h.setColorBackground = function (e, t) {
                            null == t && (t = -2), h.engine.colorLayer.get_graphics().clear(), e != aG.TRANSPARENT && (t == aG.TRANSPARENT ? h.engine.setColorBackground(new aG(e)) : h.engine.setColorBackground(new CW(e, t)));
                        }),
                        (h.setScrollSpeedForBackground = function (e, t, n) {
                            if (null == e) {
                                e = 0;
                                for (var s = a.engine.backgroundLayers; e < s.length; ) {
                                    var r = s[e];
                                    ++e, r.setScrollSpeed(t, n);
                                }
                            } else e instanceof nD && d.__cast(e, nD).setScrollSpeed(t, n);
                        }),
                        (h.setScrollFactorForLayer = function (e, t, n) {
                            e instanceof nD ? d.__cast(e, nD).setScrollFactor(t, n) : e instanceof Uv && ((e.scrollFactorX = t), (e.scrollFactorY = n));
                        }),
                        (h.changeBackground = function (e, t) {
                            null != (t = hu.get().resourceMap.get(t)) && e instanceof nD && d.__cast(e, nD).reload(t.ID);
                        }),
                        (h.changeBackgroundImage = function (e, t) {
                            null != t && e instanceof nD && d.__cast(e, nD).setImage(t);
                        }),
                        (h.addBackground = function (e, t, n) {
                            (e = hu.get().resourceMap.get(e)), (t = new nD(h.engine.getNextLayerID(), t, n, 0, 0, 1, 10, e.ID, !1)).load(), h.engine.insertLayer(t, n);
                        }),
                        (h.addBackgroundFromImage = function (e, t, n, a) {
                            (n = new nD(h.engine.getNextLayerID(), n, a, 0, 0, 1, 10, -1, !1)).loadFromImg(e, t), h.engine.insertLayer(n, a);
                        }),
                        (h.addTileLayer = function (e, t) {
                            var n = (h.engine.scene.sceneWidth / h.engine.scene.tileWidth) | 0,
                                a = (h.engine.scene.sceneHeight / h.engine.scene.tileHeight) | 0,
                                s = h.engine.getNextLayerID();
                            (n = new Rx(s, h.engine.scene, n, a)).set_name(e), (e = new Uv(s, e, t, 1, 1, 1, 10, n)), h.engine.insertLayer(e, t);
                        }),
                        (h.newImage = function (e, t) {
                            return h.imageApiAutoscale ? new y((e * a.SCALE) | 0, (t * a.SCALE) | 0, !0, 0) : new y(e, t, !0, 0);
                        }),
                        (h.captureScreenshot = function () {
                            var e = new y(0 | h.getStageWidth(), 0 | h.getStageHeight());
                            return e.draw(Hh.get_current().stage, null, null, null, null, x.antialias), e;
                        }),
                        (h.getImageForActor = function (e) {
                            return e.getCurrentImage();
                        }),
                        (h.getExternalImage = function (e) {
                            return Jh.getBitmapData("assets/data/" + e, !1);
                        }),
                        (h.loadImageFromURL = function (e, t) {
                            var n = new i3();
                            n.contentLoaderInfo.addEventListener("complete", function (e) {
                                (e = d.__cast(d.__cast(e.currentTarget, UP).content, Pc).get_bitmapData()), t(e);
                            }),
                                n.load(new VP(e));
                        }),
                        (h.getSubImage = function (e, t, n, s, r) {
                            if ((h.imageApiAutoscale && ((t = (t * a.SCALE) | 0), (n = (n * a.SCALE) | 0), (s = (s * a.SCALE) | 0), (r = (r * a.SCALE) | 0)), null != e && 0 <= t && 0 <= n && 0 < s && 0 < r && t < e.width && n < e.height)) {
                                var A = new y(s, r);
                                return (h.dummyRect.x = t), (h.dummyRect.y = n), (h.dummyRect.width = s), (h.dummyRect.height = r), (h.dummyPoint.x = 0), (h.dummyPoint.y = 0), A.copyPixels(e, h.dummyRect, h.dummyPoint), A;
                            }
                            return new y(1, 1);
                        }),
                        (h.setOrderForImage = function (e, t) {
                            null != e && null != e.parent && 0 <= t && t < e.parent.get_numChildren() && e.parent.setChildIndex(e, t);
                        }),
                        (h.getOrderForImage = function (e) {
                            return null != e && null != e.parent ? e.parent.getChildIndex(e) : -1;
                        }),
                        (h.bringImageBack = function (e) {
                            null != e && null != e.parent && h.setOrderForImage(e, e.parent.getChildIndex(e) - 1);
                        }),
                        (h.bringImageForward = function (e) {
                            null != e && null != e.parent && h.setOrderForImage(e, e.parent.getChildIndex(e) + 1);
                        }),
                        (h.bringImageToBack = function (e) {
                            null != e && null != e.parent && h.setOrderForImage(e, 0);
                        }),
                        (h.bringImagetoFront = function (e) {
                            null != e && null != e.parent && h.setOrderForImage(e, e.parent.get_numChildren() - 1);
                        }),
                        (h.attachImageToActor = function (e, t, n, a, s) {
                            null == s && (s = 1),
                                null != e &&
                                    (null != e.parent && h.removeImage(e),
                                    2 == s ? (t.addChild(e), t.setChildIndex(e, 0)) : t.addChild(e),
                                    (e.cacheParentAnchor = t.cacheAnchor),
                                    e.set_imgX(n),
                                    e.set_imgY(a),
                                    e.set_smoothing(x.antialias),
                                    t.attachedImages.push(e));
                        }),
                        (h.attachImageToHUD = function (e, t, n) {
                            null != e && (null != e.parent && h.removeImage(e), h.engine.hudLayer.addChild(e), h.engine.hudLayer.attachedImages.push(e), e.set_imgX(t), e.set_imgY(n), e.set_smoothing(x.antialias));
                        }),
                        (h.attachImageToLayer = function (e, t, n, a, s) {
                            null == s && (s = 1),
                                null != e &&
                                    (null != e.parent && h.removeImage(e),
                                    2 == s ? t.addChildAt(e, 0) : t.addChild(e),
                                    -1 == t.attachedImages.indexOf(e) && t.attachedImages.push(e),
                                    e.set_imgX(n),
                                    e.set_imgY(a),
                                    e.set_smoothing(x.antialias));
                        }),
                        (h.removeImage = function (e) {
                            null != e && (e.parent instanceof Xr ? Qc.remove(d.__cast(e.parent, Xr).attachedImages, e) : e.parent instanceof Uv && Qc.remove(d.__cast(e.parent, Uv).attachedImages, e), e.parent.removeChild(e));
                        }),
                        (h.resizeImage = function (e, t, n, a) {
                            null == a && (a = !0), null == n && (n = 1), null == t && (t = 1);
                            var s = new uh();
                            return s.scale(t, n), (t = new y((e.width * t) | 0, (e.height * n) | 0, !0, 0)).draw(e, s, null, null, null, a), t;
                        }),
                        (h.drawImageOnImage = function (e, t, n, s, r) {
                            if ((h.imageApiAutoscale && ((n = (n * a.SCALE) | 0), (s = (s * a.SCALE) | 0)), null != e && null != t))
                                if (((h.dummyPoint.x = n), (h.dummyPoint.y = s), 10 == r)) t.copyPixels(e, e.rect, h.dummyPoint, null, null, !0);
                                else {
                                    var A = new uh();
                                    A.identity(), A.translate(n, s), t.draw(e, A, null, r);
                                }
                        }),
                        (h.drawTextOnImage = function (e, t, n, s, r) {
                            h.imageApiAutoscale && ((n = (n * a.SCALE) | 0), (s = (s * a.SCALE) | 0)), null != e && r.font.renderToImg(e, t, 0, 1, n, s, r.letterSpacing, r.fontScale, 0, !1);
                        }),
                        (h.clearImagePartially = function (e, t, n, s, r) {
                            h.imageApiAutoscale && ((t = (t * a.SCALE) | 0), (n = (n * a.SCALE) | 0), (s = (s * a.SCALE) | 0), (r = (r * a.SCALE) | 0)),
                                null != e && ((h.dummyRect.x = t), (h.dummyRect.y = n), (h.dummyRect.width = s), (h.dummyRect.height = r), e.fillRect(h.dummyRect, 0));
                        }),
                        (h.clearImage = function (e) {
                            null != e && e.fillRect(e.rect, 0);
                        }),
                        (h.clearImageUsingMask = function (e, t, n, s) {
                            h.imageApiAutoscale && ((n = (n * a.SCALE) | 0), (s = (s * a.SCALE) | 0));
                            var r = t.width,
                                A = t.height,
                                l = 0,
                                o = 0;
                            if (
                                (0 > n ? ((r = n > e.width - r ? e.width : r + n), (l -= n), (n = 0)) : n > e.width - r && ((r -= n - (e.width - r)), (n = e.width - r)),
                                0 > s ? ((A = s > e.height - A ? e.height : A + s), (o -= s), (s = 0)) : s > e.height - A && ((A -= s - (e.height - A)), (s = e.height - A)),
                                !(0 >= r || 0 >= A))
                            ) {
                                for (l = new xe(l, o, r, A), t = t.getPixels(l), n = new xe(n, s, r, A), s = e.getPixels(n), l = 0, r *= A; l < r; ) {
                                    (A = l++), (t.position = 4 * A), (s.position = 4 * A), (o = ((256 - (o = t.readUnsignedByte())) * s.readUnsignedByte()) >> 8), (s.position = 4 * A), s.writeByte(o);
                                }
                                (t.position = 0), (s.position = 0), e.setPixels(n, s);
                            }
                        }),
                        (h.retainImageUsingMask = function (e, t, n, s) {
                            h.imageApiAutoscale && ((n = (n * a.SCALE) | 0), (s = (s * a.SCALE) | 0)), (h.dummyPoint.x = n), (h.dummyPoint.y = s), e.copyChannel(t, t.rect, h.dummyPoint, 8, 8);
                        }),
                        (h.fillImage = function (e, t) {
                            null != e && e.fillRect(e.rect, -16777216 | t);
                        }),
                        (h.filterImage = function (e, t) {
                            null != e && ((h.dummyPoint.x = 0), (h.dummyPoint.y = 0), e.applyFilter(e, e.rect, h.dummyPoint, t));
                        }),
                        (h.imageSetPixel = function (e, t, n, s) {
                            if (null != e)
                                if (h.imageApiAutoscale && 1 != a.SCALE) {
                                    var r = ((t + 1) * a.SCALE) | 0,
                                        A = ((n + 1) * a.SCALE) | 0;
                                    for (t = (t * a.SCALE) | 0, n = (n * a.SCALE) | 0; t < r; )
                                        for (var l = t++, o = n, i = A; o < i; ) {
                                            var u = o++;
                                            e.setPixel32(l, u, -16777216 | s);
                                        }
                                } else e.setPixel32(t, n, -16777216 | s);
                        }),
                        (h.imageGetPixel = function (e, t, n) {
                            return null != e ? (h.imageApiAutoscale && ((t = (t * a.SCALE) | 0), (n = (n * a.SCALE) | 0)), e.getPixel(t, n)) : 0;
                        }),
                        (h.imageSwapColor = function (e, t, n) {
                            null != e && ((h.dummyPoint.x = 0), (h.dummyPoint.y = 0), e.threshold(e, e.rect, h.dummyPoint, "==", -16777216 | t, -16777216 | n, -1, !0));
                        }),
                        (h.flipImageHorizontal = function (e) {
                            var t = new uh();
                            t.scale(-1, 1), t.translate(e.width, 0);
                            var n = new y(e.width, e.height, !0, 0);
                            n.draw(e, t), (h.dummyPoint.x = 0), (h.dummyPoint.y = 0), e.copyPixels(n, n.rect, h.dummyPoint);
                        }),
                        (h.flipImageVertical = function (e) {
                            var t = new uh();
                            t.scale(1, -1), t.translate(0, e.height);
                            var n = new y(e.width, e.height, !0, 0);
                            n.draw(e, t), (h.dummyPoint.x = 0), (h.dummyPoint.y = 0), e.copyPixels(n, n.rect, h.dummyPoint);
                        }),
                        (h.setXForImage = function (e, t) {
                            null != e && e.set_imgX(t);
                        }),
                        (h.setYForImage = function (e, t) {
                            null != e && e.set_imgY(t);
                        }),
                        (h.fadeImageTo = function (e, t, n, a) {
                            null == n && (n = 1), e.get_tweenProps().alpha.tween(e.get_alpha(), t, a, (1e3 * n) | 0);
                        }),
                        (h.setOriginForImage = function (e, t, n) {
                            e.setOrigin(t, n);
                        }),
                        (h.growImageTo = function (e, t, n, a, s) {
                            null == a && (a = 1), null == n && (n = 1), null == t && (t = 1), e.get_tweenProps().scaleXY.tween(e.get_scaleX(), t, e.get_scaleY(), n, s, (1e3 * a) | 0);
                        }),
                        (h.spinImageTo = function (e, t, n, a) {
                            null == n && (n = 1), e.get_tweenProps().angle.tween(e.get_rotation(), t, a, (1e3 * n) | 0);
                        }),
                        (h.moveImageTo = function (e, t, n, a, s) {
                            null == a && (a = 1), e.get_tweenProps().xy.tween(e.get_imgX(), t, e.get_imgY(), n, s, (1e3 * a) | 0);
                        }),
                        (h.spinImageBy = function (e, t, n, a) {
                            null == n && (n = 1), h.spinImageTo(e, e.get_rotation() + t, n, a);
                        }),
                        (h.moveImageBy = function (e, t, n, a, s) {
                            null == a && (a = 1), h.moveImageTo(e, e.get_imgX() + t, e.get_imgY() + n, a, s);
                        }),
                        (h.setFilterForImage = function (e, t) {
                            null != e && e.img.set_filters(e.get_filters().concat([t]));
                        }),
                        (h.clearFiltersForImage = function (e) {
                            null != e && e.img.set_filters([]);
                        }),
                        (h.imageToText = function (e) {
                            var t = e.getPixels(e.rect);
                            return e.width + ";" + e.height + ";" + h.toBase64(Rj.ofData(cg.toArrayBuffer(t)));
                        }),
                        (h.imageFromText = function (e) {
                            var t = e.split(";");
                            e = g.parseInt(t[0]);
                            var n = g.parseInt(t[1]),
                                a = h.fromBase64(t[2]);
                            t = new ev(0);
                            for (var s = 0, r = a.length; s < r; ) {
                                var A = s++;
                                t.writeByte(a.b[A]);
                            }
                            return (t.position = 0), (t.__endian = 0), (e = new y(e, n, !0, 0)).setPixels(e.rect, t), e;
                        }),
                        (h.toBase64 = function (e) {
                            var t = Rj.ofString("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
                            return 1 < (t = (e = new j3(t).encodeBytes(e).toString()).length % 4) && (e += "="), 2 == t && (e += "="), e;
                        }),
                        (h.fromBase64 = function (e) {
                            var t = -1;
                            return (
                                "=" == e.charAt(e.length - 2) ? (t = 2) : "=" == e.charAt(e.length - 1) && (t = 1),
                                -1 != t && (e = Qc.substr(e, 0, e.length - t)),
                                (t = Rj.ofString("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")),
                                new j3(t).decodeBytes(Rj.ofString(e))
                            );
                        }),
                        (h.startShakingScreen = function (e, t) {
                            null == t && (t = 0.5), null == e && (e = 0.05), h.engine.shakeScreen(e, t);
                        }),
                        (h.stopShakingScreen = function () {
                            h.engine.stopShakingScreen();
                        }),
                        (h.getTopLayer = function () {
                            return h.engine.getTopLayer();
                        }),
                        (h.getBottomLayer = function () {
                            return h.engine.getBottomLayer();
                        }),
                        (h.getMiddleLayer = function () {
                            return h.engine.getMiddleLayer();
                        }),
                        (h.getTileLayerAt = function (e) {
                            return null != e && e instanceof Uv ? d.__cast(e, Uv).tiles : null;
                        }),
                        (h.getTilesetIDByName = function (e) {
                            return (e = hu.get().resourceMap.get(e)) instanceof CA ? e.ID : -1;
                        }),
                        (h.setTileAt = function (e, t, n, s, r) {
                            if (null != n && n instanceof Uv) {
                                h.removeTileAt(e, t, n);
                                var A = d.__cast(n, Uv).tiles;
                                if (
                                    ((s = hu.get().resources.get(s).tiles[r]),
                                    A.setTileAt(e, t, s),
                                    null == s || null == s.pixels || Gb.contains(h.engine.animatedTiles, s) || (1 < s.durations.length && h.engine.animatedTiles.push(s)),
                                    null != s && -1 != s.collisionID)
                                ) {
                                    for (A = (s = Fi.get().shapes.h[s.collisionID]).getVertices(), s = s.getVertexCount(), A = ct.asArray(A, s), s = 0, r = A.getVertices(); s < r.length; ) {
                                        var l = r[s];
                                        ++s, (l.x *= h.engine.scene.tileWidth / 32), (l.y *= h.engine.scene.tileHeight / 32);
                                    }
                                    (s = t * h.engine.scene.tileWidth),
                                        (r = e * h.engine.scene.tileHeight),
                                        a.NO_PHYSICS || null == A ? null != A && h.getTileLayerAt(n).grid.setTile(t, e) : h.createDynamicTile(A, s, r, n.ID, h.engine.scene.tileWidth, h.engine.scene.tileHeight);
                                }
                                h.engine.tileUpdated = !0;
                            }
                        }),
                        (h.tileExistsAt = function (e, t, n) {
                            return null != h.getTileAt(e, t, n);
                        }),
                        (h.tileCollisionAt = function (e, t, n) {
                            if (null == n) {
                                n = 0;
                                for (var a = h.engine.interactiveLayers; n < a.length; ) {
                                    var s = a[n];
                                    if ((++n, null != (s = s.tiles.getTileAt(e, t)) && -1 != s.collisionID)) return !0;
                                }
                                return !1;
                            }
                            return null != (e = h.getTileAt(e, t, n)) && -1 != e.collisionID;
                        }),
                        (h.getTilePosition = function (e, t) {
                            var n = h.engine.scene.tileHeight,
                                a = h.engine.scene.tileWidth;
                            return 0 == e ? Math.floor(t / a) : Math.floor(t / n);
                        }),
                        (h.getTileIDAt = function (e, t, n) {
                            return null == (e = h.getTileAt(e, t, n)) ? -1 : e.tileID;
                        }),
                        (h.getTileColIDAt = function (e, t, n) {
                            return null == (e = h.getTileAt(e, t, n)) ? -1 : e.collisionID;
                        }),
                        (h.getTileDataAt = function (e, t, n) {
                            return null == (e = h.getTileAt(e, t, n)) ? "" : e.metadata;
                        }),
                        (h.getTilesetIDAt = function (e, t, n) {
                            return null == (e = h.getTileAt(e, t, n)) ? -1 : e.parent.ID;
                        }),
                        (h.getTileAt = function (e, t, n) {
                            return null == (n = h.getTileLayerAt(n)) ? null : n.getTileAt(e, t);
                        }),
                        (h.removeTileAt = function (t, n, s) {
                            if (null != s && s instanceof Uv) {
                                var r = d.__cast(s, Uv).tiles,
                                    A = h.getTileAt(t, n, s);
                                null != A &&
                                    (a.NO_PHYSICS || -1 == A.collisionID
                                        ? -1 != A.collisionID && (null == (A = t) && (A = 0), null == (s = n) && (s = 0), r.grid.setTile(s, A, !1))
                                        : ((s = "ID-" + n * h.engine.scene.tileWidth + "-" + t * h.engine.scene.tileHeight + "-" + s.ID),
                                          (A = h.engine.dynamicTiles),
                                          null != (A = null != e[s] ? A.getReserved(s) : A.h[s]) && (h.engine.removeActor(A), h.engine.dynamicTiles.remove(s))),
                                    r.setTileAt(t, n, null),
                                    (h.engine.tileUpdated = !0));
                            }
                        }),
                        (h.getTileForCollision = function (e, t) {
                            if (e.thisCollidedWithTile || e.otherCollidedWithTile) {
                                var n = Math.round(a.toPixelUnits(t.normalX)),
                                    s = Math.round(a.toPixelUnits(t.normalY)),
                                    r = Math.round(a.toPixelUnits(t.x));
                                for (
                                    t = Math.round(a.toPixelUnits(t.y)),
                                        e.thisCollidedWithTile && ((n = -n), (s = -s)),
                                        0 > n && 0 == r % h.engine.scene.tileWidth && --r,
                                        0 > s && 0 == t % h.engine.scene.tileHeight && --t,
                                        r = h.getTilePosition(0, r),
                                        t = h.getTilePosition(1, t),
                                        e = 0,
                                        n = h.engine.interactiveLayers;
                                    e < n.length;

                                )
                                    if (((s = n[e]), ++e, null != (s = s.tiles.getTileAt(t, r)) && -1 != s.collisionID)) return s;
                            }
                            return null;
                        }),
                        (h.getTileDataForCollision = function (e, t) {
                            return null != (e = h.getTileForCollision(e, t)) ? e.metadata : "";
                        }),
                        (h.createDynamicTile = function (t, n, a, s, r, A) {
                            (t = new Xr(h.engine, 1e8, 1, n, a, s, r, A, null, null, null, null, !1, !0, !1, !1, t, !1, !1)).set_name("Terrain"),
                                t.set_visible(!1),
                                (n = "ID-" + n + "-" + a + "-" + s),
                                (a = h.engine.dynamicTiles),
                                null != e[n] ? a.setReserved(n, t) : (a.h[n] = t);
                        }),
                        (h.getFont = function (e) {
                            return hu.get().resources.get(e);
                        }),
                        (h.pause = function () {
                            h.engine.pause();
                        }),
                        (h.unpause = function () {
                            h.engine.unpause();
                        }),
                        (h.toggleFullScreen = function () {
                            a.engine.toggleFullScreen();
                        }),
                        (h.pauseAll = function () {
                            a.paused = !0;
                        }),
                        (h.unpauseAll = function () {
                            a.paused = !1;
                        }),
                        (h.getScreenWidth = function () {
                            return a.screenWidth;
                        }),
                        (h.getScreenHeight = function () {
                            return a.screenHeight;
                        }),
                        (h.getStageWidth = function () {
                            return a.stage.stageWidth;
                        }),
                        (h.getStageHeight = function () {
                            return a.stage.stageHeight;
                        }),
                        (h.setOffscreenTolerance = function (e, t, n, s) {
                            (a.paddingTop = e), (a.paddingLeft = t), (a.paddingBottom = n), (a.paddingRight = s);
                        }),
                        (h.isTransitioning = function () {
                            return h.engine.isTransitioning();
                        }),
                        (h.setTimeScale = function (e) {
                            a.timeScale = e;
                        }),
                        (h.randomFloat = function () {
                            return Math.random();
                        }),
                        (h.randomFloatBetween = function (e, t) {
                            return e <= t ? e + Math.random() * (t - e) : t + Math.random() * (e - t);
                        }),
                        (h.randomInt = function (e, t) {
                            return e <= t ? e + Math.floor(Math.random() * (t - e + 1)) : t + Math.floor(Math.random() * (e - t + 1));
                        }),
                        (h.saveGame = function (t, n) {
                            t = Oy.getLocal(t);
                            for (var a = h.engine.gameAttributes.keys(); a.hasNext(); ) {
                                var s = a.next(),
                                    r = h.engine.gameAttributes;
                                Gb.saveToSharedObject(t, s, null != e[s] ? r.getReserved(s) : r.h[s]);
                            }
                            Gb.flushSharedObject(t, n);
                        }),
                        (h.loadGame = function (t, n) {
                            t = Oy.getLocal(t);
                            for (var a = 0, s = Fe.fields(t.data); a < s.length; ) {
                                var r = s[a];
                                ++a;
                                var A = h.engine.gameAttributes,
                                    l = Gb.loadFromSharedObject(t, r);
                                null != e[r] ? A.setReserved(r, l) : (A.h[r] = l);
                            }
                            null != n && n(!0);
                        }),
                        (h.saveData = function (e, t, n, a) {
                            (e = Oy.getLocal(e)), Gb.saveToSharedObject(e, t, n), Gb.flushSharedObject(e, a);
                        }),
                        (h.loadData = function (e, t, n) {
                            return (e = Oy.getLocal(e)), (t = Gb.loadFromSharedObject(e, t)), null != n && n(!0), t;
                        }),
                        (h.checkData = function (e, t) {
                            return (e = Oy.getLocal(e)), null != Fe.field(e.data, t);
                        }),
                        (h.defaultURLHandler = function (e) {
                            new tQ(e.target);
                        }),
                        (h.openURLInBrowser = function (e) {
                            Hh.getURL(new VP(e));
                        }),
                        (h.visitURL = function (e, t) {
                            null == t && (t = h.defaultURLHandler);
                            try {
                                var n = new VP(e);
                                (n.method = "GET"), new tQ(n).addEventListener("complete", t);
                            } catch (e) {
                                if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                            }
                        }),
                        (h.postToURL = function (e, t, n) {
                            null == n && (n = h.defaultURLHandler), ((e = new VP(e)).method = "POST"), null != t && (e.data = k3._new(t));
                            try {
                                var a = new tQ(e);
                                a.addEventListener("complete", n),
                                    h.runLater(500, function (e) {
                                        a.close();
                                    });
                            } catch (e) {
                                if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                            }
                        }),
                        (h.convertToPseudoUnicode = function (e) {
                            var t = "";
                            try {
                                for (var n = 0, a = 0, s = e.length; a < s; ) {
                                    n = a;
                                    var r = e.charCodeAt(a);
                                    a += 55296 <= r && 56319 >= r ? 2 : 1;
                                    var A = Gw.codePointAt(e, n),
                                        l = A;
                                    if (128 > l) t += 65535 >= A ? String.fromCodePoint(A) : String.fromCodePoint(55232 + (A >> 10)) + String.fromCodePoint((1023 & A) | 56320);
                                    else t += "~x" + Nc.hex(l, 4);
                                }
                            } catch (t) {
                                return (yf.lastException = t), e;
                            }
                            return t;
                        }),
                        (h.simpleTweet = function (e, t) {
                            h.openURLInBrowser("http://twitter.com/home?status=" + encodeURIComponent(e + " " + t));
                        }),
                        (h.newgroundsShowAd = function () {}),
                        (h.newgroundsSetMedalPosition = function (e, t) {}),
                        (h.newgroundsUnlockMedal = function (e) {}),
                        (h.newgroundsSubmitScore = function (e, t) {}),
                        (h.newgroundsShowScore = function (e) {}),
                        (h.newgroundsHelper = function (e) {}),
                        (h.kongregateInitAPI = function () {}),
                        (h.kongregateSubmitStat = function (e, t) {}),
                        (h.kongregateIsGuest = function () {
                            return !0;
                        }),
                        (h.kongregateGetUsername = function () {
                            return "Guest";
                        }),
                        (h.kongregateGetUserID = function () {
                            return 0;
                        }),
                        (h.loadAtlas = function (e) {
                            h.engine.atlasesToLoad.h[e] = e;
                        }),
                        (h.unloadAtlas = function (e) {
                            h.engine.atlasesToUnload.h[e] = e;
                        }),
                        (h.atlasIsLoaded = function (e) {
                            return null != (e = Fi.get().atlases.h[e]) && e.active;
                        }),
                        (h.initGooglePlayGames = function () {}),
                        (h.stopGooglePlayGames = function () {}),
                        (h.getGPGConnectionInfo = function (e) {
                            return !1;
                        }),
                        (h.showGPGAchievements = function () {}),
                        (h.showGPGLeaderboards = function () {}),
                        (h.showGPGLeaderboard = function (e) {}),
                        (h.showGPGQuests = function () {}),
                        (h.unlockGPGAchievement = function (e) {}),
                        (h.incrementGPGAchievement = function (e, t) {}),
                        (h.submitGPGScore = function (e, t) {}),
                        (h.updateGPGEvent = function (e, t) {}),
                        (h.getCompletedGPGQuests = function () {
                            return [];
                        }),
                        (h.gameCenterInitialize = function () {}),
                        (h.gameCenterIsAuthenticated = function () {
                            return !1;
                        }),
                        (h.gameCenterGetPlayerName = function () {
                            return "None";
                        }),
                        (h.gameCenterGetPlayerID = function () {
                            return "None";
                        }),
                        (h.gameCenterShowLeaderboard = function (e) {}),
                        (h.gameCenterShowAchievements = function () {}),
                        (h.gameCenterSubmitScore = function (e, t) {}),
                        (h.gameCenterSubmitAchievement = function (e, t) {}),
                        (h.gameCenterResetAchievements = function () {}),
                        (h.gameCenterShowBanner = function (e, t) {}),
                        (h.purchasesAreInitialized = function () {
                            return !1;
                        }),
                        (h.purchasesRestore = function () {}),
                        (h.purchasesBuy = function (e) {}),
                        (h.purchasesHasBought = function (e) {
                            return !1;
                        }),
                        (h.purchasesGetTitle = function (e) {
                            return "";
                        }),
                        (h.purchasesGetDescription = function (e) {
                            return "";
                        }),
                        (h.purchasesGetPrice = function (e) {
                            return "";
                        }),
                        (h.purchasesRequestProductInfo = function (e) {}),
                        (h.purchasesUse = function (e) {}),
                        (h.purchasesGoogleConsume = function (e) {}),
                        (h.purchasesGetQuantity = function (e) {
                            return 0;
                        }),
                        (h.showAlert = function (e, t) {}),
                        (h.vibrate = function (e) {}),
                        (h.showKeyboard = function () {}),
                        (h.hideKeyboard = function () {}),
                        (h.setKeyboardText = function (e) {}),
                        (h.setIconBadgeNumber = function (e) {}),
                        (h.enableDebugDrawing = function () {
                            (a.DEBUG_DRAW = !0), a.NO_PHYSICS || a.debugDrawer.m_sprite.get_graphics().clear();
                        }),
                        (h.disableDebugDrawing = function () {
                            (a.DEBUG_DRAW = !1), a.NO_PHYSICS || a.debugDrawer.m_sprite.get_graphics().clear();
                        }),
                        (h.gameURL = function () {
                            return "";
                        }),
                        (h.exitGame = function () {}),
                        (h.createGrayscaleFilter = function () {
                            var e = [];
                            return (e = (e = (e = (e = e.concat([0.5, 0.5, 0.5, 0, 0])).concat([0.5, 0.5, 0.5, 0, 0])).concat([0.5, 0.5, 0.5, 0, 0])).concat([0, 0, 0, 1, 0])), new lK(e);
                        }),
                        (h.createSepiaFilter = function () {
                            var e = [];
                            return (e = (e = (e = (e = e.concat([0.34, 0.33, 0.33, 0, 30])).concat([0.33, 0.34, 0.33, 0, 20])).concat([0.33, 0.33, 0.34, 0, 0])).concat([0, 0, 0, 1, 0])), new lK(e);
                        }),
                        (h.createNegativeFilter = function () {
                            var e = [];
                            return (e = (e = (e = (e = e.concat([-1, 0, 0, 0, 255])).concat([0, -1, 0, 0, 255])).concat([0, 0, -1, 0, 255])).concat([0, 0, 0, 1, 0])), new lK(e);
                        }),
                        (h.createTintFilter = function (e, t) {
                            null == t && (t = 1);
                            var n = new Ii();
                            return n.colorize(e, t), n.getFilter();
                        }),
                        (h.createHueFilter = function (e) {
                            var t = new Ii();
                            return t.adjustHue(e), t.adjustSaturation(1), t.getFilter();
                        }),
                        (h.createSaturationFilter = function (e) {
                            var t = new Ii();
                            return t.adjustSaturation(e / 100), t.getFilter();
                        }),
                        (h.createBrightnessFilter = function (e) {
                            var t = new Ii();
                            return t.adjustBrightness(e / 100), t.getFilter();
                        }),
                        (h.prototype = {
                            wrapper: null,
                            propertyChangeListeners: null,
                            equalityPairs: null,
                            checkProperties: null,
                            nameMap: null,
                            attributeTweens: null,
                            scriptInit: null,
                            toInternalName: function (t) {
                                if (null == this.nameMap) return t;
                                var n = this.nameMap;
                                return null == (n = null != e[t] ? n.getReserved(t) : n.h[t]) ? t : n;
                            },
                            forwardMessage: function (e) {},
                            clearListeners: function () {
                                this.propertyChangeListeners = new p();
                            },
                            internalGetGroup: function (e, t, n) {
                                return a.NO_PHYSICS
                                    ? e == (t = d.__cast(n, ov)).actorA
                                        ? h.engine.getGroup(t.groupA)
                                        : h.engine.getGroup(t.groupB)
                                    : null == (t = d.__cast(t, $A))
                                    ? d.__cast(e, Xr).getGroup()
                                    : -1e3 == (e = t.groupID) && null != (t = t.getBody())
                                    ? h.engine.getGroup(t.getUserData().groupID)
                                    : h.engine.getGroup(e);
                            },
                            init: function () {},
                            addMobileKeyboardListener: function (e, t) {
                                (e = new DW(my.TYPE_KEYBOARD, e, t)), h.engine.nativeListeners.push(e), this instanceof Pd && d.__cast(this, Pd).actor.registerListener(h.engine.nativeListeners, e);
                            },
                            addMobileAdListener: function (e, t) {
                                (e = new DW(my.TYPE_ADS, e, t)), h.engine.nativeListeners.push(e), this instanceof Pd && d.__cast(this, Pd).actor.registerListener(h.engine.nativeListeners, e);
                            },
                            addGameCenterListener: function (e, t) {
                                (e = new DW(my.TYPE_GAMECENTER, e, t)), h.engine.nativeListeners.push(e), this instanceof Pd && d.__cast(this, Pd).actor.registerListener(h.engine.nativeListeners, e);
                            },
                            addPurchaseListener: function (e, t) {
                                (e = new DW(my.TYPE_PURCHASES, e, t)), h.engine.nativeListeners.push(e), this instanceof Pd && d.__cast(this, Pd).actor.registerListener(h.engine.nativeListeners, e);
                            },
                            addWhenCreatedListener: function (e, t) {
                                var n = this instanceof Pd;
                                null != e && (e.whenCreatedListeners.push(t), n && d.__cast(this, Pd).actor.registerListener(e.whenCreatedListeners, t));
                            },
                            addWhenKilledListener: function (e, t) {
                                var n = this instanceof Pd;
                                null != e && (e.whenKilledListeners.push(t), n && d.__cast(this, Pd).actor.registerListener(e.whenKilledListeners, t));
                            },
                            addWhenUpdatedListener: function (e, t) {
                                var n = this instanceof Pd;
                                null == e && n && (e = d.__cast(this, Pd).actor), (e = null != e ? e.whenUpdatedListeners : h.engine.whenUpdatedListeners).push(t), n && d.__cast(this, Pd).actor.registerListener(e, t);
                            },
                            addWhenDrawingListener: function (e, t) {
                                var n = this instanceof Pd;
                                null == e && n && (e = d.__cast(this, Pd).actor), (e = null != e ? e.whenDrawingListeners : h.engine.whenDrawingListeners).push(t), n && d.__cast(this, Pd).actor.registerListener(e, t);
                            },
                            addActorEntersRegionListener: function (e, t) {
                                null != e && (e.whenActorEntersListeners.push(t), this instanceof Pd && d.__cast(this, Pd).actor.registerListener(e.whenActorEntersListeners, t));
                            },
                            addActorExitsRegionListener: function (e, t) {
                                null != e && (e.whenActorExitsListeners.push(t), this instanceof Pd && d.__cast(this, Pd).actor.registerListener(e.whenActorExitsListeners, t));
                            },
                            addActorPositionListener: function (e, t) {
                                null != e && (e.positionListeners.push(t), e.positionListenerCount++, this instanceof Pd && d.__cast(this, Pd).actor.registerListener(e.positionListeners, t));
                            },
                            addActorTypeGroupPositionListener: function (e, t) {
                                h.engine.typeGroupPositionListeners.h.hasOwnProperty(e) || (h.engine.typeGroupPositionListeners.h[e] = []),
                                    (e = d.__cast(h.engine.typeGroupPositionListeners.h[e], Array)).push(t),
                                    this instanceof Pd && d.__cast(this, Pd).actor.registerListener(e, t);
                            },
                            addSwipeListener: function (e) {
                                h.engine.whenSwipedListeners.push(e), this instanceof Pd && d.__cast(this, Pd).actor.registerListener(h.engine.whenSwipedListeners, e);
                            },
                            addMultiTouchStartListener: function (e) {
                                h.engine.whenMTStartListeners.push(e), this instanceof Pd && d.__cast(this, Pd).actor.registerListener(h.engine.whenMTStartListeners, e);
                            },
                            addMultiTouchMoveListener: function (e) {
                                h.engine.whenMTDragListeners.push(e), this instanceof Pd && d.__cast(this, Pd).actor.registerListener(h.engine.whenMTDragListeners, e);
                            },
                            addMultiTouchEndListener: function (e) {
                                h.engine.whenMTEndListeners.push(e), this instanceof Pd && d.__cast(this, Pd).actor.registerListener(h.engine.whenMTEndListeners, e);
                            },
                            addKeyStateListener: function (t, n) {
                                var a = h.engine.whenKeyPressedListeners;
                                if (null == (null != e[t] ? a.getReserved(t) : a.h[t])) {
                                    a = [];
                                    var s = h.engine.whenKeyPressedListeners;
                                    null != e[t] ? s.setReserved(t, a) : (s.h[t] = a);
                                }
                                (h.engine.hasKeyPressedListeners = !0), (a = h.engine.whenKeyPressedListeners), (t = null != e[t] ? a.getReserved(t) : a.h[t]).push(n), this instanceof Pd && d.__cast(this, Pd).actor.registerListener(t, n);
                            },
                            addAnyKeyPressedListener: function (e) {
                                h.engine.whenAnyKeyPressedListeners.push(e), this instanceof Pd && d.__cast(this, Pd).actor.registerListener(h.engine.whenAnyKeyPressedListeners, e);
                            },
                            addAnyKeyReleasedListener: function (e) {
                                h.engine.whenAnyKeyReleasedListeners.push(e), this instanceof Pd && d.__cast(this, Pd).actor.registerListener(h.engine.whenAnyKeyReleasedListeners, e);
                            },
                            addAnyGamepadPressedListener: function (e) {
                                h.engine.whenAnyGamepadPressedListeners.push(e), this instanceof Pd && d.__cast(this, Pd).actor.registerListener(h.engine.whenAnyGamepadPressedListeners, e);
                            },
                            addAnyGamepadReleasedListener: function (e) {
                                h.engine.whenAnyGamepadReleasedListeners.push(e), this instanceof Pd && d.__cast(this, Pd).actor.registerListener(h.engine.whenAnyGamepadReleasedListeners, e);
                            },
                            addMousePressedListener: function (e) {
                                h.engine.whenMousePressedListeners.push(e), this instanceof Pd && d.__cast(this, Pd).actor.registerListener(h.engine.whenMousePressedListeners, e);
                            },
                            addMouseReleasedListener: function (e) {
                                h.engine.whenMouseReleasedListeners.push(e), this instanceof Pd && d.__cast(this, Pd).actor.registerListener(h.engine.whenMouseReleasedListeners, e);
                            },
                            addMouseMovedListener: function (e) {
                                h.engine.whenMouseMovedListeners.push(e), this instanceof Pd && d.__cast(this, Pd).actor.registerListener(h.engine.whenMouseMovedListeners, e);
                            },
                            addMouseDraggedListener: function (e) {
                                h.engine.whenMouseDraggedListeners.push(e), this instanceof Pd && d.__cast(this, Pd).actor.registerListener(h.engine.whenMouseDraggedListeners, e);
                            },
                            addMouseOverActorListener: function (e, t) {
                                null != e && (e.mouseOverListeners.push(t), this instanceof Pd && d.__cast(this, Pd).actor.registerListener(e.mouseOverListeners, t));
                            },
                            addPropertyChangeListener: function (t, n, a) {
                                var s = this.propertyChangeListeners;
                                if (null != e[t] ? !s.existsReserved(t) : !s.h.hasOwnProperty(t)) {
                                    s = this.propertyChangeListeners;
                                    var r = [];
                                    null != e[t] ? s.setReserved(t, r) : (s.h[t] = r);
                                }
                                null != n ? ((s = this.propertyChangeListeners), (s = !(null != e[n] ? s.existsReserved(n) : s.h.hasOwnProperty(n)))) : (s = !1),
                                    s && ((s = this.propertyChangeListeners), (r = []), null != e[n] ? s.setReserved(n, r) : (s.h[n] = r)),
                                    (s = this.propertyChangeListeners),
                                    (t = null != e[t] ? s.getReserved(t) : s.h[t]),
                                    (s = this.propertyChangeListeners),
                                    (s = null != e[n] ? s.getReserved(n) : s.h[n]),
                                    t.push(a),
                                    null != n && (s.push(a), (r = []).push(t), r.push(s), this.equalityPairs.set(a, r)),
                                    this instanceof Pd && (d.__cast(this, Pd).actor.registerListener(t, a), null != n && d.__cast(this, Pd).actor.registerListener(s, a)),
                                    (this.checkProperties = !0);
                            },
                            propertyChanged: function (t, n) {
                                if (this.checkProperties) {
                                    var a = this.propertyChangeListeners;
                                    if (null != (t = null != e[t] ? a.getReserved(t) : a.h[t]))
                                        for (a = 0; a < t.length; ) {
                                            try {
                                                var s = t[a];
                                                if ((s(n, t), -1 == Gb.indexOf(t, s) && (--a, null != this.equalityPairs.h[s.__id__]))) {
                                                    for (var r = 0, A = d.__cast(this.equalityPairs.h[s.__id__], Array); r < A.length; ) {
                                                        var l = A[r];
                                                        ++r, l != t && l.splice(Gb.indexOf(l, s), 1);
                                                    }
                                                    this.equalityPairs.remove(s);
                                                }
                                            } catch (e) {
                                                if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                            }
                                            ++a;
                                        }
                                }
                            },
                            addCollisionListener: function (e, t) {
                                null != e && (e.collisionListeners.push(t), e.collisionListenerCount++, this instanceof Pd && d.__cast(this, Pd).actor.registerListener(e.collisionListeners, t));
                            },
                            addSceneCollisionListener: function (e, t, n) {
                                if (!h.engine.collisionListeners.h.hasOwnProperty(e)) {
                                    var a = h.engine.collisionListeners,
                                        s = new wi();
                                    a.h[e] = s;
                                }
                                h.engine.collisionListeners.h.hasOwnProperty(t) || ((a = h.engine.collisionListeners), (s = new wi()), (a.h[t] = s)),
                                    h.engine.collisionListeners.h[e].h.hasOwnProperty(t) || (h.engine.collisionListeners.h[e].h[t] = []),
                                    (e = h.engine.collisionListeners.h[e].h[t]).push(n),
                                    this instanceof Pd && (d.__cast(this, Pd).actor.collisionListenerCount++, d.__cast(this, Pd).actor.registerListener(e, n));
                            },
                            addWhenTypeGroupCreatedListener: function (e, t) {
                                null == h.engine.whenTypeGroupCreatedListeners.h.__keys__[e.__id__] && h.engine.whenTypeGroupCreatedListeners.set(e, []),
                                    (e = h.engine.whenTypeGroupCreatedListeners.h[e.__id__]).push(t),
                                    this instanceof Pd && d.__cast(this, Pd).actor.registerListener(e, t);
                            },
                            addWhenTypeGroupKilledListener: function (e, t) {
                                null == h.engine.whenTypeGroupDiesListeners.h.__keys__[e.__id__] && h.engine.whenTypeGroupDiesListeners.set(e, []),
                                    (e = h.engine.whenTypeGroupDiesListeners.h[e.__id__]).push(t),
                                    this instanceof Pd && d.__cast(this, Pd).actor.registerListener(e, t);
                            },
                            addSoundListener: function (e, t) {
                                e instanceof OV
                                    ? (null == h.engine.soundListeners.h.__keys__[e.__id__] && h.engine.soundListeners.set(e, []), (e = h.engine.soundListeners.h[e.__id__]))
                                    : (h.engine.channelListeners.h.hasOwnProperty(e) || (h.engine.channelListeners.h[e] = []), (e = h.engine.channelListeners.h[e])),
                                    e.push(t),
                                    this instanceof Pd && d.__cast(this, Pd).actor.registerListener(e, t);
                            },
                            addFocusChangeListener: function (e) {
                                h.engine.whenFocusChangedListeners.push(e), this instanceof Pd && d.__cast(this, Pd).actor.registerListener(h.engine.whenFocusChangedListeners, e);
                            },
                            addPauseListener: function (e) {
                                h.engine.whenPausedListeners.push(e), this instanceof Pd && d.__cast(this, Pd).actor.registerListener(h.engine.whenPausedListeners, e);
                            },
                            addFullscreenListener: function (e) {
                                h.engine.fullscreenListeners.push(e), this instanceof Pd && d.__cast(this, Pd).actor.registerListener(h.engine.fullscreenListeners, e);
                            },
                            addGameScaleListener: function (e) {
                                h.engine.gameScaleListeners.push(e), this instanceof Pd && d.__cast(this, Pd).actor.registerListener(h.engine.gameScaleListeners, e);
                            },
                            addScreenSizeListener: function (e) {
                                h.engine.screenSizeListeners.push(e), this instanceof Pd && d.__cast(this, Pd).actor.registerListener(h.engine.screenSizeListeners, e);
                            },
                            disableThisBehavior: function () {
                                h.engine.behaviors.disableBehavior(this.wrapper.name);
                            },
                            tweenNumber: function (t, n, a, s) {
                                null == a && (a = 1);
                                var r = this,
                                    A = this.attributeTweens,
                                    l = null != e[t] ? A.getReserved(t) : A.h[t];
                                null == l &&
                                    ((l = new zn()).doOnUpdate(function () {
                                        r[t] = l.value;
                                    }),
                                    (A = this.attributeTweens),
                                    null != e[t] ? A.setReserved(t, l) : (A.h[t] = l)),
                                    l.tween(Fe.field(this, t), n, s, (1e3 * a) | 0);
                            },
                            abortTweenNumber: function (t) {
                                var n = this.attributeTweens;
                                null != (t = null != e[t] ? n.getReserved(t) : n.h[t]) && Xq.cancel(t);
                            },
                            pauseTweens: function () {
                                var e = this.attributeTweens;
                                for (e = new jy(e, e.arrayKeys()); e.hasNext(); ) e.next().paused = !0;
                            },
                            unpauseTweens: function () {
                                var e = this.attributeTweens;
                                for (e = new jy(e, e.arrayKeys()); e.hasNext(); ) e.next().paused = !1;
                            },
                            __class__: h,
                        });
                    var Pd = function (e) {
                        h.call(this), (this.actor = e);
                    };
                    (v["com.stencyl.behavior.ActorScript"] = Pd),
                        (Pd.__name__ = "com.stencyl.behavior.ActorScript"),
                        (Pd.__super__ = h),
                        (Pd.prototype = K(h.prototype, {
                            actor: null,
                            getValue: function (e, t) {
                                return this.actor.getValue(e, t);
                            },
                            setValue: function (e, t, n) {
                                this.actor.setValue(e, t, n);
                            },
                            shout: function (e, t) {
                                return this.actor.shout(e, t);
                            },
                            disableThisBehavior: function () {
                                this.actor.disableBehavior(this.wrapper.name);
                            },
                            __class__: Pd,
                        }));
                    var AW = function (e, t, n, a, s, r, A) {
                        (this.ID = e), (this.fieldName = t), (this.fullName = n), (this.type = s), (this.value = a), (this.realValue = null), (this.hidden = A);
                    };
                    (v["com.stencyl.behavior.Attribute"] = AW),
                        (AW.__name__ = "com.stencyl.behavior.Attribute"),
                        (AW.prototype = {
                            ID: null,
                            fieldName: null,
                            fullName: null,
                            type: null,
                            defaultValue: null,
                            value: null,
                            realValue: null,
                            parent: null,
                            hidden: null,
                            getRealValue: function () {
                                return (
                                    null == this.realValue &&
                                        ("int" == this.type || "float" == this.type || "number" == this.type || "bool" == this.type || "boolean" == this.type || "color" == this.type
                                            ? (this.realValue = this.value)
                                            : "sound" == this.type || "actortype" == this.type || "font" == this.type
                                            ? null != this.value &&
                                              ((this.realValue = -1 == this.value ? null : hu.get().resources.get(this.value)),
                                              "font" != this.type || this.realValue instanceof dL || (this.realValue = null),
                                              "sound" != this.type || this.realValue instanceof OV || (this.realValue = null),
                                              "actortype" != this.type || this.realValue instanceof TP || (this.realValue = null))
                                            : "actorgroup" == this.type || "control" == this.type || "effect" == this.type || "animation" == this.type || "game-attribute" == this.type
                                            ? (this.realValue = this.value)
                                            : "scene" == this.type
                                            ? (this.realValue = Fi.get().scenes.h[this.value])
                                            : "text" == this.type
                                            ? (this.realValue = this.value)
                                            : "list" == this.type
                                            ? ((this.realValue = this.value), (null == this.value || "" == this.value) && (this.realValue = []))
                                            : "map" == this.type
                                            ? ((this.realValue = this.value), (null == this.value || "" == this.value) && (this.realValue = new p()))
                                            : null != this.value && "actor" == this.type
                                            ? (this.realValue = "thisactor" == this.value ? this.parent : g.parseInt(this.value))
                                            : ((null != this.value && "joint" == this.type) || (null != this.value && "region" == this.type)) && (this.realValue = this.value)),
                                    this.realValue
                                );
                            },
                            __class__: AW,
                        });
                    var C5 = function (e, t, n, a, s, r, A, l, o, i) {
                        if (((this.isEvent = i), (this.parent = e), (this.engine = t), (this.classname = s), null != t))
                            try {
                                this.cls = v[s];
                            } catch (e) {
                                if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                            }
                        (this.enabled = r), (this.drawable = A), (this.ID = n), (this.name = a), (this.type = o), (this.attributes = l);
                    };
                    (v["com.stencyl.behavior.Behavior"] = C5),
                        (C5.__name__ = "com.stencyl.behavior.Behavior"),
                        (C5.prototype = {
                            parent: null,
                            engine: null,
                            enabled: null,
                            drawable: null,
                            isEvent: null,
                            ID: null,
                            name: null,
                            type: null,
                            classname: null,
                            cls: null,
                            script: null,
                            attributes: null,
                            initScript: function (e) {
                                if ((null == e && (e = !1), null == this.cls)) this.script = new hf();
                                else {
                                    if ("actor" == this.type) {
                                        if (d.getClass(this.parent) == a) return void (this.script = new hf());
                                        this.script = uf.createInstance(this.cls, [0, this.parent, null]);
                                    } else {
                                        if (d.getClass(this.parent) == Xr) return void (this.script = new hf());
                                        this.script = uf.createInstance(this.cls, [0, null]);
                                    }
                                    if (((this.script.wrapper = this), this.initAttributes(), !e))
                                        try {
                                            this.script.init(), (this.script.scriptInit = !0);
                                        } catch (e) {
                                            if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                        }
                                }
                            },
                            initAttributes: function () {
                                var t = this.attributes;
                                for (t = new jy(t, t.arrayKeys()); t.hasNext(); ) {
                                    var n = t.next();
                                    try {
                                        if (!(n.hidden || ("actor" == n.type && "actor" == n.fieldName && this.script instanceof Pd))) {
                                            var a = this.script.toInternalName(n.fieldName);
                                            if ("actor" == n.type || "joint" == n.type || "region" == n.type) {
                                                var s = g.parseInt("" + g.string(n.getRealValue()));
                                                "actor" == n.type ? (this.script[a] = this.engine.getActor(s)) : "joint" != n.type && "region" == n.type && (this.script[a] = this.engine.getRegion(s));
                                            } else if ("actorgroup" == n.type) {
                                                var r = g.parseInt("" + g.string(n.getRealValue()));
                                                this.script[a] = this.engine.getGroup(r);
                                            } else {
                                                var A = n.getRealValue();
                                                if ("list" == n.type) {
                                                    if (((n = null), null != A)) {
                                                        n = d.__cast(A, Array);
                                                        for (var l = [], o = 0; o < n.length; ) {
                                                            var i = n[o];
                                                            ++o, l.push(i);
                                                        }
                                                        n = l;
                                                    } else n = [];
                                                    this.script[a] = n;
                                                } else if ("map" == n.type) {
                                                    if (((n = null), null != A)) {
                                                        (l = A), (n = new p());
                                                        for (var u = l.keys(); u.hasNext(); ) {
                                                            var m = u.next(),
                                                                c = l.get(m);
                                                            null != e[m] ? n.setReserved(m, c) : (n.h[m] = c);
                                                        }
                                                    } else n = new p();
                                                    this.script[a] = n;
                                                } else this.script[a] = A;
                                            }
                                        }
                                    } catch (e) {
                                        if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                    }
                                }
                            },
                            __class__: C5,
                        });
                    var l3 = function (e, t) {
                        (this.behaviorID = e), (this.values = t), (this.enabled = !0);
                    };
                    (v["com.stencyl.behavior.BehaviorInstance"] = l3), (l3.__name__ = "com.stencyl.behavior.BehaviorInstance"), (l3.prototype = { behaviorID: null, values: null, enabled: null, __class__: l3 });
                    var c3 = function () {
                        (this.behaviors = []), (this.cache = new p());
                    };
                    (v["com.stencyl.behavior.BehaviorManager"] = c3),
                        (c3.__name__ = "com.stencyl.behavior.BehaviorManager"),
                        (c3.prototype = {
                            behaviors: null,
                            cache: null,
                            destroy: function () {
                                this.cache = this.behaviors = null;
                            },
                            add: function (t) {
                                var n = t.name,
                                    a = this.cache;
                                null != e[n] ? a.setReserved(n, t) : (a.h[n] = t), this.behaviors.push(t);
                            },
                            hasBehavior: function (t) {
                                if (null == this.cache) return !1;
                                var n = this.cache;
                                return null != (null != e[t] ? n.getReserved(t) : n.h[t]);
                            },
                            enableBehavior: function (t) {
                                if (this.hasBehavior(t)) {
                                    var n = this.cache;
                                    if (null != (t = null != e[t] ? n.getReserved(t) : n.h[t]).script && !t.script.scriptInit)
                                        try {
                                            t.script.init(), (t.script.scriptInit = !0);
                                        } catch (e) {
                                            if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                        }
                                    t.enabled = !0;
                                }
                            },
                            disableBehavior: function (t) {
                                if (this.hasBehavior(t)) {
                                    var n = this.cache;
                                    (null != e[t] ? n.getReserved(t) : n.h[t]).enabled = !1;
                                }
                            },
                            isBehaviorEnabled: function (t) {
                                if (this.hasBehavior(t)) {
                                    var n = this.cache;
                                    return (null != e[t] ? n.getReserved(t) : n.h[t]).enabled;
                                }
                                return !1;
                            },
                            initScripts: function () {
                                for (var e = 0, t = this.behaviors.length; e < t; ) {
                                    var n = e++;
                                    (n = this.behaviors[n]).initScript(!n.enabled);
                                }
                            },
                            getAttribute: function (t, n) {
                                var a = this.cache;
                                return null != (t = null != e[t] ? a.getReserved(t) : a.h[t]) && null != t.script ? ((n = t.script.toInternalName(n)), Fe.field(t.script, n)) : null;
                            },
                            setAttribute: function (t, n, a) {
                                var s = this.cache;
                                null != (t = null != e[t] ? s.getReserved(t) : s.h[t]) &&
                                    null != t.script &&
                                    (null != Fe.field(t.script, n) || Object.prototype.hasOwnProperty.call(t.script, n), (t.script[n] = a), t.script.propertyChanged(n, a));
                            },
                            call: function (e, t) {
                                if (null == this.cache) return null;
                                for (var n = null, a = 0, s = this.behaviors.length; a < s; ) {
                                    var r = a++;
                                    if ((r = this.behaviors[r]).enabled && null != r.script)
                                        try {
                                            var A = Fe.field(r.script, e);
                                            null != A ? (n = A.apply(r.script, t)) : r.script.forwardMessage(e);
                                        } catch (t) {
                                            if (((yf.lastException = t), "string" != typeof (t instanceof Gc ? t.val : t))) throw t;
                                            r.script.forwardMessage(e);
                                        }
                                }
                                return n;
                            },
                            call2: function (t, n, a) {
                                if (null == this.cache) return null;
                                var s = null,
                                    r = this.cache;
                                if (null != (t = null != e[t] ? r.getReserved(t) : r.h[t])) {
                                    if (!t.enabled || null == t.script) return s;
                                    try {
                                        var A = Fe.field(t.script, n);
                                        null != A ? (s = A.apply(t.script, a)) : t.script.forwardMessage(n);
                                    } catch (e) {
                                        if (((yf.lastException = e), "string" != typeof (e instanceof Gc ? e.val : e))) throw e;
                                        t.script.forwardMessage(n);
                                    }
                                }
                                return s;
                            },
                            __class__: c3,
                        });
                    var hf = function () {
                        h.call(this);
                    };
                    (v["com.stencyl.behavior.SceneScript"] = hf), (hf.__name__ = "com.stencyl.behavior.SceneScript"), (hf.__super__ = h), (hf.prototype = K(h.prototype, { __class__: hf }));
                    var F5 = function (e, t, n, a) {
                        (this.toExecute = e), (this.interval = t), (this.repeats = n), (this.actor = a), (this.done = !1), (this.timer = t);
                    };
                    (v["com.stencyl.behavior.TimedTask"] = F5),
                        (F5.__name__ = "com.stencyl.behavior.TimedTask"),
                        (F5.prototype = {
                            toExecute: null,
                            interval: null,
                            repeats: null,
                            actor: null,
                            timer: null,
                            done: null,
                            actorCreateTime: null,
                            update: function (e) {
                                null == this.actor || this.actor.isAlive()
                                    ? (null == this.actor && a.engine.isPaused()) ||
                                      (null != this.actor && this.actor.isPaused()) ||
                                      ((this.timer -= e), 0 >= this.timer && (this.toExecute(this), (this.done = !this.repeats), this.repeats && (this.timer += this.interval)))
                                    : (this.done = !0);
                            },
                            __class__: F5,
                        });
                    var DW = function (e, t, n) {
                        (this.metaType = e), (this.type = t), (this.fn = n);
                    };
                    (v["com.stencyl.event.NativeListener"] = DW),
                        (DW.__name__ = "com.stencyl.event.NativeListener"),
                        (DW.prototype = {
                            metaType: null,
                            type: null,
                            fn: null,
                            checkEvents: function (e) {
                                if (null != (e = e.eventTable.h[this.metaType]))
                                    for (var t = 0; t < e.length; ) {
                                        var n = e[t];
                                        ++t,
                                            n.type == this.type &&
                                                (this.metaType == my.TYPE_ADS ? this.fn() : (this.metaType == my.TYPE_PURCHASES || this.metaType == my.TYPE_GAMECENTER || this.metaType == my.TYPE_KEYBOARD) && this.fn(n.data1));
                                    }
                            },
                            __class__: DW,
                        });
                    var Tw = function (e, t) {
                        null == t && (t = ""), (this.type = e), (this.data1 = t);
                    };
                    (v["com.stencyl.event.StencylEvent"] = Tw), (Tw.__name__ = "com.stencyl.event.StencylEvent"), (Tw.prototype = { type: null, data1: null, __class__: Tw });
                    var J5 = function () {};
                    (v["com.stencyl.graphics.AbstractAnimation"] = J5),
                        (J5.__name__ = "com.stencyl.graphics.AbstractAnimation"),
                        (J5.__isInterface__ = !0),
                        (J5.prototype = {
                            update: null,
                            getCurrentFrame: null,
                            getNumFrames: null,
                            setFrame: null,
                            isFinished: null,
                            activate: null,
                            reset: null,
                            draw: null,
                            getFrameDurations: null,
                            setFrameDurations: null,
                            setFrameDuration: null,
                            getCurrentImage: null,
                            __class__: J5,
                        });
                    var Pc = function (e, t, n) {
                        null == n && (n = !1), gc.call(this), (this.__type = UU.BITMAP), (this.__bitmapData = e), (this.pixelSnapping = t), (this.smoothing = n), null == t && (this.pixelSnapping = 1);
                    };
                    (v["openfl.display.Bitmap"] = Pc),
                        (Pc.__name__ = "openfl.display.Bitmap"),
                        (Pc.__super__ = gc),
                        (Pc.prototype = K(gc.prototype, {
                            pixelSnapping: null,
                            smoothing: null,
                            __image: null,
                            __bitmapData: null,
                            __imageVersion: null,
                            __enterFrame: function (e) {
                                null == this.__bitmapData || null == this.__bitmapData.image || this.__bitmapData.image.version == this.__imageVersion || this.__renderDirty || ((this.__renderDirty = !0), this.__setParentRenderDirty());
                            },
                            __getBounds: function (e, t) {
                                if (null != this.__bitmapData) {
                                    var n = xe.__pool.get();
                                    n.setTo(0, 0, this.__bitmapData.width, this.__bitmapData.height), n.__transform(n, t), e.__expand(n.x, n.y, n.width, n.height), xe.__pool.release(n);
                                }
                            },
                            __hitTest: function (e, t, n, a, s, r) {
                                if (!r.get_visible() || this.__isMask || null == this.__bitmapData || (null != this.get_mask() && !this.get_mask().__hitTestMask(e, t))) return !1;
                                this.__getRenderTransform();
                                var A = (n = this.__renderTransform).a * n.d - n.b * n.c;
                                n = 0 == A ? -n.tx : (1 / A) * (n.c * (n.ty - t) + n.d * (e - n.tx));
                                var l = (A = this.__renderTransform).a * A.d - A.b * A.c;
                                return (
                                    (e = 0 == l ? -A.ty : (1 / l) * (A.a * (t - A.ty) + A.b * (A.tx - e))),
                                    0 < n && 0 < e && n <= this.__bitmapData.width && e <= this.__bitmapData.height && !(null != this.__scrollRect && !this.__scrollRect.contains(n, e)) && (null == a || s || a.push(r), !0)
                                );
                            },
                            __hitTestMask: function (e, t) {
                                if (null == this.__bitmapData) return !1;
                                this.__getRenderTransform();
                                var n = this.__renderTransform,
                                    a = n.a * n.d - n.b * n.c;
                                n = 0 == a ? -n.tx : (1 / a) * (n.c * (n.ty - t) + n.d * (e - n.tx));
                                var s = (a = this.__renderTransform).a * a.d - a.b * a.c;
                                return (e = 0 == s ? -a.ty : (1 / s) * (a.a * (t - a.ty) + a.b * (a.tx - e))), 0 < n && 0 < e && n <= this.__bitmapData.width && e <= this.__bitmapData.height;
                            },
                            get_bitmapData: function () {
                                return this.__bitmapData;
                            },
                            set_bitmapData: function (e) {
                                return (this.__bitmapData = e), (this.smoothing = !1), this.__renderDirty || ((this.__renderDirty = !0), this.__setParentRenderDirty()), (this.__imageVersion = -1), this.__bitmapData;
                            },
                            get_height: function () {
                                return null != this.__bitmapData ? this.__bitmapData.height * Math.abs(this.get_scaleY()) : 0;
                            },
                            set_height: function (e) {
                                return null != this.__bitmapData ? this.set_scaleY(e / this.__bitmapData.height) : this.set_scaleY(0), e;
                            },
                            get_width: function () {
                                return null != this.__bitmapData ? this.__bitmapData.width * Math.abs(this.__scaleX) : 0;
                            },
                            set_width: function (e) {
                                return null != this.__bitmapData ? this.set_scaleX(e / this.__bitmapData.width) : this.set_scaleX(0), e;
                            },
                            __class__: Pc,
                            __properties__: K(gc.prototype.__properties__, { set_bitmapData: "set_bitmapData", get_bitmapData: "get_bitmapData" }),
                        }));
                    var m3 = function (e) {
                        Pc.call(this, e.frames[0]),
                            (this.model = e),
                            this.set_x(Math.round((-e.frameWidth / 2) * a.SCALE)),
                            this.set_y(Math.round((-e.frameHeight / 2) * a.SCALE)),
                            (this.frameIndex = this.timer = 0),
                            (this.individualDurations = !1),
                            (this.durations = e.durations),
                            (this.numFrames = this.durations.length),
                            (this.smoothing = x.antialias),
                            (this.finished = 1 >= this.numFrames),
                            null != this.filter
                                ? (this.filteredFrames[this.frameIndex] ||
                                      ((this.frames[this.frameIndex] = this.applyFilters(this.frames[this.frameIndex], this.model.frames[this.frameIndex], this.filter)), (this.filteredFrames[this.frameIndex] = !0)),
                                  this.set_bitmapData(this.frames[this.frameIndex]))
                                : this.set_bitmapData(this.model.frames[this.frameIndex]),
                            (this.smoothing = x.antialias);
                    };
                    (v["com.stencyl.graphics.BitmapAnimation"] = m3),
                        (m3.__name__ = "com.stencyl.graphics.BitmapAnimation"),
                        (m3.__interfaces__ = [J5]),
                        (m3.__super__ = Pc),
                        (m3.prototype = K(Pc.prototype, {
                            model: null,
                            frameIndex: null,
                            timer: null,
                            finished: null,
                            durations: null,
                            individualDurations: null,
                            frames: null,
                            numFrames: null,
                            filter: null,
                            filteredFrames: null,
                            update: function (e) {
                                this.model.sync && this.model.looping
                                    ? ((e = this.frameIndex),
                                      (this.timer = this.model.sharedTimer),
                                      (this.frameIndex = this.model.sharedFrameIndex),
                                      e != this.frameIndex &&
                                          (null != this.filter
                                              ? (this.filteredFrames[this.frameIndex] ||
                                                    ((this.frames[this.frameIndex] = this.applyFilters(this.frames[this.frameIndex], this.model.frames[this.frameIndex], this.filter)), (this.filteredFrames[this.frameIndex] = !0)),
                                                this.set_bitmapData(this.frames[this.frameIndex]))
                                              : this.set_bitmapData(this.model.frames[this.frameIndex]),
                                          (this.smoothing = x.antialias)))
                                    : ((this.timer += e),
                                      0 < this.numFrames &&
                                          this.timer > this.durations[this.frameIndex] &&
                                          ((e = this.frameIndex),
                                          (this.timer -= this.durations[this.frameIndex]),
                                          this.frameIndex++,
                                          this.frameIndex >= this.numFrames && (this.model.looping ? (this.frameIndex = 0) : ((this.finished = !0), this.frameIndex--)),
                                          e != this.frameIndex &&
                                              (null != this.filter
                                                  ? (this.filteredFrames[this.frameIndex] ||
                                                        ((this.frames[this.frameIndex] = this.applyFilters(this.frames[this.frameIndex], this.model.frames[this.frameIndex], this.filter)), (this.filteredFrames[this.frameIndex] = !0)),
                                                    this.set_bitmapData(this.frames[this.frameIndex]))
                                                  : this.set_bitmapData(this.model.frames[this.frameIndex]),
                                              (this.smoothing = x.antialias))));
                            },
                            getCurrentFrame: function () {
                                return this.frameIndex;
                            },
                            getNumFrames: function () {
                                return this.numFrames;
                            },
                            setFrame: function (e) {
                                (0 > e || e >= this.numFrames) && (e = 0),
                                    e != this.frameIndex &&
                                        ((this.frameIndex = e),
                                        null != this.filter
                                            ? (this.filteredFrames[this.frameIndex] ||
                                                  ((this.frames[this.frameIndex] = this.applyFilters(this.frames[this.frameIndex], this.model.frames[this.frameIndex], this.filter)), (this.filteredFrames[this.frameIndex] = !0)),
                                              this.set_bitmapData(this.frames[this.frameIndex]))
                                            : this.set_bitmapData(this.model.frames[this.frameIndex]),
                                        (this.smoothing = x.antialias)),
                                    (this.timer = 0),
                                    (this.finished = !1);
                            },
                            isFinished: function () {
                                return this.finished;
                            },
                            reset: function () {
                                (this.frameIndex = this.timer = 0),
                                    (this.finished = !1),
                                    null != this.filter
                                        ? (this.filteredFrames[this.frameIndex] ||
                                              ((this.frames[this.frameIndex] = this.applyFilters(this.frames[this.frameIndex], this.model.frames[this.frameIndex], this.filter)), (this.filteredFrames[this.frameIndex] = !0)),
                                          this.set_bitmapData(this.frames[this.frameIndex]))
                                        : this.set_bitmapData(this.model.frames[this.frameIndex]),
                                    (this.smoothing = x.antialias);
                            },
                            updateBitmap: function () {
                                null != this.filter
                                    ? (this.filteredFrames[this.frameIndex] ||
                                          ((this.frames[this.frameIndex] = this.applyFilters(this.frames[this.frameIndex], this.model.frames[this.frameIndex], this.filter)), (this.filteredFrames[this.frameIndex] = !0)),
                                      this.set_bitmapData(this.frames[this.frameIndex]))
                                    : this.set_bitmapData(this.model.frames[this.frameIndex]),
                                    (this.smoothing = x.antialias);
                            },
                            set_filter: function (e) {
                                this.filter = e;
                                for (var t = [], n = 0, a = this.numFrames; n < a; ) n++, t.push(!1);
                                for (this.filteredFrames = t, t = [], n = 0, a = this.numFrames; n < a; ) n++, t.push(null);
                                return (
                                    (this.frames = t),
                                    null != this.filter
                                        ? (this.filteredFrames[this.frameIndex] ||
                                              ((this.frames[this.frameIndex] = this.applyFilters(this.frames[this.frameIndex], this.model.frames[this.frameIndex], this.filter)), (this.filteredFrames[this.frameIndex] = !0)),
                                          this.set_bitmapData(this.frames[this.frameIndex]))
                                        : this.set_bitmapData(this.model.frames[this.frameIndex]),
                                    (this.smoothing = x.antialias),
                                    e
                                );
                            },
                            applyFilters: function (e, t, n) {
                                null == e && (e = new y(t.width, t.height));
                                for (var a = 0; a < n.length; ) {
                                    var s = n[a];
                                    ++a, (t = s.__applyFilter(e, t, t.rect, Gb.zero));
                                }
                                return e;
                            },
                            draw: function (e, t, n, s, r) {
                                if (!x.disposeImages || this.model.checkImageReadable()) {
                                    if (
                                        ((r = this.get_bitmapData()),
                                        null == s && (s = 0),
                                        (t *= e.scaleX),
                                        (n *= e.scaleY),
                                        (e.rect.x = 0),
                                        (e.rect.y = 0),
                                        (e.rect.width = r.width),
                                        (e.rect.height = r.height),
                                        e.drawActor
                                            ? null != e.actor && e.actor.isHUD
                                                ? ((e.point.x = e.x + t), (e.point.y = e.y + n))
                                                : ((e.point.x = e.x + t - a.cameraX), (e.point.y = e.y + n - a.cameraY))
                                            : ((e.point.x = e.x + t), (e.point.y = e.y + n)),
                                        e.mtx.identity(),
                                        e.mtx.rotate(s),
                                        e.mtx.translate(e.point.x, e.point.y),
                                        0 == s)
                                    )
                                        1 != e.alpha &&
                                            ((e.point2.x = 0),
                                            (e.point2.y = 0),
                                            (e.rect2.width = r.width),
                                            (e.rect2.height = r.height),
                                            (n = new y(r.width, r.height, !0, e.toARGB(0, (255 * e.alpha) | 0))),
                                            (t = new y(r.width, r.height, !0, 0)).copyPixels(r, e.rect2, e.point2, n, null, !0),
                                            (r = t)),
                                            e.graphics.beginBitmapFill(r, e.mtx),
                                            e.graphics.drawRect(e.point.x, e.point.y, r.width, r.height);
                                    else {
                                        1 != e.alpha &&
                                            ((e.point2.x = 0),
                                            (e.point2.y = 0),
                                            (e.rect2.width = r.width),
                                            (e.rect2.height = r.height),
                                            (n = new y(r.width, r.height, !0, e.toARGB(0, (255 * e.alpha) | 0))),
                                            (t = new y(r.width, r.height, !0, 0)).copyPixels(r, e.rect2, e.point2, n, null, !0),
                                            (r = t)),
                                            (n = new y(r.width + 2, r.height + 2, !0, 0)),
                                            (t = 0 | Math.sqrt(Math.pow(n.width, 2) + Math.pow(n.height, 2))),
                                            (s = new xe(0, 0, r.width, r.height));
                                        var A = new wf(1, 1);
                                        n.copyPixels(r, s, A), e.graphics.beginBitmapFill(n, e.mtx, !1, x.antialias), e.graphics.drawRect(e.x - (t - r.width) / 2, e.y - (t - r.height) / 2, t, t);
                                    }
                                    e.graphics.endFill();
                                }
                            },
                            getFrameDurations: function () {
                                return this.durations;
                            },
                            setFrameDurations: function (e) {
                                if (null != this.durations) {
                                    for (var t = [], n = 0, a = this.durations.length; n < a; ) n++, t.push(e);
                                    (this.durations = t), (this.individualDurations = !0);
                                }
                            },
                            setFrameDuration: function (e, t) {
                                if (!this.individualDurations) {
                                    for (var n = [], a = 0, s = this.durations.length; a < s; ) {
                                        var r = a++;
                                        n.push(this.durations[r]);
                                    }
                                    (this.durations = n), (this.individualDurations = !0);
                                }
                                0 <= e && e < this.durations.length && (this.durations[e] = t);
                            },
                            framesUpdated: function () {
                                this.set_x(Math.round((-this.model.frameWidth / 2) * a.SCALE)),
                                    this.set_y(Math.round((-this.model.frameHeight / 2) * a.SCALE)),
                                    null != this.filter
                                        ? (this.filteredFrames[this.frameIndex] ||
                                              ((this.frames[this.frameIndex] = this.applyFilters(this.frames[this.frameIndex], this.model.frames[this.frameIndex], this.filter)), (this.filteredFrames[this.frameIndex] = !0)),
                                          this.set_bitmapData(this.frames[this.frameIndex]))
                                        : this.set_bitmapData(this.model.frames[this.frameIndex]),
                                    (this.smoothing = x.antialias);
                            },
                            getCurrentImage: function () {
                                return x.disposeImages && !this.model.checkImageReadable() ? YD.UNLOADED : this.get_bitmapData();
                            },
                            activate: function () {},
                            __class__: m3,
                            __properties__: K(Pc.prototype.__properties__, { set_filter: "set_filter" }),
                        }));
                    var eV = function () {};
                    (v["com.stencyl.graphics.EngineScaleUpdateListener"] = eV), (eV.__name__ = "com.stencyl.graphics.EngineScaleUpdateListener"), (eV.__isInterface__ = !0), (eV.prototype = { updateScale: null, __class__: eV });
                    var Md = function (e) {
                        (this.cacheParentAnchor = Gb.zero), Yb.call(this), (this.img = e), (this.offsetY = this.offsetX = 0), this.addChild(e);
                    };
                    (v["com.stencyl.graphics.BitmapWrapper"] = Md),
                        (Md.__name__ = "com.stencyl.graphics.BitmapWrapper"),
                        (Md.__interfaces__ = [eV]),
                        (Md.__super__ = Yb),
                        (Md.prototype = K(Yb.prototype, {
                            img: null,
                            offsetX: null,
                            offsetY: null,
                            cacheParentAnchor: null,
                            smoothing: null,
                            imgX: null,
                            imgY: null,
                            tweenProps: null,
                            set_imgX: function (e) {
                                return this.set_x((e + this.offsetX) * a.SCALE - this.cacheParentAnchor.x), (this.imgX = e);
                            },
                            get_imgX: function () {
                                return this.imgX;
                            },
                            set_imgY: function (e) {
                                return this.set_y((e + this.offsetY) * a.SCALE - this.cacheParentAnchor.y), (this.imgY = e);
                            },
                            get_imgY: function () {
                                return this.imgY;
                            },
                            set_smoothing: function (e) {
                                return (this.img.smoothing = e);
                            },
                            get_smoothing: function () {
                                return this.img.smoothing;
                            },
                            setOrigin: function (e, t) {
                                this.set_x(this.get_x() + (e - this.offsetX) * a.SCALE),
                                    this.set_y(this.get_y() + (t - this.offsetY) * a.SCALE),
                                    (this.offsetX = e),
                                    (this.offsetY = t),
                                    this.img.set_x(-e * a.SCALE),
                                    this.img.set_y(-t * a.SCALE);
                            },
                            updateScale: function () {
                                this.updatePosition();
                            },
                            updatePosition: function () {
                                this.set_x((this.get_imgX() + this.offsetX) * a.SCALE - this.cacheParentAnchor.x), this.set_y((this.get_imgY() + this.offsetY) * a.SCALE - this.cacheParentAnchor.y);
                            },
                            get_tweenProps: function () {
                                return null == this.tweenProps && (this.tweenProps = new T8(this)), this.tweenProps;
                            },
                            __class__: Md,
                            __properties__: K(Yb.prototype.__properties__, {
                                get_tweenProps: "get_tweenProps",
                                set_imgY: "set_imgY",
                                get_imgY: "get_imgY",
                                set_imgX: "set_imgX",
                                get_imgX: "get_imgX",
                                set_smoothing: "set_smoothing",
                                get_smoothing: "get_smoothing",
                            }),
                        }));
                    var T8 = function (e) {
                        (this.bmp = e),
                            (this.xy = new eL().doOnUpdate(N(this, this.onUpdateXY))),
                            (this.angle = new zn().doOnUpdate(N(this, this.onUpdateAngle))),
                            (this.alpha = new zn().doOnUpdate(N(this, this.onUpdateAlpha))),
                            (this.scaleXY = new eL().doOnUpdate(N(this, this.onUpdateScaleXY)));
                    };
                    (v["com.stencyl.graphics.BitmapTweenProperties"] = T8),
                        (T8.__name__ = "com.stencyl.graphics.BitmapTweenProperties"),
                        (T8.prototype = {
                            xy: null,
                            angle: null,
                            alpha: null,
                            scaleXY: null,
                            bmp: null,
                            pause: function () {
                                (this.xy.paused = !0), (this.angle.paused = !0), (this.alpha.paused = !0), (this.scaleXY.paused = !0);
                            },
                            unpause: function () {
                                (this.xy.paused = !1), (this.angle.paused = !1), (this.alpha.paused = !1), (this.scaleXY.paused = !1);
                            },
                            cancel: function () {
                                this.xy.active && Xq.cancel(this.xy), this.angle.active && Xq.cancel(this.angle), this.alpha.active && Xq.cancel(this.alpha), this.scaleXY.active && Xq.cancel(this.scaleXY);
                            },
                            onUpdateXY: function () {
                                this.bmp.set_imgX(this.xy.value1), this.bmp.set_imgY(this.xy.value2);
                            },
                            onUpdateAngle: function () {
                                this.bmp.set_rotation(this.angle.value);
                            },
                            onUpdateAlpha: function () {
                                this.bmp.set_alpha(this.alpha.value);
                            },
                            onUpdateScaleXY: function () {
                                this.bmp.set_scaleX(this.scaleXY.value1), this.bmp.set_scaleY(this.scaleXY.value2);
                            },
                            __class__: T8,
                        });
                    var K5 = function () {};
                    (v["com.stencyl.graphics.BlendModes"] = K5),
                        (K5.__name__ = "com.stencyl.graphics.BlendModes"),
                        (K5.get = function (t) {
                            var n = K5.stringBlendMap;
                            return null != e[t] ? n.getReserved(t) : n.h[t];
                        });
                    var r = function () {
                        (this.drawActor = !1),
                            (this.x = this.y = 0),
                            (this.scaleX = this.scaleY = a.SCALE),
                            (this.alpha = 1),
                            (this.blendMode = 10),
                            (this.strokeColor = this.fillColor = this.strokeSize = 0),
                            (this.rect = new xe()),
                            (this.rect2 = new xe()),
                            (this.point = new wf()),
                            (this.point2 = new wf()),
                            (this.data = [0, 0, 0]),
                            (this.drawPoly = !1),
                            (this.firstY = this.firstX = this.pointCounter = 0),
                            (this.font = this.defaultFont = new dL(-1, 0, "", !0)),
                            (this.mtx = new uh());
                    };
                    (v["com.stencyl.graphics.G"] = r),
                        (r.__name__ = "com.stencyl.graphics.G"),
                        (r.resetStatics = function () {
                            r.fontCache = null;
                        }),
                        (r.visitStringCache = function () {
                            for (var t = r.drawnStringCacheKeys.length; 0 < t--; ) {
                                var n = r.drawnStringCacheKeys[t],
                                    a = r.drawnStringCache;
                                --(n = null != e[n] ? a.getReserved(n) : a.h[n]).lifetime,
                                    0 == n.lifetime &&
                                        (n.img.dispose(), r.drawnStringCache.remove(r.drawnStringCacheKeys[t]), (r.drawnStringCacheKeys[t] = r.drawnStringCacheKeys[r.drawnStringCacheKeys.length - 1]), r.drawnStringCacheKeys.pop());
                            }
                        }),
                        (r.prototype = {
                            defaultFont: null,
                            graphics: null,
                            x: null,
                            y: null,
                            scaleX: null,
                            scaleY: null,
                            alpha: null,
                            blendMode: null,
                            strokeSize: null,
                            fillColor: null,
                            strokeColor: null,
                            font: null,
                            fontData: null,
                            mtx: null,
                            rect: null,
                            rect2: null,
                            point: null,
                            point2: null,
                            data: null,
                            drawPoly: null,
                            pointCounter: null,
                            firstX: null,
                            firstY: null,
                            drawActor: null,
                            actor: null,
                            resetGraphicsSettings: function () {
                                (this.alpha = 1), (this.strokeColor = this.fillColor = this.strokeSize = 0), (this.font = this.defaultFont);
                            },
                            setFont: function (e) {
                                null != e && e != this.font && (this.font = e);
                            },
                            startGraphics: function () {
                                !this.drawActor || (null != this.actor && this.actor.isHUD) || ((this.x -= a.cameraX), (this.y -= a.cameraY)),
                                    0 == this.strokeSize ? this.graphics.lineStyle() : this.graphics.lineStyle(this.strokeSize * a.SCALE, this.strokeColor, this.alpha);
                            },
                            endGraphics: function () {
                                this.drawActor && !this.actor.isHUD && ((this.x += a.cameraX), (this.y += a.cameraY)), this.graphics.lineStyle();
                            },
                            translate: function (e, t) {
                                (this.x += e * this.scaleX), (this.y += t * this.scaleY);
                            },
                            moveTo: function (e, t) {
                                if (this.drawActor) {
                                    if (null != this.actor) {
                                        var n = this.actor;
                                        if (((this.drawActor = !0), (this.actor = n), n.smoothMove)) {
                                            var a = n.drawY - Math.floor(n.cacheHeight / 2) - n.currOffset.y;
                                            (this.x = (n.drawX - Math.floor(n.cacheWidth / 2) - n.currOffset.x) * this.scaleX), (this.y = a * this.scaleY);
                                        } else (this.x = n.colX * this.scaleX), (this.y = n.colY * this.scaleY);
                                    }
                                    (this.x += e * this.scaleX), (this.y += t * this.scaleY);
                                } else (this.x = e * this.scaleX), (this.y = t * this.scaleY);
                            },
                            translateToScreen: function () {
                                (this.drawActor = !1), (this.actor = null), (this.y = this.x = 0);
                            },
                            translateToActor: function (e) {
                                if (((this.drawActor = !0), (this.actor = e), e.smoothMove)) {
                                    var t = e.drawY - Math.floor(e.cacheHeight / 2) - e.currOffset.y;
                                    (this.x = (e.drawX - Math.floor(e.cacheWidth / 2) - e.currOffset.x) * this.scaleX), (this.y = t * this.scaleY);
                                } else (this.x = e.colX * this.scaleX), (this.y = e.colY * this.scaleY);
                            },
                            getCacheKey: function (e, t, n) {
                                return e + ":" + t.ID + ":" + n + ":" + t.letterSpacing + ":" + a.SCALE;
                            },
                            drawString: function (t, n, s) {
                                null == this.font && ((this.font = this.defaultFont), this.font.fontScale != a.SCALE && (this.font.fontScale = a.SCALE)),
                                    this.drawActor
                                        ? null != this.actor && this.actor.isHUD
                                            ? ((n = this.x + n * this.scaleX), (s = this.y + s * this.scaleY))
                                            : ((n = this.x + n * this.scaleX - a.cameraX), (s = this.y + s * this.scaleY - a.cameraY))
                                        : ((n = this.x + n * this.scaleX), (s = this.y + s * this.scaleY)),
                                    this.mtx.identity(),
                                    this.mtx.translate(n, s);
                                var A = null,
                                    l = this.font;
                                l = t + ":" + l.ID + ":" + this.alpha + ":" + l.letterSpacing + ":" + a.SCALE;
                                var o = r.drawnStringCache;
                                if (null != e[l] ? o.existsReserved(l) : o.h.hasOwnProperty(l)) (t = r.drawnStringCache), ((t = null != e[l] ? t.getReserved(l) : t.h[l]).lifetime = 5), (A = t.img);
                                else {
                                    o = this.font.font.getTextWidth(t, this.font.letterSpacing, this.font.fontScale);
                                    var i = (this.font.font.getFontHeight() * this.font.fontScale) | 0;
                                    0 < o &&
                                        0 < i &&
                                        ((A = new y(o, i, !0, 0)),
                                        this.font.font.renderToImg(A, t, 0, this.alpha, 0, 0, this.font.letterSpacing, this.font.fontScale, 0, !1),
                                        ((t = new z()).img = A),
                                        (t.lifetime = 5),
                                        (o = r.drawnStringCache),
                                        null != e[l] ? o.setReserved(l, t) : (o.h[l] = t),
                                        r.drawnStringCacheKeys.push(l));
                                }
                                null != A && (this.graphics.beginBitmapFill(A, this.mtx, !1, x.antialias), this.graphics.drawRect(n, s, A.width, A.height), this.graphics.endFill());
                            },
                            drawLine: function (e, t, n, s) {
                                (e *= this.scaleX),
                                    (t *= this.scaleY),
                                    (n *= this.scaleX),
                                    (s *= this.scaleY),
                                    !this.drawActor || (null != this.actor && this.actor.isHUD) || ((this.x -= a.cameraX), (this.y -= a.cameraY)),
                                    0 == this.strokeSize ? this.graphics.lineStyle() : this.graphics.lineStyle(this.strokeSize * a.SCALE, this.strokeColor, this.alpha),
                                    this.graphics.moveTo(this.x + e, this.y + t),
                                    this.graphics.lineTo(this.x + n, this.y + s),
                                    this.drawActor && !this.actor.isHUD && ((this.x += a.cameraX), (this.y += a.cameraY)),
                                    this.graphics.lineStyle();
                            },
                            fillPixel: function (e, t) {
                                !this.drawActor || (null != this.actor && this.actor.isHUD) || ((this.x -= a.cameraX), (this.y -= a.cameraY)),
                                    0 == this.strokeSize ? this.graphics.lineStyle() : this.graphics.lineStyle(this.strokeSize * a.SCALE, this.strokeColor, this.alpha),
                                    this.graphics.lineStyle(),
                                    this.graphics.beginFill(this.fillColor, this.alpha),
                                    this.graphics.drawRect(this.x + ((e * a.SCALE) | 0), this.y + ((t * a.SCALE) | 0), 0 | a.SCALE, 0 | a.SCALE),
                                    this.graphics.endFill(),
                                    this.drawActor && !this.actor.isHUD && ((this.x += a.cameraX), (this.y += a.cameraY)),
                                    this.graphics.lineStyle();
                            },
                            drawRect: function (e, t, n, s) {
                                (e *= this.scaleX),
                                    (t *= this.scaleY),
                                    (n *= this.scaleX),
                                    (s *= this.scaleY),
                                    !this.drawActor || (null != this.actor && this.actor.isHUD) || ((this.x -= a.cameraX), (this.y -= a.cameraY)),
                                    0 == this.strokeSize ? this.graphics.lineStyle() : this.graphics.lineStyle(this.strokeSize * a.SCALE, this.strokeColor, this.alpha),
                                    this.graphics.drawRect(this.x + e, this.y + t, n, s),
                                    this.drawActor && !this.actor.isHUD && ((this.x += a.cameraX), (this.y += a.cameraY)),
                                    this.graphics.lineStyle();
                            },
                            fillRect: function (e, t, n, s) {
                                (e *= this.scaleX),
                                    (t *= this.scaleY),
                                    (n *= this.scaleX),
                                    (s *= this.scaleY),
                                    !this.drawActor || (null != this.actor && this.actor.isHUD) || ((this.x -= a.cameraX), (this.y -= a.cameraY)),
                                    0 == this.strokeSize ? this.graphics.lineStyle() : this.graphics.lineStyle(this.strokeSize * a.SCALE, this.strokeColor, this.alpha),
                                    this.graphics.beginFill(this.fillColor, this.alpha),
                                    this.graphics.drawRect(this.x + e, this.y + t, n, s),
                                    this.graphics.endFill(),
                                    this.drawActor && !this.actor.isHUD && ((this.x += a.cameraX), (this.y += a.cameraY)),
                                    this.graphics.lineStyle();
                            },
                            drawRoundRect: function (e, t, n, s, r) {
                                (e *= this.scaleX),
                                    (t *= this.scaleY),
                                    (n *= this.scaleX),
                                    (s *= this.scaleY),
                                    !this.drawActor || (null != this.actor && this.actor.isHUD) || ((this.x -= a.cameraX), (this.y -= a.cameraY)),
                                    0 == this.strokeSize ? this.graphics.lineStyle() : this.graphics.lineStyle(this.strokeSize * a.SCALE, this.strokeColor, this.alpha),
                                    this.graphics.drawRoundRect(this.x + e, this.y + t, n, s, r, r),
                                    this.drawActor && !this.actor.isHUD && ((this.x += a.cameraX), (this.y += a.cameraY)),
                                    this.graphics.lineStyle();
                            },
                            fillRoundRect: function (e, t, n, s, r) {
                                (e *= this.scaleX),
                                    (t *= this.scaleY),
                                    (n *= this.scaleX),
                                    (s *= this.scaleY),
                                    !this.drawActor || (null != this.actor && this.actor.isHUD) || ((this.x -= a.cameraX), (this.y -= a.cameraY)),
                                    0 == this.strokeSize ? this.graphics.lineStyle() : this.graphics.lineStyle(this.strokeSize * a.SCALE, this.strokeColor, this.alpha),
                                    this.graphics.beginFill(this.fillColor, this.alpha),
                                    this.graphics.drawRoundRect(this.x + e, this.y + t, n, s, r, r),
                                    this.graphics.endFill(),
                                    this.drawActor && !this.actor.isHUD && ((this.x += a.cameraX), (this.y += a.cameraY)),
                                    this.graphics.lineStyle();
                            },
                            drawCircle: function (e, t, n) {
                                (e *= this.scaleX),
                                    (t *= this.scaleY),
                                    (n *= this.scaleX),
                                    !this.drawActor || (null != this.actor && this.actor.isHUD) || ((this.x -= a.cameraX), (this.y -= a.cameraY)),
                                    0 == this.strokeSize ? this.graphics.lineStyle() : this.graphics.lineStyle(this.strokeSize * a.SCALE, this.strokeColor, this.alpha),
                                    this.graphics.drawCircle(this.x + e, this.y + t, n),
                                    this.drawActor && !this.actor.isHUD && ((this.x += a.cameraX), (this.y += a.cameraY)),
                                    this.graphics.lineStyle();
                            },
                            fillCircle: function (e, t, n) {
                                (e *= this.scaleX),
                                    (t *= this.scaleY),
                                    (n *= this.scaleX),
                                    !this.drawActor || (null != this.actor && this.actor.isHUD) || ((this.x -= a.cameraX), (this.y -= a.cameraY)),
                                    0 == this.strokeSize ? this.graphics.lineStyle() : this.graphics.lineStyle(this.strokeSize * a.SCALE, this.strokeColor, this.alpha),
                                    this.graphics.beginFill(this.fillColor, this.alpha),
                                    this.graphics.drawCircle(this.x + e, this.y + t, n),
                                    this.graphics.endFill(),
                                    this.drawActor && !this.actor.isHUD && ((this.x += a.cameraX), (this.y += a.cameraY)),
                                    this.graphics.lineStyle();
                            },
                            beginFillPolygon: function () {
                                (this.drawPoly = !1),
                                    !this.drawActor || (null != this.actor && this.actor.isHUD) || ((this.x -= a.cameraX), (this.y -= a.cameraY)),
                                    0 == this.strokeSize ? this.graphics.lineStyle() : this.graphics.lineStyle(this.strokeSize * a.SCALE, this.strokeColor, this.alpha),
                                    this.graphics.moveTo(this.x, this.y),
                                    (this.pointCounter = 0);
                            },
                            endDrawingPolygon: function () {
                                2 <= this.pointCounter &&
                                    (this.drawPoly ? this.graphics.lineTo(this.x + this.firstX, this.y + this.firstY) : (this.graphics.lineTo(this.x + this.firstX, this.y + this.firstY), this.graphics.endFill()),
                                    this.drawActor && !this.actor.isHUD && ((this.x += a.cameraX), (this.y += a.cameraY)),
                                    this.graphics.lineStyle());
                            },
                            beginDrawPolygon: function () {
                                (this.drawPoly = !0),
                                    !this.drawActor || (null != this.actor && this.actor.isHUD) || ((this.x -= a.cameraX), (this.y -= a.cameraY)),
                                    0 == this.strokeSize ? this.graphics.lineStyle() : this.graphics.lineStyle(this.strokeSize * a.SCALE, this.strokeColor, this.alpha),
                                    this.graphics.moveTo(this.x, this.y),
                                    (this.pointCounter = 0);
                            },
                            addPointToPolygon: function (e, t) {
                                (e *= this.scaleX),
                                    (t *= this.scaleY),
                                    0 == this.pointCounter && ((this.firstX = e), (this.firstY = t), this.graphics.moveTo(this.x + e, this.y + t), this.drawPoly || this.graphics.beginFill(this.fillColor, this.alpha)),
                                    this.pointCounter++,
                                    this.graphics.lineTo(this.x + e, this.y + t);
                            },
                            drawImage: function (e, t, n, s, r) {
                                null == s && (s = 0),
                                    (t *= this.scaleX),
                                    (n *= this.scaleY),
                                    (this.rect.x = 0),
                                    (this.rect.y = 0),
                                    (this.rect.width = e.width),
                                    (this.rect.height = e.height),
                                    this.drawActor
                                        ? null != this.actor && this.actor.isHUD
                                            ? ((this.point.x = this.x + t), (this.point.y = this.y + n))
                                            : ((this.point.x = this.x + t - a.cameraX), (this.point.y = this.y + n - a.cameraY))
                                        : ((this.point.x = this.x + t), (this.point.y = this.y + n)),
                                    this.mtx.identity(),
                                    this.mtx.rotate(s),
                                    this.mtx.translate(this.point.x, this.point.y),
                                    0 == s
                                        ? (1 != this.alpha &&
                                              ((this.point2.x = 0),
                                              (this.point2.y = 0),
                                              (this.rect2.width = e.width),
                                              (this.rect2.height = e.height),
                                              (t = new y(e.width, e.height, !0, this.toARGB(0, (255 * this.alpha) | 0))),
                                              (n = new y(e.width, e.height, !0, 0)).copyPixels(e, this.rect2, this.point2, t, null, !0),
                                              (e = n)),
                                          this.graphics.beginBitmapFill(e, this.mtx),
                                          this.graphics.drawRect(this.point.x, this.point.y, e.width, e.height))
                                        : (1 != this.alpha &&
                                              ((this.point2.x = 0),
                                              (this.point2.y = 0),
                                              (this.rect2.width = e.width),
                                              (this.rect2.height = e.height),
                                              (t = new y(e.width, e.height, !0, this.toARGB(0, (255 * this.alpha) | 0))),
                                              (n = new y(e.width, e.height, !0, 0)).copyPixels(e, this.rect2, this.point2, t, null, !0),
                                              (e = n)),
                                          (t = new y(e.width + 2, e.height + 2, !0, 0)),
                                          (n = 0 | Math.sqrt(Math.pow(t.width, 2) + Math.pow(t.height, 2))),
                                          (s = new xe(0, 0, e.width, e.height)),
                                          (r = new wf(1, 1)),
                                          t.copyPixels(e, s, r),
                                          this.graphics.beginBitmapFill(t, this.mtx, !1, x.antialias),
                                          this.graphics.drawRect(this.x - (n - e.width) / 2, this.y - (n - e.height) / 2, n, n)),
                                    this.graphics.endFill();
                            },
                            toARGB: function (e, t) {
                                return e + (t << 24);
                            },
                            resetFont: function () {
                                (this.font = this.defaultFont), this.font.fontScale != a.SCALE && (this.font.fontScale = a.SCALE);
                            },
                            __class__: r,
                        });
                    var z = function () {};
                    (v["com.stencyl.graphics._G.TemporaryImage"] = z), (z.__name__ = "com.stencyl.graphics._G.TemporaryImage"), (z.prototype = { lifetime: null, img: null, __class__: z });
                    var Hy = function () {};
                    (v["com.stencyl.graphics.GLUtil"] = Hy),
                        (Hy.__name__ = "com.stencyl.graphics.GLUtil"),
                        (Hy.initialize = function () {
                            null == Hy.gl &&
                                ((Hy.context = a.stage.window.context),
                                (Hy.context3D = a.stage.context3D),
                                (Hy.gl = Yq.fromRenderContext(Hy.context)),
                                (Hy.renderer = a.stage.__renderer),
                                (Hy.textureMaxSize = Hy.gl.getParameter(Hy.gl.MAX_TEXTURE_SIZE)),
                                (Hy.textureMaxSize = (Hy.textureMaxSize / 2) | 0),
                                Hy.textureMaxSize > Hy.MAX_TEXTURE_CAP && (Hy.textureMaxSize = Hy.MAX_TEXTURE_CAP),
                                null == y.__supportsBGRA && new y(1, 1, !0, 0).getTexture(Hy.context3D));
                        }),
                        (Hy.uploadTexture = function (e, t) {
                            e.getTexture(Hy.context3D), t && Hy.disposeSoftwareBuffer(e);
                        }),
                        (Hy.disposeSoftwareBuffer = function (e) {
                            (e.image = null), (e.readable = !1), (e.__surface = null), (e.__vertexBuffer = null), (e.__framebuffer = null), (e.__framebufferContext = null);
                        }),
                        (Hy.createNewTexture = function (e) {
                            var t = Hy.context3D.createRectangleTexture(e, e, 1, !1);
                            t.uploadFromTypedArray(null);
                            var n = new y(0, 0, !0, 0);
                            return n.__resize(e, e), (n.readable = !1), (n.__texture = t), (n.__textureContext = Hy.context), (n.__isValid = !0), (n.image = null), n;
                        }),
                        (Hy.clearTexture = function (e) {
                            e.__texture.uploadFromTypedArray(null);
                        });
                    var AA = function (e) {
                        this.value = e;
                    };
                    (v["com.stencyl.graphics.Scale"] = AA),
                        (AA.__name__ = "com.stencyl.graphics.Scale"),
                        (AA.fromString = function (e) {
                            switch (e) {
                                case "1.5x":
                                    return AA._1_5X;
                                case "1x":
                                    return AA._1X;
                                case "2x":
                                    return AA._2X;
                                case "3x":
                                    return AA._3X;
                                case "4x":
                                    return AA._4X;
                                default:
                                    return AA._1X;
                            }
                        }),
                        (AA.prototype = {
                            value: null,
                            toString: function () {
                                return 1 == this.value ? "1x" : 1.5 == this.value ? "1.5x" : 2 == this.value ? "2x" : 3 == this.value ? "3x" : 4 == this.value ? "4x" : "";
                            },
                            __class__: AA,
                        });
                    var rQ = {};
                    (v["com.stencyl.graphics._ScaleMode.ScaleMode_Impl_"] = rQ),
                        (rQ.__name__ = "com.stencyl.graphics._ScaleMode.ScaleMode_Impl_"),
                        (rQ._new = function (e) {
                            return e;
                        }),
                        (rQ.fromString = function (e) {
                            switch (e) {
                                case "FULLSCREEN":
                                    return 1;
                                case "NO_SCALING":
                                    return 0;
                                case "SCALE_TO_FIT_FILL":
                                    return 4;
                                case "SCALE_TO_FIT_FULLSCREEN":
                                    return 5;
                                case "SCALE_TO_FIT_LETTERBOX":
                                    return 3;
                                case "STRETCH_TO_FIT":
                                    return 2;
                                default:
                                    return 0;
                            }
                        }),
                        (rQ.toString = function (e) {
                            switch (e) {
                                case 0:
                                    return "NO_SCALING";
                                case 1:
                                    return "FULLSCREEN";
                                case 2:
                                    return "STRETCH_TO_FIT";
                                case 3:
                                    return "SCALE_TO_FIT_LETTERBOX";
                                case 4:
                                    return "SCALE_TO_FIT_FILL";
                                case 5:
                                    return "SCALE_TO_FIT_FULLSCREEN";
                                default:
                                    return "NO_SCALING";
                            }
                        });
                    var RJ = function () {
                        (this.lineSpacing = 0), (this.isDefault = !1), (this._maxHeight = 0), (this._point = new wf()), (this._glyphs = new wi()), (this._num_letters = 0);
                    };
                    (v["com.stencyl.graphics.fonts.BitmapFont"] = RJ),
                        (RJ.__name__ = "com.stencyl.graphics.fonts.BitmapFont"),
                        (RJ.store = function (t, n) {
                            var a = RJ._storedFonts;
                            null != e[t] ? a.setReserved(t, n) : (a.h[t] = n);
                        }),
                        (RJ.fetch = function (t) {
                            var n = RJ._storedFonts;
                            return null != e[t] ? n.getReserved(t) : n.h[t];
                        }),
                        (RJ.prototype = {
                            _glyphs: null,
                            _num_letters: null,
                            _tileset: null,
                            _glyphString: null,
                            _maxHeight: null,
                            _point: null,
                            isDefault: null,
                            lineSpacing: null,
                            loadPixelizer: function (e, t) {
                                if ((this.reset(), (this._glyphString = t), null != e)) {
                                    (t = []), (e = this.prepareBitmapData(e, t)), (this._tileset = new PV(e));
                                    for (var n = 0, a = t.length; n < a; ) {
                                        var s = n++;
                                        (e = t[s]), this.setGlyph(Qc.cca(this._glyphString, s), e, s, 0, 0, Math.floor(e.width));
                                    }
                                }
                                return this;
                            },
                            loadAngelCode: function (e, t) {
                                if ((this.reset(), null != e)) {
                                    this._glyphString = "";
                                    var n = new xe(),
                                        a = new wf(),
                                        s = 0;
                                    for (this._tileset = new PV(e), e = null, t = t.elements(); t.hasNext(); ) {
                                        var r = t.next();
                                        if (r.nodeType != Ne.Element) throw new Gc("Bad node type, expected Element but found " + og.toString(r.nodeType));
                                        if ("font" == r.nodeName)
                                            for (r = r.elements(); r.hasNext(); ) {
                                                var A = r.next();
                                                if (A.nodeType != Ne.Element) throw new Gc("Bad node type, expected Element but found " + og.toString(A.nodeType));
                                                if ("common" == A.nodeName) this.lineSpacing = g.parseInt(A.get("lineHeight"));
                                                else {
                                                    if (A.nodeType != Ne.Element) throw new Gc("Bad node type, expected Element but found " + og.toString(A.nodeType));
                                                    "chars" == A.nodeName && (e = A);
                                                }
                                            }
                                    }
                                    if (null != e)
                                        for (r = e.elements(); r.hasNext(); ) {
                                            if ((A = r.next()).nodeType != Ne.Element) throw new Gc("Bad node type, expected Element but found " + og.toString(A.nodeType));
                                            if ("char" == A.nodeName) {
                                                (n.x = g.parseInt(A.get("x"))),
                                                    (n.y = g.parseInt(A.get("y"))),
                                                    (n.width = g.parseInt(A.get("width"))),
                                                    (n.height = g.parseInt(A.get("height"))),
                                                    (a.x = g.parseInt(A.get("xoffset"))),
                                                    (a.y = g.parseInt(A.get("yoffset"))),
                                                    (e = g.parseInt(A.get("id"))),
                                                    (t = String.fromCodePoint(e)),
                                                    (this._glyphString += t);
                                                var l = (A = g.parseInt(A.get("xadvance")));
                                                n.width > A && ((l = 0 | n.width), (a.x = 0)), " " != t && "" != t ? this.setGlyph(e, n, s, Math.floor(a.x), Math.floor(a.y), l) : this.setGlyph(e, n, s, Math.floor(a.x), 1, l), ++s;
                                            }
                                        }
                                }
                                return this;
                            },
                            reset: function () {
                                this.dispose(), (this._maxHeight = 0), (this._glyphs = new wi()), (this._glyphString = "");
                            },
                            prepareBitmapData: function (e, t) {
                                for (var n, a = e.getPixel(0, 0), s = 0; s < e.height; ) {
                                    var r = 0;
                                    for (n = 0; n < e.width; ) {
                                        if ((0 | e.getPixel(n, s)) != a) {
                                            for (var A = n, l = s; (0 | e.getPixel(A, s)) != a; ) ++A;
                                            for (; (0 | e.getPixel(n, l)) != a; ) ++l;
                                            (A -= n), (l -= s), t.push(new xe(n, s, A, l)), l > r && (r = l), l > this._maxHeight && (this._maxHeight = l), (n += A);
                                        }
                                        ++n;
                                    }
                                    s += r + 1;
                                }
                                for (t = e.clone(), r = e.getPixel32(0, 0), s = 0; s < e.height; ) {
                                    for (n = 0; n < e.width; ) (a = e.getPixel32(n, s)) == r && t.setPixel32(n, s, 0), ++n;
                                    ++s;
                                }
                                return t;
                            },
                            dispose: function () {
                                (this._tileset = null), (this._num_letters = 0), (this._glyphs = null);
                            },
                            setGlyph: function (e, t, n, a, s, r) {
                                null == r && (r = 0), null == s && (s = 0), null == a && (a = 0), 0 == t.width && (t.width = 1), 0 == t.height && (t.height = 1), this._tileset.addRect(t);
                                var A = new U8();
                                (A.tileID = n), (A.xoffset = a), (A.yoffset = s), (A.xadvance = r), (this._glyphs.h[e] = A), this._num_letters++, Math.floor(t.height) + s > this._maxHeight && (this._maxHeight = Math.floor(t.height) + s);
                            },
                            render: function (e, t, n, a, s, r, A, l) {
                                for (this._point.x = a, this._point.y = s, s = a = 0, l = t.length; s < l; ) {
                                    var o = s++;
                                    if (!(o < a)) {
                                        var i = Qc.cca(t, o);
                                        126 == i && "x" == t.charAt(o + 1) && ((o = t.substring(o + 2, o + 6)), (i = g.parseInt("0x" + o)), (a += 5));
                                        var u = this._glyphs.h[i];
                                        this._glyphs.h.hasOwnProperty(i) &&
                                            ((o = u.xadvance),
                                            32 != i && ((i = new WP(u.tileID, this._point.x + u.xoffset * A, this._point.y + u.yoffset * A)).set_scaleX(A), i.set_scaleY(A), i.set_alpha(n), e.addTile(i)),
                                            (this._point.x += o * A + r)),
                                            ++a;
                                    }
                                }
                            },
                            renderToImg: function (e, t, n, a, s, r, A, l, o, i) {
                                null == i && (i = !0), null == o && (o = 0);
                                var u = new XP(e.width, e.height, this._tileset, x.antialias);
                                this.render(u, t, a, s, r, A, l, o), i ? e.draw(u, null, new Xs(((n >> 16) & 255) / 255, ((n >> 8) & 255) / 255, (255 & n) / 255)) : e.draw(u), u.removeTiles();
                            },
                            toARGB: function (e, t) {
                                return e + (t << 24);
                            },
                            getTextWidth: function (e, t, n) {
                                null == n && (n = 1), null == t && (t = 0);
                                for (var a = 0, s = 0, r = e.length, A = 0; A < r; ) {
                                    var l = A++;
                                    if (!(l < s)) {
                                        var o = Qc.cca(e, l);
                                        126 == o && "x" == e.charAt(l + 1) && ((l = e.substring(l + 2, l + 6)), (o = g.parseInt("0x" + l)), (s += 5)), this._glyphs.h.hasOwnProperty(o) && (a += this._glyphs.h[o].xadvance), ++s;
                                    }
                                }
                                return (a = Math.round(a * n)), 1 < r && (a += (r - 1) * t), a;
                            },
                            getFontHeight: function () {
                                return this._maxHeight;
                            },
                            numLetters: null,
                            get_numLetters: function () {
                                return this._num_letters;
                            },
                            containsCharacter: function (e) {
                                return 0 <= this._glyphString.indexOf(e);
                            },
                            getTileset: function () {
                                return this._tileset;
                            },
                            __class__: RJ,
                            __properties__: { get_numLetters: "get_numLetters" },
                        });
                    var fV = function () {};
                    (v["com.stencyl.graphics.fonts.DefaultFontGenerator"] = fV),
                        (fV.__name__ = "com.stencyl.graphics.fonts.DefaultFontGenerator"),
                        (fV.generateAndStoreDefaultFont = function () {
                            for (var e = "", t = new y(700, 9, !0, -7829368), n = 0, a = 0; a < fV.fontData.length; ) {
                                e += Qc.substr(fV.fontData, a, 1);
                                for (var s = g.parseInt(Qc.substr(fV.fontData, ++a, 1)), r = 0, A = g.parseInt(Qc.substr(fV.fontData, ++a, 1)); r < A; )
                                    for (var l = r++, o = 0, i = s; o < i; ) {
                                        var u = o++;
                                        ++a, "1" == Qc.substr(fV.fontData, a, 1) ? t.setPixel32(1 + 7 * n + u, 1 + l, -1) : t.setPixel32(1 + 7 * n + u, 1 + l, 0);
                                    }
                                ++a, ++n;
                            }
                            RJ.store("default", new RJ().loadPixelizer(t, e)), t.dispose();
                        });
                    var U8 = function () {};
                    (v["com.stencyl.graphics.fonts.FontSymbol"] = U8), (U8.__name__ = "com.stencyl.graphics.fonts.FontSymbol"), (U8.prototype = { xoffset: null, yoffset: null, xadvance: null, tileID: null, __class__: U8 });
                    var L5 = function (e) {
                        (this.cacheParentAnchor = Gb.zero),
                            Yb.call(this),
                            (this._text = ""),
                            (this._color = 0),
                            (this._useColor = !0),
                            (this._outline = !1),
                            (this._outlineColor = 0),
                            (this._shadow = !1),
                            (this._shadowColor = 0),
                            (this._background = !1),
                            (this._backgroundColor = 16777215),
                            (this._alignment = 1),
                            (this._padding = 0),
                            (this._pendingTextChange = !1),
                            (this._fieldWidth = 1),
                            (this._multiLine = !1),
                            (this._letterSpacing = this._lineSpacing = 0),
                            (this._fontScale = 1),
                            (this._autoUpperCase = !1),
                            (this._wordWrap = this._fixedWidth = !0),
                            (this._alpha = 1),
                            null == e ? (null == RJ.fetch("default") && fV.generateAndStoreDefaultFont(), (this._font = RJ.fetch("default"))) : (this._font = e),
                            this.set_cacheAsBitmap(!0),
                            (this._pendingTextChange = !0),
                            this.update();
                    };
                    (v["com.stencyl.graphics.fonts.Label"] = L5),
                        (L5.__name__ = "com.stencyl.graphics.fonts.Label"),
                        (L5.__interfaces__ = [eV]),
                        (L5.__super__ = Yb),
                        (L5.prototype = K(Yb.prototype, {
                            _stencylFont: null,
                            _font: null,
                            _text: null,
                            _color: null,
                            _useColor: null,
                            _outline: null,
                            _outlineColor: null,
                            _shadow: null,
                            _shadowColor: null,
                            _background: null,
                            _backgroundColor: null,
                            _alignment: null,
                            _padding: null,
                            _lineSpacing: null,
                            _letterSpacing: null,
                            _fontScale: null,
                            _autoUpperCase: null,
                            _wordWrap: null,
                            _fixedWidth: null,
                            _pendingTextChange: null,
                            _fieldWidth: null,
                            _multiLine: null,
                            _alpha: null,
                            labelX: null,
                            labelY: null,
                            _shadowTilemap: null,
                            _outlineTilemap: null,
                            _characterTilemap: null,
                            cacheParentAnchor: null,
                            destroy: function () {
                                (this._font = this._stencylFont = null), this.removeChildren(), (this._characterTilemap = this._shadowTilemap = this._outlineTilemap = null);
                            },
                            get_text: function () {
                                return this._text;
                            },
                            set_text: function (e) {
                                return (
                                    e.split("\\n").join("\n") != this._text &&
                                        ((this._text = e), (this._text = this._text.split("\\n").join("\n")), this._autoUpperCase && (this._text = this._text.toUpperCase()), (this._pendingTextChange = !0), this.update()),
                                    this._text
                                );
                            },
                            updateBitmapData: function () {
                                if (null != this._font) {
                                    var e,
                                        t,
                                        n = this._fieldWidth,
                                        a = [],
                                        s = this._font.getFontHeight(),
                                        r = this._alignment,
                                        A = this._text.split("\n"),
                                        l = -1;
                                    for (this._multiLine || (A = [A[0]]); ++l < A.length; )
                                        if (this._fixedWidth) {
                                            var o = !1,
                                                i = A[l].split(" ");
                                            if (0 < i.length)
                                                for (var u = 0, g = ""; !o; ) {
                                                    var m = g + (t = i[u]) + " ",
                                                        d = !1;
                                                    if (this._wordWrap)
                                                        this._font.getTextWidth(m, this._letterSpacing, this._fontScale) > this._fieldWidth
                                                            ? ("" == g ? i.splice(0, 1) : a.push(Qc.substr(g, 0, g.length - 1)), (g = ""), this._multiLine ? i.splice(0, u) : i.splice(0, i.length), (u = 0), (d = !0))
                                                            : ((g += t + " "), ++u);
                                                    else if (this._font.getTextWidth(m, this._letterSpacing, this._fontScale) > this._fieldWidth) {
                                                        var c = 0;
                                                        for (e = t.length; c < e; )
                                                            (m = g + t.charAt(c)),
                                                                this._font.getTextWidth(m, this._letterSpacing, this._fontScale) > this._fieldWidth
                                                                    ? (a.push(Qc.substr(g, 0, g.length - 1)), (t = g = ""), (u = i.length), (c = e), (d = !0))
                                                                    : (g += t.charAt(c)),
                                                                ++c;
                                                    } else (g += t + " "), ++u;
                                                    u >= i.length && (d || ((o = Qc.substr(g, 0, g.length - 1)), (n = Math.floor(Math.max(n, this._font.getTextWidth(o, this._letterSpacing, this._fontScale)))), a.push(o)), (o = !0));
                                                }
                                            else a.push("");
                                        } else (n = Math.floor(Math.max(n, this._font.getTextWidth(A[l], this._letterSpacing, this._fontScale)))), a.push(A[l]);
                                    for (
                                        n = n + 2 * this._padding + (this._outline ? 2 : 0),
                                            A = Math.floor(2 * this._padding + Math.max(1, a.length * s * this._fontScale + (this._shadow ? 1 : 0) + (this._outline ? 2 : 0))) + (1 <= a.length ? this._lineSpacing * (a.length - 1) : 0),
                                            this.get_graphics().clear(),
                                            1 == this._background && (this.get_graphics().beginFill(this._backgroundColor, this._alpha), this.get_graphics().drawRect(0, 0, n, A), this.get_graphics().endFill()),
                                            this.removeChildren(),
                                            this._outline && ((this._outlineTilemap = new XP(n, A, this._font.getTileset(), x.antialias)), this.tint(this._outlineTilemap, this._outlineColor), this.addChild(this._outlineTilemap)),
                                            this._shadow && ((this._shadowTilemap = new XP(n, A, this._font.getTileset(), x.antialias)), this.tint(this._shadowTilemap, this._shadowColor), this.addChild(this._shadowTilemap)),
                                            this._characterTilemap = new XP(n, A, this._font.getTileset(), x.antialias),
                                            this._useColor && this.tint(this._characterTilemap, this._color),
                                            this.addChild(this._characterTilemap),
                                            l = A = 0;
                                        l < a.length;

                                    ) {
                                        if (
                                            ((i = a[l]),
                                            ++l,
                                            (g = u = 0),
                                            3 == r &&
                                                (u = this._fixedWidth
                                                    ? Math.floor((this._fieldWidth - this._font.getTextWidth(i, this._letterSpacing, this._fontScale)) / 2)
                                                    : Math.floor((n - this._font.getTextWidth(i, this._letterSpacing, this._fontScale)) / 2)),
                                            2 == r &&
                                                (u = this._fixedWidth
                                                    ? this._fieldWidth - Math.floor(this._font.getTextWidth(i, this._letterSpacing, this._fontScale))
                                                    : n - Math.floor(this._font.getTextWidth(i, this._letterSpacing, this._fontScale)) - 2 * this.get_padding()),
                                            this._outline)
                                        ) {
                                            for (o = 0; 3 > o; )
                                                for (c = o++, e = 0; 3 > e; )
                                                    (t = e++),
                                                        this._font.render(
                                                            this._outlineTilemap,
                                                            i,
                                                            this._alpha,
                                                            t + u + this._padding,
                                                            c + A * (Math.floor(s * this._fontScale) + this._lineSpacing) + this._padding,
                                                            this._letterSpacing,
                                                            this._fontScale
                                                        );
                                            ++u, ++g;
                                        }
                                        this._shadow &&
                                            this._font.render(
                                                this._shadowTilemap,
                                                i,
                                                this._alpha,
                                                1 + u + this._padding,
                                                1 + g + A * (Math.floor(s * this._fontScale) + this._lineSpacing) + this._padding,
                                                this._letterSpacing,
                                                this._fontScale
                                            ),
                                            this._font.render(this._characterTilemap, i, this._alpha, u + this._padding, g + A * (Math.floor(s * this._fontScale) + this._lineSpacing) + this._padding, this._letterSpacing, this._fontScale),
                                            ++A;
                                    }
                                    this._pendingTextChange = !1;
                                }
                            },
                            update: function () {
                                this._pendingTextChange && this.updateBitmapData();
                            },
                            get_background: function () {
                                return this._background;
                            },
                            set_background: function (e) {
                                return this._background != e && ((this._background = e), (this._pendingTextChange = !0), this.update()), e;
                            },
                            get_backgroundColor: function () {
                                return this._backgroundColor;
                            },
                            set_backgroundColor: function (e) {
                                return this._backgroundColor != e && ((this._backgroundColor = e), this._background && ((this._pendingTextChange = !0), this.update())), e;
                            },
                            get_shadow: function () {
                                return this._shadow;
                            },
                            set_shadow: function (e) {
                                return this._shadow != e && ((this._shadow = e), (this._outline = !1), this.updateGlyphs(!1, this._shadow, !1), (this._pendingTextChange = !0), this.update()), e;
                            },
                            get_shadowColor: function () {
                                return this._shadowColor;
                            },
                            set_shadowColor: function (e) {
                                return this._shadowColor != e && ((this._shadowColor = e), this.updateGlyphs(!1, this._shadow, !1), (this._pendingTextChange = !0), this.update()), e;
                            },
                            get_padding: function () {
                                return this._padding;
                            },
                            set_padding: function (e) {
                                return this._padding != e && ((this._padding = e), (this._pendingTextChange = !0), this.update()), e;
                            },
                            get_color: function () {
                                return this._color;
                            },
                            set_color: function (e) {
                                return this._color != e && ((this._color = e), this.updateGlyphs(!0, !1, !1), (this._pendingTextChange = !0), this.update()), e;
                            },
                            get_useColor: function () {
                                return this._useColor;
                            },
                            set_useColor: function (e) {
                                return this._useColor != e && ((this._useColor = e), this.updateGlyphs(!0, !1, !1), (this._pendingTextChange = !0), this.update()), e;
                            },
                            setWidth: function (e) {
                                return 1 > e && (e = 1), e != this._fieldWidth && ((this._fieldWidth = e), (this._pendingTextChange = !0), this.update()), e;
                            },
                            get_alignment: function () {
                                return this._alignment;
                            },
                            set_alignment: function (e) {
                                return this._alignment != e && ((this._alignment = e), (this._pendingTextChange = !0), this.update()), e;
                            },
                            get_multiLine: function () {
                                return this._multiLine;
                            },
                            set_multiLine: function (e) {
                                return this._multiLine != e && ((this._multiLine = e), (this._pendingTextChange = !0), this.update()), e;
                            },
                            get_outline: function () {
                                return this._outline;
                            },
                            set_outline: function (e) {
                                return this._outline != e && ((this._outline = e), (this._shadow = !1), this.updateGlyphs(!1, !1, !0), (this._pendingTextChange = !0), this.update()), e;
                            },
                            get_outlineColor: function () {
                                return this._outlineColor;
                            },
                            set_outlineColor: function (e) {
                                return this._outlineColor != e && ((this._outlineColor = e), this.updateGlyphs(!1, !1, this._outline), (this._pendingTextChange = !0), this.update()), e;
                            },
                            get_font: function () {
                                return this._font;
                            },
                            set_font: function (e) {
                                return this._font != e && ((this._font = e), this.updateGlyphs(!0, this._shadow, this._outline), (this._pendingTextChange = !0), this.update()), e;
                            },
                            get_stencylFont: function () {
                                return this._stencylFont;
                            },
                            set_stencylFont: function (e) {
                                return this._stencylFont != e && ((this._stencylFont = e), this.set_font(e.font)), e;
                            },
                            get_lineSpacing: function () {
                                return this._lineSpacing;
                            },
                            set_lineSpacing: function (e) {
                                return this._lineSpacing != e && ((this._lineSpacing = Math.floor(Math.abs(e))), (this._pendingTextChange = !0), this.update()), e;
                            },
                            setAlpha: function (e) {
                                this._alpha != e && ((this._alpha = e), (this._pendingTextChange = !0), this.update());
                            },
                            getAlpha: function () {
                                return this._alpha;
                            },
                            get_fontScale: function () {
                                return this._fontScale;
                            },
                            set_fontScale: function (e) {
                                var t = Math.abs(e);
                                return t != this._fontScale && ((this._fontScale = t), this.updateGlyphs(!0, this._shadow, this._outline), (this._pendingTextChange = !0), this.update()), e;
                            },
                            get_letterSpacing: function () {
                                return this._letterSpacing;
                            },
                            set_letterSpacing: function (e) {
                                return (e = Math.floor(e)) != this._letterSpacing && ((this._letterSpacing = e), (this._pendingTextChange = !0), this.update()), this._letterSpacing;
                            },
                            get_autoUpperCase: function () {
                                return this._autoUpperCase;
                            },
                            set_autoUpperCase: function (e) {
                                return this._autoUpperCase != e && (this._autoUpperCase = e) && this.set_text(this._text.toUpperCase()), this._autoUpperCase;
                            },
                            get_wordWrap: function () {
                                return this._wordWrap;
                            },
                            set_wordWrap: function (e) {
                                return this._wordWrap != e && ((this._wordWrap = e), (this._pendingTextChange = !0), this.update()), this._wordWrap;
                            },
                            get_fixedWidth: function () {
                                return this._fixedWidth;
                            },
                            set_fixedWidth: function (e) {
                                return this._fixedWidth != e && ((this._fixedWidth = e), (this._pendingTextChange = !0), this.update()), this._fixedWidth;
                            },
                            set_labelX: function (e) {
                                return this.set_x(e * a.SCALE), (this.labelX = e);
                            },
                            get_labelX: function () {
                                return this.labelX;
                            },
                            set_labelY: function (e) {
                                return this.set_y(e * a.SCALE), (this.labelY = e);
                            },
                            get_labelY: function () {
                                return this.labelY;
                            },
                            updatePosition: function () {
                                this.set_x(this.get_labelX() * a.SCALE - this.cacheParentAnchor.x), this.set_y(this.get_labelY() * a.SCALE - this.cacheParentAnchor.y);
                            },
                            updateScale: function () {
                                this.updatePosition(), null != this._stencylFont && this.set_font(this._stencylFont.font);
                            },
                            updateGlyphs: function (e, t, n) {},
                            tint: function (e, t) {
                                var n = new Ii();
                                n.colorize(t, 1), e.set_filters([n.getFilter()]);
                            },
                            __class__: L5,
                            __properties__: K(Yb.prototype.__properties__, {
                                set_fixedWidth: "set_fixedWidth",
                                get_fixedWidth: "get_fixedWidth",
                                set_wordWrap: "set_wordWrap",
                                get_wordWrap: "get_wordWrap",
                                set_autoUpperCase: "set_autoUpperCase",
                                get_autoUpperCase: "get_autoUpperCase",
                                set_letterSpacing: "set_letterSpacing",
                                get_letterSpacing: "get_letterSpacing",
                                set_fontScale: "set_fontScale",
                                get_fontScale: "get_fontScale",
                                set_lineSpacing: "set_lineSpacing",
                                get_lineSpacing: "get_lineSpacing",
                                set_stencylFont: "set_stencylFont",
                                get_stencylFont: "get_stencylFont",
                                set_font: "set_font",
                                get_font: "get_font",
                                set_outlineColor: "set_outlineColor",
                                get_outlineColor: "get_outlineColor",
                                set_outline: "set_outline",
                                get_outline: "get_outline",
                                set_multiLine: "set_multiLine",
                                get_multiLine: "get_multiLine",
                                set_alignment: "set_alignment",
                                get_alignment: "get_alignment",
                                set_useColor: "set_useColor",
                                get_useColor: "get_useColor",
                                set_color: "set_color",
                                get_color: "get_color",
                                set_padding: "set_padding",
                                get_padding: "get_padding",
                                set_shadowColor: "set_shadowColor",
                                get_shadowColor: "get_shadowColor",
                                set_shadow: "set_shadow",
                                get_shadow: "get_shadow",
                                set_backgroundColor: "set_backgroundColor",
                                get_backgroundColor: "get_backgroundColor",
                                set_background: "set_background",
                                get_background: "get_background",
                                set_text: "set_text",
                                get_text: "get_text",
                                set_labelY: "set_labelY",
                                get_labelY: "get_labelY",
                                set_labelX: "set_labelX",
                                get_labelX: "get_labelX",
                            }),
                        }));
                    var V8 = function () {};
                    (v["com.stencyl.graphics.fonts.TextAlign"] = V8), (V8.__name__ = "com.stencyl.graphics.fonts.TextAlign");
                    var ny = function () {};
                    (v["com.stencyl.graphics.shaders.BasicShader"] = ny),
                        (ny.__name__ = "com.stencyl.graphics.shaders.BasicShader"),
                        (ny.prototype = {
                            multipassParent: null,
                            multipassTarget: null,
                            model: null,
                            setProperty: function (e, t) {
                                this.model.setUniform(e, t);
                            },
                            getProperty: function (e) {
                                return this.model.getUniform(e);
                            },
                            tweenProperty: function (e, t, n, a) {
                                null == n && (n = 1), this.model.tweenUniform(e, t, n, a);
                            },
                            enable: function () {
                                a.engine.addShader(this.model);
                            },
                            disable: function () {
                                a.engine.clearShaders();
                            },
                            setTimeScale: function (e) {
                                this.model.timeScale = e;
                            },
                            combine: function (e) {
                                return (this.multipassTarget = e), (e.multipassParent = this), e;
                            },
                            __class__: ny,
                        });
                    var W8 = function (e, t, n, a, s, r, A, l, o) {
                        null == o && (o = 0.0075),
                            null == l && (l = 0.009),
                            null == A && (A = 0.012),
                            null == r && (r = 0.6),
                            null == s && (s = 0.4),
                            null == a && (a = 3),
                            null == n && (n = 4),
                            null == t && (t = 0.004),
                            null == e && (e = 0.25),
                            (this.model = new sz(
                                this,
                                "\n\t\t\t#ifdef GL_ES\n\t\t\t\tprecision mediump float;\n\t\t\t#endif\n\t\t\t\n\t\t\tvarying vec2 vTexCoord;\n\t\t\tuniform vec2 uResolution;\n\t\t\tuniform sampler2D uImage0;\n\t\t\t\n\t\t\tuniform float currPixelWeight;\n\t\t\tuniform float neighborPixelWeight;\n\t\t\tuniform float lowThreshold;\n\t\t\tuniform float mediumThreshold;\n\t\t\tuniform float lowMultiplier;\n\t\t\tuniform float mediumMultiplier;\n\t\t\tuniform float highMultiplier;\n\n\t\t\tvoid main(void)\n\t\t\t{\n\t\t\t\tvec4 sum = vec4(0.0);\n\t\t\t\tvec2 q1 = vTexCoord;\n\t\t\t\tvec4 oricol = texture2D(uImage0, vec2(q1.x, q1.y));\n\t\t\t\tvec3 col;\n\t\t\t\t\n\t\t\t\tfor(int i = -3; i < 3; i++) \n\t\t\t\t{\n\t\t\t\t\tfor(int j = -3; j < 3; j++) \n\t\t\t\t\t{\n\t\t\t\t\t\tsum += texture2D(uImage0, vec2(j, i) * neighborPixelWeight + vec2(q1.x, q1.y)) * currPixelWeight;\n\t\t\t\t\t}\n\t\t\t   \t}\n\t\t\t \n\t\t\t  \tif(oricol.r < lowThreshold) \n\t\t\t  \t{\n\t\t\t\t\tgl_FragColor = sum * sum * lowMultiplier + oricol;\n\t\t\t  \t} \n\t\t\t  \n\t\t\t  \telse \n\t\t\t  \t{\n\t\t\t\t\tif(oricol.r < mediumThreshold) \n\t\t\t\t\t{\n\t\t\t\t\t\tgl_FragColor = sum * sum * mediumMultiplier + oricol;\n\t\t\t\t   \t} \n\t\t\t\t   \t\n\t\t\t\t   \telse \n\t\t\t\t   \t{\n\t\t\t\t\t\tgl_FragColor = sum * sum * highMultiplier + oricol;\n\t\t\t\t   \t}\n\t\t\t   }\n\t\t\t}\n\t\t",
                                !0
                            )),
                            this.setProperty("currPixelWeight", e),
                            this.setProperty("neighborPixelWeight", t),
                            this.setProperty("sampleX", n),
                            this.setProperty("sampleY", a),
                            this.setProperty("lowThreshold", s),
                            this.setProperty("mediumThreshold", r),
                            this.setProperty("lowMultiplier", A),
                            this.setProperty("mediumMultiplier", l),
                            this.setProperty("highMultiplier", o);
                    };
                    (v["com.stencyl.graphics.shaders.BloomShader"] = W8), (W8.__name__ = "com.stencyl.graphics.shaders.BloomShader"), (W8.__super__ = ny), (W8.prototype = K(ny.prototype, { __class__: W8 }));
                    var X8 = function (e, t, n) {
                        null == n && (n = 1),
                            null == t && (t = 1),
                            null == e && (e = 2),
                            (this.model = new sz(
                                this,
                                "\n\t\t\t#ifdef GL_ES\n\t\t\t\tprecision mediump float;\n\t\t\t#endif\n\t\t\t\n\t\t\t//in attributes from our vertex shader\n\t\t\tvarying vec2 vTexCoord;\n\t\t\t\n\t\t\t//declare uniforms\n\t\t\tuniform sampler2D uImage0;\n\t\t\tuniform vec2 uResolution;\n\t\t\t\n\t\t\tuniform float radius;\n\t\t\tuniform float dirx;\n\t\t\tuniform float diry;\n\t\t\t\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\t//this will be our RGBA sum\n\t\t\t\tvec4 sum = vec4(0.0);\n\t\t\t\n\t\t\t\t//our original texcoord for this fragment\n\t\t\t\tvec2 tc = vTexCoord;\n\t\t\t\n\t\t\t\t//the amount to blur, i.e. how far off center to sample from\n\t\t\t\t//1.0 -> blur by one pixel\n\t\t\t\t//2.0 -> blur by two pixels, etc.\n\t\t\t\tfloat blur = radius / uResolution.x;\n\t\t\t\n\t\t\t\t//the direction of our blur\n\t\t\t\t//(1.0, 0.0) -> x-axis blur\n\t\t\t\t//(0.0, 1.0) -> y-axis blur\n\t\t\t\tfloat hstep = dirx;\n\t\t\t\tfloat vstep = diry;\n\t\t\t\n\t\t\t\t//apply blurring, using a 9-tap filter with predefined gaussian weights\n\t\t\t\n\t\t\t\tsum += texture2D(uImage0, vec2(tc.x - 4.0*blur*hstep, tc.y - 4.0*blur*vstep)) * 0.0162162162;\n\t\t\t\tsum += texture2D(uImage0, vec2(tc.x - 3.0*blur*hstep, tc.y - 3.0*blur*vstep)) * 0.0540540541;\n\t\t\t\tsum += texture2D(uImage0, vec2(tc.x - 2.0*blur*hstep, tc.y - 2.0*blur*vstep)) * 0.1216216216;\n\t\t\t\tsum += texture2D(uImage0, vec2(tc.x - 1.0*blur*hstep, tc.y - 1.0*blur*vstep)) * 0.1945945946;\n\t\t\t\n\t\t\t\tsum += texture2D(uImage0, vec2(tc.x, tc.y)) * 0.2270270270;\n\t\t\t\n\t\t\t\tsum += texture2D(uImage0, vec2(tc.x + 1.0*blur*hstep, tc.y + 1.0*blur*vstep)) * 0.1945945946;\n\t\t\t\tsum += texture2D(uImage0, vec2(tc.x + 2.0*blur*hstep, tc.y + 2.0*blur*vstep)) * 0.1216216216;\n\t\t\t\tsum += texture2D(uImage0, vec2(tc.x + 3.0*blur*hstep, tc.y + 3.0*blur*vstep)) * 0.0540540541;\n\t\t\t\tsum += texture2D(uImage0, vec2(tc.x + 4.0*blur*hstep, tc.y + 4.0*blur*vstep)) * 0.0162162162;\n\t\t\t\n\t\t\t\t//discard alpha for our simple demo, multiply by vertex color and return\n\t\t\t\tgl_FragColor = vec4(sum.rgb, 1.0);\n\t\t\t}\n\t\t",
                                !0
                            )),
                            this.setRadius(e),
                            this.setDirectionX(t),
                            this.setDirectionY(n);
                    };
                    (v["com.stencyl.graphics.shaders.BlurShader"] = X8),
                        (X8.__name__ = "com.stencyl.graphics.shaders.BlurShader"),
                        (X8.__super__ = ny),
                        (X8.prototype = K(ny.prototype, {
                            setRadius: function (e) {
                                this.setProperty("radius", e);
                            },
                            setDirectionX: function (e) {
                                this.setProperty("dirx", e);
                            },
                            setDirectionY: function (e) {
                                this.setProperty("diry", e);
                            },
                            __class__: X8,
                        }));
                    var QV = function (e, t, n) {
                        null == n && (n = 1),
                            null == t && (t = 1),
                            null == e && (e = 1),
                            (this.model = new sz(
                                this,
                                "\n\t\t\t#ifdef GL_ES\n\t\t\t\tprecision mediump float;\n\t\t\t#endif\n\n\t\t\tvarying vec2 vTexCoord;\n\t\t\tuniform sampler2D uImage0;\n\t\t\tuniform float contrast;\n\t\t\tuniform float brightness;\n\t\t\tuniform float saturation;\n\n\t\t\tvec3 _mix(vec3 a, vec3 b, float amount) \n\t\t\t{ \n\t\t\t\treturn vec3(a.x * (1.0 - amount) + b.x * amount, a.y * (1.0 - amount) + b.y * amount, a.z * (1.0 - amount) + b.z * amount); \n\t\t\t}\n\n\t\t\tvoid main() \n\t\t\t{\n\t\t\t\tvec3 color = texture2D(uImage0, vTexCoord).rgb;\n\t\t\t\tconst vec3 luminanceCoefficient = vec3(0.2125, 0.7154, 0.0721);\n\t\t\t\tvec3 avgLuminance = vec3(0.5, 0.5, 0.5);\n\t\t\n\t\t\t\tvec3 brtColor = vec3(color.x * brightness, color.y * brightness, color.z * brightness);\n\t\t\t\tvec3 intensity = vec3(dot(brtColor, luminanceCoefficient));\n\t\t\t\tvec3 satColor = _mix(intensity, brtColor, saturation);\n\t\t\t\tvec3 conColor = _mix(avgLuminance, satColor, contrast);\n\t\t\n\t\t\t\tgl_FragColor = vec4(conColor, 1);\n\t\t\t}\n\t\t",
                                !0
                            )),
                            this.setContrast(e),
                            this.setBrightness(t),
                            this.setSaturation(n);
                    };
                    (v["com.stencyl.graphics.shaders.CSBShader"] = QV),
                        (QV.__name__ = "com.stencyl.graphics.shaders.CSBShader"),
                        (QV.create = function (e, t) {
                            return null == t && (t = 1), null == e && (e = "contrast"), "contrast" == e ? new QV(t, 1, 1) : "saturation" == e ? new QV(1, 1, t) : new QV(1, t, 1);
                        }),
                        (QV.__super__ = ny),
                        (QV.prototype = K(ny.prototype, {
                            setContrast: function (e) {
                                this.setProperty("contrast", e);
                            },
                            setBrightness: function (e) {
                                this.setProperty("brightness", e);
                            },
                            setSaturation: function (e) {
                                this.setProperty("saturation", e);
                            },
                            __class__: QV,
                        }));
                    var Y8 = function (e) {
                        this.model = new sz(this, "assets/data/" + e);
                    };
                    (v["com.stencyl.graphics.shaders.ExternalShader"] = Y8), (Y8.__name__ = "com.stencyl.graphics.shaders.ExternalShader"), (Y8.__super__ = ny), (Y8.prototype = K(ny.prototype, { __class__: Y8 }));
                    var Z8 = function (e, t, n, a, s) {
                        null == s && (s = 1),
                            null == a && (a = 1.6),
                            null == n && (n = 0.6),
                            null == t && (t = !1),
                            null == e && (e = 0.05),
                            (this.model = new sz(
                                this,
                                "\n\t\t\t/*\n\t\t\t\tFilm Grain post-process shader v1.1\n\t\t\t\tMartins Upitis (martinsh) devlog-martinsh.blogspot.com\n\t\t\t*/\n\n\t\t\t#ifdef GL_ES\n\t\t\t\tprecision mediump float;\n\t\t\t#endif\n\t\t\t\n\t\t\tuniform sampler2D uImage0; //rendered scene sampler\n\t\t\tuniform vec2 uResolution; //scene sampler resolution\n\t\t\tuniform float uTime;\n\t\t\t\n\t\t\tvarying vec2 vTexCoord;\n\t\t\t\n\t\t\tconst float permTexUnit = 1.0/256.0;        // Perm texture texel-size\n\t\t\tconst float permTexUnitHalf = 0.5/256.0;    // Half perm texture texel-size\n\t\t\t\n\t\t\tfloat width;\n\t\t\tfloat height;\n\t\t\t\n\t\t\tuniform float grainamount; //grain amount\n\t\t\tuniform float colored; //colored noise?\n\t\t\tuniform float coloramount;\n\t\t\tuniform float grainsize; //grain particle size (1.5 - 2.5)\n\t\t\tuniform float lumamount; //\n\t\t\t\n\t\t\t//a random texture generator, but you can also use a pre-computed perturbation texture\n\t\t\tvec4 rnm(in vec2 tc)\n\t\t\t{\n\t\t\t\tfloat noise =  sin(dot(tc + vec2(uTime,uTime),vec2(12.9898,78.233))) * 43758.5453;\n\t\t\t\n\t\t\t\tfloat noiseR =  fract(noise)*2.0-1.0;\n\t\t\t\tfloat noiseG =  fract(noise*1.2154)*2.0-1.0;\n\t\t\t\tfloat noiseB =  fract(noise*1.3453)*2.0-1.0;\n\t\t\t\tfloat noiseA =  fract(noise*1.3647)*2.0-1.0;\n\t\t\t\n\t\t\t\treturn vec4(noiseR,noiseG,noiseB,noiseA);\n\t\t\t}\n\t\t\t\n\t\t\tfloat fade(in float t) {\n\t\t\t\treturn t*t*t*(t*(t*6.0-15.0)+10.0);\n\t\t\t}\n\t\t\t\n\t\t\tfloat pnoise3D(in vec3 p)\n\t\t\t{\n\t\t\t\tvec3 pi = permTexUnit*floor(p)+permTexUnitHalf; // Integer part, scaled so +1 moves permTexUnit texel\n\t\t\t\t// and offset 1/2 texel to sample texel centers\n\t\t\t\tvec3 pf = fract(p);     // Fractional part for interpolation\n\t\t\t\n\t\t\t\t// Noise contributions from (x=0, y=0), z=0 and z=1\n\t\t\t\tfloat perm00 = rnm(pi.xy).a ;\n\t\t\t\tvec3  grad000 = rnm(vec2(perm00, pi.z)).rgb * 4.0 - 1.0;\n\t\t\t\tfloat n000 = dot(grad000, pf);\n\t\t\t\tvec3  grad001 = rnm(vec2(perm00, pi.z + permTexUnit)).rgb * 4.0 - 1.0;\n\t\t\t\tfloat n001 = dot(grad001, pf - vec3(0.0, 0.0, 1.0));\n\t\t\t\n\t\t\t\t// Noise contributions from (x=0, y=1), z=0 and z=1\n\t\t\t\tfloat perm01 = rnm(pi.xy + vec2(0.0, permTexUnit)).a ;\n\t\t\t\tvec3  grad010 = rnm(vec2(perm01, pi.z)).rgb * 4.0 - 1.0;\n\t\t\t\tfloat n010 = dot(grad010, pf - vec3(0.0, 1.0, 0.0));\n\t\t\t\tvec3  grad011 = rnm(vec2(perm01, pi.z + permTexUnit)).rgb * 4.0 - 1.0;\n\t\t\t\tfloat n011 = dot(grad011, pf - vec3(0.0, 1.0, 1.0));\n\t\t\t\n\t\t\t\t// Noise contributions from (x=1, y=0), z=0 and z=1\n\t\t\t\tfloat perm10 = rnm(pi.xy + vec2(permTexUnit, 0.0)).a ;\n\t\t\t\tvec3  grad100 = rnm(vec2(perm10, pi.z)).rgb * 4.0 - 1.0;\n\t\t\t\tfloat n100 = dot(grad100, pf - vec3(1.0, 0.0, 0.0));\n\t\t\t\tvec3  grad101 = rnm(vec2(perm10, pi.z + permTexUnit)).rgb * 4.0 - 1.0;\n\t\t\t\tfloat n101 = dot(grad101, pf - vec3(1.0, 0.0, 1.0));\n\t\t\t\n\t\t\t\t// Noise contributions from (x=1, y=1), z=0 and z=1\n\t\t\t\tfloat perm11 = rnm(pi.xy + vec2(permTexUnit, permTexUnit)).a ;\n\t\t\t\tvec3  grad110 = rnm(vec2(perm11, pi.z)).rgb * 4.0 - 1.0;\n\t\t\t\tfloat n110 = dot(grad110, pf - vec3(1.0, 1.0, 0.0));\n\t\t\t\tvec3  grad111 = rnm(vec2(perm11, pi.z + permTexUnit)).rgb * 4.0 - 1.0;\n\t\t\t\tfloat n111 = dot(grad111, pf - vec3(1.0, 1.0, 1.0));\n\t\t\t\n\t\t\t\t// Blend contributions along x\n\t\t\t\tvec4 n_x = mix(vec4(n000, n001, n010, n011), vec4(n100, n101, n110, n111), fade(pf.x));\n\t\t\t\n\t\t\t\t// Blend contributions along y\n\t\t\t\tvec2 n_xy = mix(n_x.xy, n_x.zw, fade(pf.y));\n\t\t\t\n\t\t\t\t// Blend contributions along z\n\t\t\t\tfloat n_xyz = mix(n_xy.x, n_xy.y, fade(pf.z));\n\t\t\t\n\t\t\t\t// We're done, return the final noise value.\n\t\t\t\treturn n_xyz;\n\t\t\t}\n\t\t\t\n\t\t\t//2d coordinate orientation thing\n\t\t\tvec2 coordRot(in vec2 tc, in float angle)\n\t\t\t{\n\t\t\t\tfloat aspect = width/height;\n\t\t\t\tfloat rotX = ((tc.x*2.0-1.0)*aspect*cos(angle)) - ((tc.y*2.0-1.0)*sin(angle));\n\t\t\t\tfloat rotY = ((tc.y*2.0-1.0)*cos(angle)) + ((tc.x*2.0-1.0)*aspect*sin(angle));\n\t\t\t\trotX = ((rotX/aspect)*0.5+0.5);\n\t\t\t\trotY = rotY*0.5+0.5;\n\t\t\t\treturn vec2(rotX,rotY);\n\t\t\t}\n\t\t\t\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\twidth = uResolution.x;\n\t\t\t\theight = uResolution.y;\n\t\t\t\t\n\t\t\t\tvec2 texCoord = vTexCoord.st;\n\t\t\t\n\t\t\t\tvec3 rotOffset = vec3(1.425,3.892,5.835); //rotation offset values\n\t\t\t\tvec2 rotCoordsR = coordRot(texCoord, uTime + rotOffset.x);\n\t\t\t\tvec3 noise = vec3(pnoise3D(vec3(rotCoordsR*vec2(width/grainsize,height/grainsize),0.0)));\n\t\t\t\n\t\t\t\tif (colored == 1.0)\n\t\t\t\t{\n\t\t\t\t\tvec2 rotCoordsG = coordRot(texCoord, uTime + rotOffset.y);\n\t\t\t\t\tvec2 rotCoordsB = coordRot(texCoord, uTime + rotOffset.z);\n\t\t\t\t\tnoise.g = mix(noise.r,pnoise3D(vec3(rotCoordsG*vec2(width/grainsize,height/grainsize),1.0)),coloramount);\n\t\t\t\t\tnoise.b = mix(noise.r,pnoise3D(vec3(rotCoordsB*vec2(width/grainsize,height/grainsize),2.0)),coloramount);\n\t\t\t\t}\n\t\t\t\n\t\t\t\tvec3 col = texture2D(uImage0, texCoord).rgb;\n\t\t\t\n\t\t\t\t//noisiness response curve based on scene luminance\n\t\t\t\tvec3 lumcoeff = vec3(0.299,0.587,0.114);\n\t\t\t\tfloat luminance = mix(0.0,dot(col, lumcoeff),lumamount);\n\t\t\t\tfloat lum = smoothstep(0.2,0.0,luminance);\n\t\t\t\tlum += luminance;\n\t\t\t\n\t\t\t\n\t\t\t\tnoise = mix(noise,vec3(0.0),pow(lum,4.0));\n\t\t\t\tcol = col+noise*grainamount;\n\t\t\t\n\t\t\t\tgl_FragColor =  vec4(col,1.0);\n\t\t\t}\n\t\t",
                                !0
                            )),
                            this.setGrainAmount(e),
                            this.setColorAmount(n),
                            this.setGrainSize(a),
                            this.setLuminance(s),
                            t ? this.enableColor() : this.disableColor();
                    };
                    (v["com.stencyl.graphics.shaders.GrainShader"] = Z8),
                        (Z8.__name__ = "com.stencyl.graphics.shaders.GrainShader"),
                        (Z8.__super__ = ny),
                        (Z8.prototype = K(ny.prototype, {
                            enableColor: function () {
                                this.setProperty("colored", 1);
                            },
                            disableColor: function () {
                                this.setProperty("colored", 0);
                            },
                            setGrainAmount: function (e) {
                                this.setProperty("grainamount", e);
                            },
                            setColorAmount: function (e) {
                                this.setProperty("coloramount", e);
                            },
                            setGrainSize: function (e) {
                                this.setProperty("grainsize", e);
                            },
                            setLuminance: function (e) {
                                this.setProperty("lumamount", e);
                            },
                            __class__: Z8,
                        }));
                    var $8 = function () {
                        this.model = new sz(
                            this,
                            "\n\t\t\t#ifdef GL_ES\n\t\t\t\tprecision mediump float;\n\t\t\t#endif\n\t\t\t\n\t\t\tvarying vec2 vTexCoord;\n\t\t\tuniform sampler2D uImage0;\n\t\t\t\n\t\t\tvoid main(void)\n\t\t\t{\n\t\t\t\tvec4 color = texture2D(uImage0, vTexCoord);\n\t\t\t\tfloat gray = dot(color.rgb, vec3(0.299, 0.587, 0.114));\n\t\t\t\tgl_FragColor = vec4(gray, gray, gray, 1.0);\n\t\t\t}\n\t\t",
                            !0
                        );
                    };
                    (v["com.stencyl.graphics.shaders.GrayscaleShader"] = $8), ($8.__name__ = "com.stencyl.graphics.shaders.GrayscaleShader"), ($8.__super__ = ny), ($8.prototype = K(ny.prototype, { __class__: $8 }));
                    var a9 = function (e, t) {
                        null == t && (t = !0),
                            null == e && (e = 0),
                            t && (e *= Math.PI / 180),
                            (this.model = new sz(
                                this,
                                "\n\t\t\t#ifdef GL_ES\n\t\t\t\tprecision mediump float;\n\t\t\t#endif\n\t\t\t\n\t\t\tvarying vec2 vTexCoord;\n\t\t\tuniform sampler2D uImage0;\n\t\t\t\n\t\t\tuniform float hue;\n\t\t\tconst mat3 rgb2yiq = mat3(0.299, 0.587, 0.114, 0.595716, -0.274453, -0.321263, 0.211456, -0.522591, 0.311135);\n\t\t\tconst mat3 yiq2rgb = mat3(1.0, 0.9563, 0.6210, 1.0, -0.2721, -0.6474, 1.0, -1.1070, 1.7046);\n\n\t\t\tvoid main() \n\t\t\t{\n\t\t\t\tvec3 color = texture2D(uImage0, vTexCoord).rgb;\n\t\t\t\tvec3 yColor = rgb2yiq * color; \n\n\t\t\t\tfloat originalHue = atan(yColor.b, yColor.g);\n\t\t\t\tfloat finalHue = originalHue + hue;\n\t\t\t\tfloat chroma = sqrt(yColor.b * yColor.b + yColor.g * yColor.g);\n\t\t\t\t\n\t\t\t\tvec3 yFinalColor = vec3(yColor.r, chroma * cos(finalHue), chroma * sin(finalHue));\n\t\t\t\tgl_FragColor = vec4(yiq2rgb * yFinalColor, 1.0);\n\t\t\t}\n\t\t",
                                !0
                            )),
                            this.setHue(e, !1);
                    };
                    (v["com.stencyl.graphics.shaders.HueShader"] = a9),
                        (a9.__name__ = "com.stencyl.graphics.shaders.HueShader"),
                        (a9.__super__ = ny),
                        (a9.prototype = K(ny.prototype, {
                            setHue: function (e, t) {
                                null == t && (t = !0), t && (e *= Math.PI / 180), this.setProperty("hue", e);
                            },
                            __class__: a9,
                        }));
                    var b9 = function (e) {
                        this.model = new sz(this, e, !0);
                    };
                    (v["com.stencyl.graphics.shaders.InlineShader"] = b9), (b9.__name__ = "com.stencyl.graphics.shaders.InlineShader"), (b9.__super__ = ny), (b9.prototype = K(ny.prototype, { __class__: b9 }));
                    var c9 = function () {
                        this.model = new sz(
                            this,
                            "\n\t\t\t#ifdef GL_ES\n\t\t\t\tprecision mediump float;\n\t\t\t#endif\n\t\t\t\n\t\t\tvarying vec2 vTexCoord;\n\t\t\tuniform sampler2D uImage0;\n\t\t\t\n\t\t\tvoid main(void)\n\t\t\t{\n\t\t\t\tvec4 color = texture2D(uImage0, vTexCoord);\n\t\t\t\tgl_FragColor = vec4(vec3(1.0, 1.0, 1.0) - color.rgb, color.a);\n\t\t\t}\n\t\t",
                            !0
                        );
                    };
                    (v["com.stencyl.graphics.shaders.InvertShader"] = c9), (c9.__name__ = "com.stencyl.graphics.shaders.InvertShader"), (c9.__super__ = ny), (c9.prototype = K(ny.prototype, { __class__: c9 }));
                    var sz = function (e, t, n) {
                        if (
                            (null == n && (n = !1),
                            (this.timeScale = 1),
                            (this.time = 0),
                            gc.call(this),
                            (this.basicShader = e),
                            (this.gl = a.stage.__renderer.gl),
                            (this.uniforms = new p()),
                            (this.changedUniforms = []),
                            (this.uniformTweens = new p()),
                            this.rebuild(),
                            this.gl.checkFramebufferStatus(36160),
                            (this.buffer = this.gl.createBuffer()),
                            this.gl.bindBuffer(34962, this.buffer),
                            (e = null != (e = [-1, -1, 0, 0, 1, -1, 1, 0, -1, 1, 0, 1, 1, -1, 1, 0, 1, 1, 1, 1, -1, 1, 0, 1]) ? new Float32Array(e) : null),
                            Yq.bufferData(this.gl, 34962, e, 35044),
                            this.gl.bindBuffer(34962, null),
                            n)
                        )
                            this.fullScreenShader = new n3([
                                {
                                    src:
                                        "\n#ifdef GL_ES\n\tprecision mediump float;\n#endif\n\nattribute vec4 aVertex;\n\nattribute vec2 aTexCoord;\nvarying vec2 vTexCoord;\n\nvoid main() {\n\tvTexCoord = aTexCoord;\n\tgl_Position = vec4(aVertex.x, aVertex.y, 0.0, 1.0);\n}",
                                    fragment: !1,
                                },
                                { src: t, fragment: !0 },
                            ]);
                        else if (6 < t.length && ".glslx" == Qc.substr(t, -6, null)) {
                            if ((n = Ne.parse(Jh.getText(t)).firstElement()).nodeType != Ne.Document && n.nodeType != Ne.Element) throw new Gc("Invalid nodeType " + og.toString(n.nodeType));
                            (t = tca.resolve(n, "vertex")
                                ? M5.get_innerData(d9.resolve(n, "vertex"))
                                : "\n#ifdef GL_ES\n\tprecision mediump float;\n#endif\n\nattribute vec4 aVertex;\n\nattribute vec2 aTexCoord;\nvarying vec2 vTexCoord;\n\nvoid main() {\n\tvTexCoord = aTexCoord;\n\tgl_Position = vec4(aVertex.x, aVertex.y, 0.0, 1.0);\n}"),
                                (n = M5.get_innerData(d9.resolve(n, "fragment"))),
                                (this.fullScreenShader = new n3([
                                    { src: t, fragment: !1 },
                                    { src: n, fragment: !0 },
                                ]));
                        } else
                            (t = Jh.getText(t)),
                                (this.fullScreenShader = new n3([
                                    {
                                        src:
                                            "\n#ifdef GL_ES\n\tprecision mediump float;\n#endif\n\nattribute vec4 aVertex;\n\nattribute vec2 aTexCoord;\nvarying vec2 vTexCoord;\n\nvoid main() {\n\tvTexCoord = aTexCoord;\n\tgl_Position = vec4(aVertex.x, aVertex.y, 0.0, 1.0);\n}",
                                        fragment: !1,
                                    },
                                    { src: t, fragment: !0 },
                                ]));
                        (this.imageUniform = F.context.getUniformLocation(this.fullScreenShader.program, "uImage0")),
                            (this.timeUniform = F.context.getUniformLocation(this.fullScreenShader.program, "uTime")),
                            (this.resolutionUniform = F.context.getUniformLocation(this.fullScreenShader.program, "uResolution")),
                            (this.resolutionUsUniform = F.context.getUniformLocation(this.fullScreenShader.program, "uResolutionUs")),
                            (this.vertexSlot = F.context.getAttribLocation(this.fullScreenShader.program, "aVertex")),
                            (this.texCoordSlot = F.context.getAttribLocation(this.fullScreenShader.program, "aTexCoord")),
                            this.addEventListener("renderOpenGL", N(this, this.renderGL));
                    };
                    (v["com.stencyl.graphics.shaders.PostProcess"] = sz),
                        (sz.__name__ = "com.stencyl.graphics.shaders.PostProcess"),
                        (sz.__properties__ = { get_vertices: "get_vertices", get_isSupported: "get_isSupported" }),
                        (sz.get_isSupported = function () {
                            return !1;
                        }),
                        (sz.get_vertices = function () {
                            return [-1, -1, 0, 0, 1, -1, 1, 0, -1, 1, 0, 1, 1, -1, 1, 0, 1, 1, 1, 1, -1, 1, 0, 1];
                        }),
                        (sz.__super__ = gc),
                        (sz.prototype = K(gc.prototype, {
                            __added: null,
                            __initialized: null,
                            gl: null,
                            __enterFrame: function (e) {
                                this.__renderDirty || ((this.__renderDirty = !0), this.__setParentRenderDirty());
                            },
                            renderGL: function (e) {
                                var t = e.renderer;
                                if (null != this.stage && this.__renderable) {
                                    var n = (e = a.stage).context3D;
                                    for (
                                        t.__setBlendMode(null),
                                            null == this.basicShader.multipassTarget ? n.setRenderToBackBuffer() : n.setRenderToTexture(this.basicShader.multipassTarget.model.texture),
                                            n.clear(),
                                            this.time += a.elapsedTime * this.timeScale,
                                            F.context.useProgram(this.fullScreenShader.program),
                                            this.gl.enableVertexAttribArray(this.vertexSlot),
                                            this.gl.enableVertexAttribArray(this.texCoordSlot),
                                            this.gl.activeTexture(33984),
                                            this.gl.bindTexture(3553, this.texture.__getTexture()),
                                            "opengl" == e.window.context.type && this.gl.enable(3553),
                                            this.gl.bindBuffer(34962, this.buffer),
                                            this.gl.vertexAttribPointer(this.vertexSlot, 2, 5126, !1, 16, 0),
                                            this.gl.vertexAttribPointer(this.texCoordSlot, 2, 5126, !1, 16, 8),
                                            this.gl.uniform1i(this.imageUniform, 0),
                                            this.gl.uniform1f(this.timeUniform, this.time),
                                            this.gl.uniform2f(this.resolutionUniform, 0 | e.stageWidth, 0 | e.stageHeight),
                                            this.gl.uniform2f(this.resolutionUsUniform, (e.stageWidth / (a.SCALE * a.screenScaleX)) | 0, (e.stageHeight / (a.SCALE * a.screenScaleY)) | 0),
                                            t = this.changedUniforms.length;
                                        0 < t--;

                                    ) {
                                        var s = this.changedUniforms.pop();
                                        if (s.value instanceof Array) {
                                            if (0 != s.value.length) {
                                                var r = this.gl,
                                                    A = s.id;
                                                (s = null != (s = s.value) ? new Float32Array(s) : null), r.uniform1fv(A, s);
                                            }
                                        } else this.gl.uniform1f(s.id, s.value);
                                    }
                                    this.gl.drawArrays(4, 0, 6),
                                        this.gl.bindBuffer(34962, null),
                                        "opengl" == e.window.context.type && this.gl.disable(3553),
                                        this.gl.bindTexture(3553, null),
                                        this.gl.disableVertexAttribArray(this.vertexSlot),
                                        this.gl.disableVertexAttribArray(this.texCoordSlot),
                                        (n.__contextState.program = null),
                                        n.__flushGLProgram(),
                                        (n.__contextState.__currentGLElementArrayBuffer = null);
                                }
                            },
                            setUniform: function (t, n) {
                                var a = this.uniforms;
                                (null != e[t] ? a.existsReserved(t) : a.h.hasOwnProperty(t))
                                    ? ((a = this.uniforms), ((t = null != e[t] ? a.getReserved(t) : a.h[t]).value = n), this.changedUniforms.push(t))
                                    : (a = F.context.getUniformLocation(this.fullScreenShader.program, t)) != sz.UNIFORM_NOT_FOUND &&
                                      ((n = { id: a, value: n }), (a = this.uniforms), null != e[t] ? a.setReserved(t, n) : (a.h[t] = n), this.changedUniforms.push(n));
                            },
                            getUniform: function (t) {
                                var n = this.uniforms;
                                return (null != e[t] ? n.existsReserved(t) : n.h.hasOwnProperty(t)) ? ((n = this.uniforms), (null != e[t] ? n.getReserved(t) : n.h[t]).value) : -1;
                            },
                            tweenUniform: function (t, n, a, s) {
                                null == a && (a = 1);
                                var r = this,
                                    A = this.uniforms;
                                if (null != e[t] ? A.existsReserved(t) : A.h.hasOwnProperty(t)) {
                                    A = this.uniforms;
                                    var l = null != e[t] ? A.getReserved(t) : A.h[t];
                                    A = this.uniformTweens;
                                    var o = null != e[t] ? A.getReserved(t) : A.h[t];
                                    null == o &&
                                        ((o = new zn()).doOnUpdate(function () {
                                            (l.value = o.value), r.changedUniforms.push(l);
                                        }),
                                        (A = this.uniformTweens),
                                        null != e[t] ? A.setReserved(t, o) : (A.h[t] = o)),
                                        o.tween(l.value, n, s, (1e3 * a) | 0);
                                }
                            },
                            rebuild: function () {
                                null != this.texture && this.texture.dispose(),
                                    (this.texture = a.stage.context3D.createRectangleTexture(0 | ke.windowWidth, 0 | ke.windowHeight, 1, !0)),
                                    this.texture.__context.__bindGLTexture2D(this.texture.__textureID),
                                    this.texture.__setSamplerState(new BU()),
                                    Yq.texImage2D(this.gl, this.texture.__textureTarget, 0, this.texture.__internalFormat, this.texture.__width, this.texture.__height, 0, this.gl.RGB, this.gl.UNSIGNED_BYTE, null),
                                    this.texture.__context.__bindGLTexture2D(null);
                            },
                            createTexture: function (e, t) {
                                (this.texture = a.stage.context3D.createRectangleTexture(e, t, 1, !0)),
                                    this.texture.__context.__bindGLTexture2D(this.texture.__textureID),
                                    this.texture.__setSamplerState(new BU()),
                                    Yq.texImage2D(this.gl, this.texture.__textureTarget, 0, this.texture.__internalFormat, this.texture.__width, this.texture.__height, 0, this.gl.RGB, this.gl.UNSIGNED_BYTE, null),
                                    this.texture.__context.__bindGLTexture2D(null);
                            },
                            capture: function () {
                                a.stage.context3D.setRenderToTexture(this.texture);
                                var e = this.texture.__getGLFramebuffer(!1, 0, 0);
                                this.gl.bindFramebuffer(36160, e), this.gl.clear(16640), null != a.stage && null != a.stage.__renderer && (a.stage.__renderer.__cleared = !0);
                            },
                            texture: null,
                            fullScreenShader: null,
                            buffer: null,
                            basicShader: null,
                            time: null,
                            timeScale: null,
                            vertexSlot: null,
                            texCoordSlot: null,
                            imageUniform: null,
                            resolutionUniform: null,
                            resolutionUsUniform: null,
                            timeUniform: null,
                            uniforms: null,
                            changedUniforms: null,
                            uniformTweens: null,
                            __class__: sz,
                        }));
                    var e9 = function (e) {
                        null == e && (e = 1),
                            (this.model = new sz(
                                this,
                                "\n\t\t\t#ifdef GL_ES\n\t\t\t\tprecision mediump float;\n\t\t\t#endif\n\t\t\t\n\t\t\tvarying vec2 vTexCoord;\n\t\t\tuniform vec2 uResolution;\n\t\t\tuniform sampler2D uImage0;\n\t\t\t\n\t\t\tuniform float scale;\n\t\t\t\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\tif (mod(floor(vTexCoord.y * uResolution.y / scale), 2.0) == 0.0)\n\t\t\t\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\t\t\t\telse\n\t\t\t\t\tgl_FragColor = texture2D(uImage0, vTexCoord);\n\t\t\t}\n\t\t",
                                !0
                            )),
                            this.setScale(e);
                    };
                    (v["com.stencyl.graphics.shaders.ScanlineShader"] = e9),
                        (e9.__name__ = "com.stencyl.graphics.shaders.ScanlineShader"),
                        (e9.__super__ = ny),
                        (e9.prototype = K(ny.prototype, {
                            setScale: function (e) {
                                this.setProperty("scale", e);
                            },
                            __class__: e9,
                        }));
                    var f9 = function () {
                        this.model = new sz(
                            this,
                            "\n\t\t\t#ifdef GL_ES\n\t\t\t\tprecision mediump float;\n\t\t\t#endif\n\t\t\t\n\t\t\tvarying vec2 vTexCoord;\n\t\t\tuniform sampler2D uImage0;\n\t\t\t\n\t\t\tvoid main(void)\n\t\t\t{\n\t\t\t\tvec4 color = texture2D(uImage0, vTexCoord);\n\t\t\t\tgl_FragColor.r = dot(color, vec4(0.393,0.769,0.189,0));\n\t\t\t\tgl_FragColor.g = dot(color, vec4(0.349,0.686,0.168,0));\n\t\t\t\tgl_FragColor.b = dot(color, vec4(0.272,0.534,0.131,0));\n\t\t\t\tgl_FragColor.a = color.a;\n\t\t\t}\n\t\t",
                            !0
                        );
                    };
                    (v["com.stencyl.graphics.shaders.SepiaShader"] = f9), (f9.__name__ = "com.stencyl.graphics.shaders.SepiaShader"), (f9.__super__ = ny), (f9.prototype = K(ny.prototype, { __class__: f9 }));
                    var n3 = function (e) {
                        this.program = F.context.createProgram();
                        for (var t = 0; t < e.length; ) {
                            var n = e[t];
                            if ((++t, null == (n = this.compile(n.src, n.fragment ? 35632 : 35633)))) return;
                            F.context.attachShader(this.program, n), F.context.deleteShader(n);
                        }
                        F.context.linkProgram(this.program), F.context.getProgramParameter(this.program, 35714);
                    };
                    (v["com.stencyl.graphics.shaders.Shader"] = n3),
                        (n3.__name__ = "com.stencyl.graphics.shaders.Shader"),
                        (n3.prototype = {
                            compile: function (e, t) {
                                return (t = F.context.createShader(t)), F.context.shaderSource(t, e), F.context.compileShader(t), 0 == F.context.getShaderParameter(t, 35713) ? null : t;
                            },
                            attribute: function (e) {
                                return F.context.getAttribLocation(this.program, e);
                            },
                            uniform: function (e) {
                                return F.context.getUniformLocation(this.program, e);
                            },
                            bind: function () {
                                F.context.useProgram(this.program);
                            },
                            program: null,
                            __class__: n3,
                        });
                    var g9 = function (e) {
                        null == e && (e = 2),
                            (this.model = new sz(
                                this,
                                "\n\t\t\t#ifdef GL_ES\n\t\t\t\tprecision mediump float;\n\t\t\t#endif\n\t\t\t\n\t\t\tvarying vec2 vTexCoord;\n\t\t\tuniform sampler2D uImage0;\n\t\t\tuniform vec2 uResolution;\n\t\t\t\n\t\t\tuniform float amount;\n\t\t\t\n\t\t\tvoid main()\n\t\t\t{\n\t\t\t\t//this will be our RGBA sum\n\t\t\t\tvec4 sum = vec4(0.0);\n\t\t\t\t\n\t\t\t\t//our original texcoord for this fragment\n\t\t\t\tvec2 tc = vTexCoord;\n\t\t\t\t\n\t\t\t\tfloat reach = 1.0 / uResolution.x;\n\n\t\t\t\t//current pixel\n\t\t\t\tsum += texture2D(uImage0, vec2(tc.x, tc.y));\n\t\t\t\t\n\t\t\t\t//sharpen\n\t\t\t\tsum += (texture2D(uImage0, vec2(tc.x, tc.y)) - texture2D(uImage0, vec2(tc.x + 1.0 * reach, tc.y))) * amount;\n\t\t\t\tsum += (texture2D(uImage0, vec2(tc.x, tc.y)) - texture2D(uImage0, vec2(tc.x - 1.0 * reach, tc.y))) * amount;\n\t\t\t\tsum += (texture2D(uImage0, vec2(tc.x, tc.y)) - texture2D(uImage0, vec2(tc.x, tc.y + 1.0 * reach))) * amount;\n\t\t\t\tsum += (texture2D(uImage0, vec2(tc.x, tc.y)) - texture2D(uImage0, vec2(tc.x, tc.y - 1.0 * reach))) * amount;\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4(sum.rgb, 1.0);\n\t\t\t}\n\t\t",
                                !0
                            )),
                            this.setAmount(e);
                    };
                    (v["com.stencyl.graphics.shaders.SharpenShader"] = g9),
                        (g9.__name__ = "com.stencyl.graphics.shaders.SharpenShader"),
                        (g9.__super__ = ny),
                        (g9.prototype = K(ny.prototype, {
                            setAmount: function (e) {
                                this.setProperty("amount", e);
                            },
                            __class__: g9,
                        }));
                    var h9 = function (e, t) {
                        null == t && (t = 1),
                            (this.model = new sz(
                                this,
                                "\n\t\t\t#ifdef GL_ES\n\t\t\t\tprecision mediump float;\n\t\t\t#endif\n\n\t\t\tvarying vec2 vTexCoord;\n\t\t\tuniform sampler2D uImage0;\n\t\t\tuniform float amount;\n\t\t\tuniform float red;\n\t\t\tuniform float green;\n\t\t\tuniform float blue;\n\n\t\t\tvec3 _mix(vec3 a, vec3 b, float amount) \n\t\t\t{ \n\t\t\t\treturn vec3(a.x * (1.0 - amount) + b.x * amount, a.y * (1.0 - amount) + b.y * amount, a.z * (1.0 - amount) + b.z * amount); \n\t\t\t}\n\n\t\t\tvoid main() \n\t\t\t{\n\t\t\t\tvec3 color = texture2D(uImage0, vTexCoord).rgb;\n\t\t\t\tvec3 endColor = _mix(color, vec3(red, green, blue), amount);\n\t\t\t\tgl_FragColor = vec4(endColor.x, endColor.y, endColor.z, 1);\n\t\t\t}\n\t\t",
                                !0
                            )),
                            this.setColor(e),
                            this.setAmount(t);
                    };
                    (v["com.stencyl.graphics.shaders.TintShader"] = h9),
                        (h9.__name__ = "com.stencyl.graphics.shaders.TintShader"),
                        (h9.__super__ = ny),
                        (h9.prototype = K(ny.prototype, {
                            setAmount: function (e) {
                                this.setProperty("amount", e);
                            },
                            setColor: function (e) {
                                this.setProperty("red", ((e >> 16) & 255) / 255), this.setProperty("green", ((e >> 8) & 255) / 255), this.setProperty("blue", (255 & e) / 255);
                            },
                            __class__: h9,
                        }));
                    var To = function (e) {
                        (this.duration = e), (this.complete = this.active = !1), 0 == e && (this.active = this.complete = !0);
                    };
                    (v["com.stencyl.graphics.transitions.Transition"] = To),
                        (To.__name__ = "com.stencyl.graphics.transitions.Transition"),
                        (To.prototype = {
                            duration: null,
                            direction: null,
                            active: null,
                            complete: null,
                            start: function () {},
                            reset: function () {
                                this.complete = !1;
                            },
                            stop: function () {
                                this.complete = !0;
                            },
                            deactivate: function () {
                                this.active = !1;
                            },
                            cleanup: function () {},
                            isActive: function () {
                                return this.active;
                            },
                            isComplete: function () {
                                return this.complete;
                            },
                            update: function (e) {},
                            draw: function (e) {},
                            getDuration: function () {
                                return this.duration;
                            },
                            __class__: To,
                        });
                    var f3 = function (e, t, n, s) {
                        null == n && (n = 10),
                            To.call(this, t),
                            (this.color = s),
                            (this.direction = e),
                            (this.numBlinds = n),
                            e == To.IN
                                ? ((this.beginBlindWidth = (a.screenWidth * a.SCALE) / n), (this.endBlindWidth = 0))
                                : e == To.OUT
                                ? ((this.beginBlindWidth = 0), (this.endBlindWidth = (a.screenWidth * a.SCALE) / n))
                                : (this.complete = !0);
                    };
                    (v["com.stencyl.graphics.transitions.BlindsTransition"] = f3),
                        (f3.__name__ = "com.stencyl.graphics.transitions.BlindsTransition"),
                        (f3.__super__ = To),
                        (f3.prototype = K(To.prototype, {
                            color: null,
                            numBlinds: null,
                            blindWidth: null,
                            beginBlindWidth: null,
                            endBlindWidth: null,
                            blindRect: null,
                            rect: null,
                            graphics: null,
                            start: function () {
                                (this.active = !0),
                                    (this.blindRect = new xe(0, 0, this.beginBlindWidth, a.screenHeight * a.SCALE)),
                                    (this.blindWidth = new zn()),
                                    (this.rect = new ly()),
                                    (this.graphics = this.rect.get_graphics()),
                                    this.direction == To.IN && (this.graphics.beginFill(this.color), this.graphics.drawRect(0, 0, a.screenWidth * a.SCALE, a.screenHeight * a.SCALE), this.graphics.endFill()),
                                    a.engine.transitionLayer.addChild(this.rect),
                                    this.blindWidth.tween(this.beginBlindWidth, this.endBlindWidth, G.linear, (1e3 * this.duration) | 0).doOnComplete(N(this, this.stop));
                            },
                            draw: function (e) {
                                this.graphics.clear(),
                                    this.graphics.beginFill(this.color),
                                    (this.blindRect.x = 0),
                                    (this.blindRect.width = this.blindWidth.value),
                                    this.direction == To.IN && (this.blindRect.x += (a.screenWidth * a.SCALE) / this.numBlinds - this.blindWidth.value),
                                    (e = 0);
                                for (var t = this.numBlinds; e < t; )
                                    e++, this.graphics.drawRect(this.blindRect.x, this.blindRect.y, this.blindRect.width, this.blindRect.height), (this.blindRect.x += (a.screenWidth * a.SCALE) / this.numBlinds);
                                this.graphics.endFill();
                            },
                            cleanup: function () {
                                null != this.rect && (a.engine.transitionLayer.removeChild(this.rect), (this.rect = null));
                            },
                            __class__: f3,
                        }));
                    var e3 = function (e, t, n, a) {
                        null == a && (a = -16777216), null == n && (n = 50), To.call(this, t), (this.color = a), (this.direction = e), (this.numBubbles = n);
                    };
                    (v["com.stencyl.graphics.transitions.BubblesTransition"] = e3),
                        (e3.__name__ = "com.stencyl.graphics.transitions.BubblesTransition"),
                        (e3.__super__ = To),
                        (e3.prototype = K(To.prototype, {
                            color: null,
                            numBubbles: null,
                            radius: null,
                            beginRadius: null,
                            endRadius: null,
                            rect: null,
                            graphics: null,
                            drawBitmap: null,
                            bubblePositions: null,
                            bubbleRect: null,
                            screenWidth: null,
                            screenHeight: null,
                            start: function () {
                                (this.active = !0),
                                    (this.rect = new ly()),
                                    (this.graphics = this.rect.get_graphics()),
                                    (this.screenWidth = (a.screenWidth * a.SCALE) | 0),
                                    (this.screenHeight = (a.screenHeight * a.SCALE) | 0),
                                    this.direction == To.IN && (this.graphics.beginFill(this.color), this.graphics.drawRect(0, 0, this.screenWidth, this.screenHeight), this.graphics.endFill()),
                                    (this.drawBitmap = new y(this.screenWidth, this.screenHeight));
                                var e = this.screenWidth / this.screenHeight,
                                    t = 0 | Math.sqrt(this.numBubbles / e),
                                    n = this.screenHeight / t;
                                (e = Math.ceil((t * e) | 0)), (t = Math.ceil(t));
                                var s = (e * n - this.screenWidth) | 0,
                                    r = new xe(-s / 2, -((t * n - this.screenHeight) | 0) / 2, n, n);
                                this.bubblePositions = [];
                                for (var A = 0; A < t; ) {
                                    A++;
                                    for (var l = 0, o = e; l < o; ) l++, this.bubblePositions.push(new wf(r.x + Math.floor(Math.random() * (n + 1)), r.y + Math.floor(Math.random() * (n + 1)))), (r.x += n);
                                    (r.x = -s / 2), (r.y += n);
                                }
                                (this.beginRadius = 0),
                                    (this.endRadius = Math.ceil(wf.distance(new wf(0, 0), new wf(n, n)))),
                                    (this.radius = new zn()),
                                    a.engine.transitionLayer.addChild(this.rect),
                                    this.radius.tween(this.beginRadius, this.endRadius, G.linear, (1e3 * this.duration) | 0).doOnComplete(N(this, this.stop));
                            },
                            draw: function (e) {
                                if ((this.graphics.clear(), this.direction == To.IN)) {
                                    this.drawBitmap.draw(a.engine.colorLayer),
                                        this.drawBitmap.draw(a.engine.master),
                                        this.graphics.beginFill(this.color),
                                        this.graphics.drawRect(0, 0, this.screenWidth, this.screenHeight),
                                        this.graphics.endFill(),
                                        (e = 0);
                                    for (var t = this.bubblePositions; e < t.length; ) {
                                        var n = t[e];
                                        ++e, this.graphics.beginBitmapFill(this.drawBitmap), this.graphics.drawCircle(n.x, n.y, this.radius.value), this.graphics.endFill();
                                    }
                                } else if (this.direction == To.OUT)
                                    for (e = 0, t = this.bubblePositions; e < t.length; ) (n = t[e]), ++e, this.graphics.beginFill(this.color), this.graphics.drawCircle(n.x, n.y, this.radius.value), this.graphics.endFill();
                            },
                            cleanup: function () {
                                null != this.rect && (a.engine.transitionLayer.removeChild(this.rect), (this.rect = null));
                            },
                            __class__: e3,
                        }));
                    var h3 = function (e, t, n) {
                        null == n && (n = -16777216),
                            To.call(this, t),
                            (this.color = n),
                            (this.direction = e),
                            e == To.IN
                                ? ((this.beginRadius = 0), (this.endRadius = 0 | Math.ceil(wf.distance(new wf(0, 0), new wf(a.screenWidthHalf * a.SCALE, a.screenHeightHalf * a.SCALE)))))
                                : e == To.OUT && ((this.beginRadius = 0 | Math.ceil(wf.distance(new wf(0, 0), new wf(a.screenWidthHalf * a.SCALE, a.screenHeightHalf * a.SCALE)))), (this.endRadius = 0));
                    };
                    (v["com.stencyl.graphics.transitions.CircleTransition"] = h3),
                        (h3.__name__ = "com.stencyl.graphics.transitions.CircleTransition"),
                        (h3.__super__ = To),
                        (h3.prototype = K(To.prototype, {
                            color: null,
                            radius: null,
                            beginRadius: null,
                            endRadius: null,
                            circleImg: null,
                            s: null,
                            start: function () {
                                if (((this.active = !0), (this.s = new ly()), (this.circleImg = new y((a.screenWidth * a.SCALE) | 0, (a.screenHeight * a.SCALE) | 0)), (this.radius = new zn()), this.direction == To.IN)) {
                                    var e = this.s.get_graphics();
                                    e.beginFill(this.color), e.drawRect(0, 0, a.screenWidth * a.SCALE, a.screenHeight * a.SCALE), e.endFill();
                                }
                                a.engine.transitionLayer.addChild(this.s), this.radius.tween(this.beginRadius, this.endRadius, G.linear, (1e3 * this.duration) | 0).doOnComplete(N(this, this.stop));
                            },
                            draw: function (e) {
                                this.s.get_graphics().clear(),
                                    this.s.get_graphics().beginFill(this.color),
                                    this.s.get_graphics().drawRect(0, 0, a.screenWidth * a.SCALE, a.screenHeight * a.SCALE),
                                    this.s.get_graphics().endFill(),
                                    this.circleImg.draw(a.engine.colorLayer),
                                    this.circleImg.draw(a.engine.master),
                                    this.s.get_graphics().beginBitmapFill(this.circleImg),
                                    this.s.get_graphics().drawCircle(a.screenWidthHalf * a.SCALE, a.screenHeightHalf * a.SCALE, this.radius.value),
                                    this.s.get_graphics().endFill();
                            },
                            cleanup: function () {
                                null != this.s && (a.engine.transitionLayer.removeChild(this.s), (this.s = null));
                            },
                            __class__: h3,
                        }));
                    var G5 = function (e, t) {
                        To.call(this, t), (this.oldImg = e);
                    };
                    (v["com.stencyl.graphics.transitions.CrossfadeTransition"] = G5),
                        (G5.__name__ = "com.stencyl.graphics.transitions.CrossfadeTransition"),
                        (G5.__super__ = To),
                        (G5.prototype = K(To.prototype, {
                            oldImg: null,
                            bitmap: null,
                            rect: null,
                            rectAlpha: null,
                            start: function () {
                                (this.active = !0), (this.bitmap = new y((a.screenWidth * a.SCALE) | 0, (a.screenHeight * a.SCALE) | 0)), this.bitmap.draw(this.oldImg), (this.rect = new ly());
                                var e = this.rect.get_graphics();
                                e.beginBitmapFill(this.bitmap),
                                    e.drawRect(0, 0, a.screenWidth * a.SCALE, a.screenHeight * a.SCALE),
                                    e.endFill(),
                                    a.engine.transitionLayer.addChild(this.rect),
                                    (this.rectAlpha = new zn()),
                                    this.rectAlpha.tween(1, 0, G.linear, (1e3 * this.duration) | 0).doOnComplete(N(this, this.stop));
                            },
                            update: function (e) {
                                this.rect.set_alpha(this.rectAlpha.value);
                            },
                            draw: function (e) {},
                            cleanup: function () {
                                (this.bitmap = this.oldImg = null), null != this.rect && (a.engine.transitionLayer.removeChild(this.rect), (this.rect = null));
                            },
                            __class__: G5,
                        }));
                    var I5 = function (e, t) {
                        null == t && (t = -16777216), To.call(this, e), (this.color = t), (this.direction = To.IN);
                    };
                    (v["com.stencyl.graphics.transitions.FadeInTransition"] = I5),
                        (I5.__name__ = "com.stencyl.graphics.transitions.FadeInTransition"),
                        (I5.__super__ = To),
                        (I5.prototype = K(To.prototype, {
                            color: null,
                            rect: null,
                            rectAlpha: null,
                            start: function () {
                                (this.active = !0), (this.rect = new ly());
                                var e = this.rect.get_graphics();
                                e.beginFill(this.color),
                                    e.drawRect(0, 0, a.screenWidth * a.SCALE + 4, a.screenHeight * a.SCALE + 4),
                                    e.endFill(),
                                    e.drawCircle(1, 1, 1),
                                    a.engine.transitionLayer.addChild(this.rect),
                                    (this.rectAlpha = new zn()),
                                    this.rectAlpha.tween(1, 0, G.linear, (1e3 * this.duration) | 0).doOnComplete(N(this, this.stop));
                            },
                            update: function (e) {
                                this.rect.set_alpha(this.rectAlpha.value);
                            },
                            cleanup: function () {
                                null != this.rect && (a.engine.transitionLayer.removeChild(this.rect), (this.rect = null));
                            },
                            __class__: I5,
                        }));
                    var H5 = function (e, t) {
                        null == t && (t = -16777216), To.call(this, e), (this.color = t), (this.direction = To.IN);
                    };
                    (v["com.stencyl.graphics.transitions.FadeOutTransition"] = H5),
                        (H5.__name__ = "com.stencyl.graphics.transitions.FadeOutTransition"),
                        (H5.__super__ = To),
                        (H5.prototype = K(To.prototype, {
                            color: null,
                            rect: null,
                            rectAlpha: null,
                            start: function () {
                                (this.active = !0), (this.rect = new ly()), this.rect.set_alpha(0);
                                var e = this.rect.get_graphics();
                                e.beginFill(this.color),
                                    e.drawRect(0, 0, a.screenWidth * a.SCALE + 4, a.screenHeight * a.SCALE + 4),
                                    e.endFill(),
                                    e.drawCircle(1, 1, 1),
                                    a.engine.transitionLayer.addChild(this.rect),
                                    (this.rectAlpha = new zn()),
                                    this.rectAlpha.tween(0, 1, G.linear, (1e3 * this.duration) | 0).doOnComplete(N(this, this.stop));
                            },
                            update: function (e) {
                                this.rect.set_alpha(this.rectAlpha.value);
                            },
                            cleanup: function () {
                                null != this.rect && (a.engine.transitionLayer.removeChild(this.rect), (this.rect = null));
                            },
                            __class__: H5,
                        }));
                    var d3 = function (e, t, n) {
                        To.call(this, e), (this.beginPixelSize = t), (this.endPixelSize = n);
                    };
                    (v["com.stencyl.graphics.transitions.PixelizeTransition"] = d3),
                        (d3.__name__ = "com.stencyl.graphics.transitions.PixelizeTransition"),
                        (d3.__super__ = To),
                        (d3.prototype = K(To.prototype, {
                            pixelSizeTween: null,
                            beginPixelSize: null,
                            endPixelSize: null,
                            srcImg: null,
                            displayImg: null,
                            displayBitmap: null,
                            c: null,
                            r: null,
                            xOverflow: null,
                            yOverflow: null,
                            pixelRect: null,
                            halfSize: null,
                            start: function () {
                                (this.active = !0),
                                    (this.srcImg = new y((a.screenWidth * a.SCALE) | 0, (a.screenHeight * a.SCALE) | 0)),
                                    (this.displayImg = new y((a.screenWidth * a.SCALE) | 0, (a.screenHeight * a.SCALE) | 0)),
                                    (this.pixelRect = new xe(0, 0, 0, 0)),
                                    a.engine.transitionLayer.addChild((this.displayBitmap = new Pc(this.displayImg))),
                                    (this.pixelSizeTween = new zn()),
                                    this.pixelSizeTween.tween(this.beginPixelSize, this.endPixelSize, G.linear, (1e3 * this.duration) | 0).doOnComplete(N(this, this.stop));
                            },
                            draw: function (e) {
                                if (1 == (e = 0 | this.pixelSizeTween.value)) this.displayImg.draw(a.engine.colorLayer), this.displayImg.draw(a.engine.master);
                                else {
                                    this.srcImg.draw(a.engine.colorLayer),
                                        this.srcImg.draw(a.engine.master),
                                        (this.c = Math.ceil((a.screenWidth * a.SCALE) / e)),
                                        (this.r = Math.ceil((a.screenHeight * a.SCALE) / e)),
                                        (this.xOverflow = (this.c * e - a.screenWidth * a.SCALE) | 0),
                                        (this.yOverflow = (this.r * e - a.screenHeight * a.SCALE) | 0),
                                        (this.pixelRect.x = -this.xOverflow / 2),
                                        (this.pixelRect.y = -this.yOverflow / 2),
                                        (this.pixelRect.height = this.pixelRect.width = e),
                                        (this.halfSize = (e / 2) | 0),
                                        this.displayImg.lock();
                                    for (var t = 0, n = this.r; t < n; ) {
                                        t++;
                                        for (var s = 0, r = this.c; s < r; ) {
                                            s++;
                                            for (
                                                var A = this.srcImg.getPixel32((this.pixelRect.x + this.halfSize) | 0, (this.pixelRect.y + this.halfSize) | 0), l = 0 | this.pixelRect.x, o = (this.pixelRect.x + this.pixelRect.width) | 0;
                                                l < o;

                                            )
                                                for (var i = l++, u = 0 | this.pixelRect.y, g = (this.pixelRect.y + this.pixelRect.height) | 0; u < g; ) {
                                                    var m = u++;
                                                    this.displayImg.setPixel32(i, m, A);
                                                }
                                            this.pixelRect.x += e;
                                        }
                                        (this.pixelRect.x = -this.xOverflow / 2), (this.pixelRect.y += e);
                                    }
                                    this.displayImg.unlock();
                                }
                            },
                            cleanup: function () {
                                null != this.displayBitmap && a.engine.transitionLayer.removeChild(this.displayBitmap);
                            },
                            __class__: d3,
                        }));
                    var g3 = function (e, t, n) {
                        To.call(this, t),
                            (this.color = n),
                            (this.direction = e),
                            e == To.IN
                                ? ((this.beginHeight = this.beginWidth = 0), (this.endWidth = (a.screenWidth * a.SCALE) | 0), (this.endHeight = (a.screenHeight * a.SCALE) | 0))
                                : e == To.OUT
                                ? ((this.beginWidth = (a.screenWidth * a.SCALE) | 0), (this.beginHeight = (a.screenHeight * a.SCALE) | 0), (this.endHeight = this.endWidth = 0))
                                : (this.complete = !0);
                    };
                    (v["com.stencyl.graphics.transitions.RectangleTransition"] = g3),
                        (g3.__name__ = "com.stencyl.graphics.transitions.RectangleTransition"),
                        (g3.__super__ = To),
                        (g3.prototype = K(To.prototype, {
                            rectangleImg: null,
                            graphics: null,
                            color: null,
                            size: null,
                            beginWidth: null,
                            endWidth: null,
                            beginHeight: null,
                            endHeight: null,
                            rect: null,
                            start: function () {
                                (this.active = !0),
                                    (this.size = new eL()),
                                    (this.rectangleImg = new y((a.screenWidth * a.SCALE) | 0, (a.screenHeight * a.SCALE) | 0)),
                                    (this.rect = new ly()),
                                    (this.graphics = this.rect.get_graphics()),
                                    this.direction == To.IN && (this.graphics.beginFill(this.color), this.graphics.drawRect(0, 0, a.screenWidth * a.SCALE, a.screenHeight * a.SCALE), this.graphics.endFill()),
                                    a.engine.transitionLayer.addChild(this.rect),
                                    (this.size.onComplete = N(this, this.stop)),
                                    this.size.tween(this.beginWidth, this.endWidth, this.beginHeight, this.endHeight, G.linear, (1e3 * this.duration) | 0);
                            },
                            draw: function (e) {
                                this.graphics.clear(),
                                    this.graphics.beginFill(this.color),
                                    this.graphics.drawRect(0, 0, a.screenWidth * a.SCALE, a.screenHeight * a.SCALE),
                                    this.graphics.endFill(),
                                    this.rectangleImg.draw(a.engine.colorLayer),
                                    this.rectangleImg.draw(a.engine.master),
                                    this.graphics.beginBitmapFill(this.rectangleImg),
                                    this.graphics.drawRect((a.screenWidth * a.SCALE - this.size.value1) / 2, (a.screenHeight * a.SCALE - this.size.value2) / 2, this.size.value1, this.size.value2),
                                    this.graphics.endFill();
                            },
                            cleanup: function () {
                                null != this.rect && (a.engine.transitionLayer.removeChild(this.rect), (this.rect = null));
                            },
                            __class__: g3,
                        }));
                    var rJ = function (e, t, n, s) {
                        To.call(this, n),
                            (this.sceneSpr = e),
                            (this.sceneCol = t),
                            (this.oldSceneMatrix = new uh()),
                            (this.newSceneMatrix = new uh()),
                            (this.ty = this.tx = 0),
                            s == rJ.SLIDE_UP
                                ? ((this.newSceneMatrix.ty = -a.screenHeight * a.SCALE), (this.ty = a.screenHeight * a.SCALE))
                                : s == rJ.SLIDE_DOWN
                                ? ((this.newSceneMatrix.ty = a.screenHeight * a.SCALE), (this.ty = -a.screenHeight * a.SCALE))
                                : s == rJ.SLIDE_LEFT
                                ? ((this.newSceneMatrix.tx = -a.screenWidth * a.SCALE), (this.tx = a.screenWidth * a.SCALE))
                                : s == rJ.SLIDE_RIGHT
                                ? ((this.newSceneMatrix.tx = a.screenWidth * a.SCALE), (this.tx = -a.screenWidth * a.SCALE))
                                : (this.complete = !0);
                    };
                    (v["com.stencyl.graphics.transitions.SlideTransition"] = rJ),
                        (rJ.__name__ = "com.stencyl.graphics.transitions.SlideTransition"),
                        (rJ.__super__ = To),
                        (rJ.prototype = K(To.prototype, {
                            sceneSpr: null,
                            sceneCol: null,
                            oldBitmap: null,
                            newBitmap: null,
                            drawBitmap: null,
                            graphics: null,
                            oldSceneMatrix: null,
                            newSceneMatrix: null,
                            osm_xy: null,
                            nsm_xy: null,
                            tx: null,
                            ty: null,
                            rect: null,
                            start: function () {
                                (this.active = !0),
                                    (this.oldBitmap = new y((a.screenWidth * a.SCALE) | 0, (a.screenHeight * a.SCALE) | 0)),
                                    this.oldBitmap.draw(this.sceneCol),
                                    this.oldBitmap.draw(this.sceneSpr),
                                    (this.newBitmap = new y((a.screenWidth * a.SCALE) | 0, (a.screenHeight * a.SCALE) | 0)),
                                    (this.drawBitmap = new y((a.screenWidth * a.SCALE) | 0, (a.screenHeight * a.SCALE) | 0)),
                                    (this.rect = new ly()),
                                    (this.graphics = this.rect.get_graphics()),
                                    this.graphics.beginBitmapFill(this.oldBitmap),
                                    this.graphics.drawRect(0, 0, a.screenWidth * a.SCALE, a.screenHeight * a.SCALE),
                                    this.graphics.endFill(),
                                    a.engine.transitionLayer.addChild(this.rect),
                                    (this.osm_xy = new eL()),
                                    (this.nsm_xy = new eL()),
                                    this.osm_xy.tween(this.oldSceneMatrix.tx, this.tx, this.oldSceneMatrix.ty, this.ty, G.linear, (1e3 * this.duration) | 0),
                                    this.nsm_xy.tween(this.newSceneMatrix.tx, 0, this.newSceneMatrix.ty, 0, G.linear, (1e3 * this.duration) | 0),
                                    this.nsm_xy.doOnComplete(N(this, this.stop));
                            },
                            update: function (e) {
                                (this.oldSceneMatrix.tx = this.osm_xy.value1), (this.oldSceneMatrix.ty = this.osm_xy.value2), (this.newSceneMatrix.tx = this.nsm_xy.value1), (this.newSceneMatrix.ty = this.nsm_xy.value2);
                            },
                            draw: function (e) {
                                this.graphics.clear(),
                                    this.newBitmap.draw(this.sceneCol),
                                    this.newBitmap.draw(this.sceneSpr),
                                    this.drawBitmap.draw(this.newBitmap, this.newSceneMatrix),
                                    this.drawBitmap.draw(this.oldBitmap, this.oldSceneMatrix),
                                    this.graphics.beginBitmapFill(this.drawBitmap),
                                    this.graphics.drawRect(0, 0, a.screenWidth * a.SCALE, a.screenHeight * a.SCALE),
                                    this.graphics.endFill();
                            },
                            cleanup: function () {
                                (this.sceneSpr = null), null != this.rect && (a.engine.transitionLayer.removeChild(this.rect), (this.rect = null));
                            },
                            __class__: rJ,
                        }));
                    var CU = function () {};
                    (v["com.stencyl.io.AbstractReader"] = CU), (CU.__name__ = "com.stencyl.io.AbstractReader"), (CU.__isInterface__ = !0), (CU.prototype = { accepts: null, read: null, __class__: CU });
                    var z5 = function () {};
                    (v["com.stencyl.io.ActorTypeReader"] = z5),
                        (z5.__name__ = "com.stencyl.io.ActorTypeReader"),
                        (z5.__interfaces__ = [CU]),
                        (z5.prototype = {
                            accepts: function (e) {
                                return e == qi.MBS_ACTOR_TYPE.getName();
                            },
                            read: function (t) {
                                var n = t.getId(),
                                    a = t.getAtlasID(),
                                    s = t.getName(),
                                    r = new vW();
                                switch (((r.fixedRotation = t.getFixedRotation()), t.getBodyType())) {
                                    case 0:
                                        var A = Ig.b2_staticBody;
                                        break;
                                    case 1:
                                        A = Ig.b2_kinematicBody;
                                        break;
                                    default:
                                        A = Ig.b2_dynamicBody;
                                }
                                (r.type = A),
                                    (r.linearDamping = t.getLinearDamping()),
                                    (r.angularDamping = t.getAngularDamping()),
                                    (r.friction = t.getFriction()),
                                    (r.bounciness = t.getRestitution()),
                                    (r.mass = t.getMass()),
                                    (r.aMass = t.getInertia()),
                                    (r.active = !0),
                                    (r.bullet = !1),
                                    (r.allowSleep = !1),
                                    (r.awake = !0),
                                    (r.ignoreGravity = t.getIgnoreGravity()),
                                    (r.bullet = t.getContinuous()),
                                    (A = t.getSprite());
                                var l = t.getGroupID(),
                                    o = t.getPhysicsMode(),
                                    i = t.getAutoScale(),
                                    u = t.getPausable(),
                                    g = r.ignoreGravity || r.type == Ig.b2_staticBody || r.type == Ig.b2_kinematicBody,
                                    m = oy.readBehaviors(t.getSnippets()),
                                    d = t.getEventSnippetID();
                                return -1 < d && ((t = new l3(d, new p())), null != e[(d = "" + d)] ? m.setReserved(d, t) : (m.h[d] = t)), new TP(n, a, s, l, A, m, r, o, i, u, g);
                            },
                            __class__: z5,
                        });
                    var oy = function () {};
                    (v["com.stencyl.io.AttributeValues"] = oy),
                        (oy.__name__ = "com.stencyl.io.AttributeValues"),
                        (oy.readBehaviors = function (t) {
                            for (var n = new p(), a = 0, s = t.length(); a < s; ) {
                                a++;
                                var r = t.getNextObject();
                                if (r.getEnabled()) {
                                    var A = r.getId();
                                    (r = oy.readBehaviorProperties(r.getProperties())), (r = new l3(A, r)), null != e[(A = "" + A)] ? n.setReserved(A, r) : (n.h[A] = r);
                                }
                            }
                            return n;
                        }),
                        (oy.readBehaviorProperties = function (t) {
                            for (var n = new p(), a = 0, s = t.length(); a < s; ) {
                                a++;
                                var r = t.getNextObject(),
                                    A = r.getId(),
                                    l = r.getType();
                                (A = "" + A), (r = oy.readAttribute(l, r)), null != e[A] ? n.setReserved(A, r) : (n.h[A] = r);
                            }
                            return n;
                        }),
                        (oy.readAttribute = function (e, t) {
                            switch (e) {
                                case "list":
                                    return oy.readList(t.getValue());
                                case "map":
                                    return oy.readMap(t.getValue());
                                default:
                                    return t.getValue();
                            }
                        }),
                        (oy.readAttributeDef = function (e, t) {
                            switch (e) {
                                case "list":
                                    return oy.readList(t.getDefaultValue());
                                case "map":
                                    return oy.readMap(t.getDefaultValue());
                                default:
                                    return t.getDefaultValue();
                            }
                        }),
                        (oy.readList = function (e) {
                            if (null == e) return null;
                            for (var t = [], n = 0, a = e.length(); n < a; ) {
                                t[n++] = e.readObject();
                            }
                            return t;
                        }),
                        (oy.readMap = function (t) {
                            if (null == t) return null;
                            for (var n = new p(), a = 0, s = t.length(); a < s; ) {
                                a++;
                                var r = t.getNextObject(),
                                    A = r.getKey();
                                if ((r = r.getValue()) instanceof gV) {
                                    for (var l = [], o = 0, i = r.length(); o < i; ) o++, l.push(r.readObject());
                                    r = l;
                                } else r instanceof Ui && (r = oy.readMap(r));
                                null != e[A] ? n.setReserved(A, r) : (n.h[A] = r);
                            }
                            return n;
                        });
                    var w5 = function () {};
                    (v["com.stencyl.io.BackgroundReader"] = w5),
                        (w5.__name__ = "com.stencyl.io.BackgroundReader"),
                        (w5.__interfaces__ = [CU]),
                        (w5.prototype = {
                            accepts: function (e) {
                                return e == Cm.MBS_BACKGROUND.getName();
                            },
                            read: function (e) {
                                var t = e.getId(),
                                    n = e.getAtlasID(),
                                    a = e.getName(),
                                    s = e.getXVelocity(),
                                    r = e.getYVelocity(),
                                    A = e.getXParallaxFactor(),
                                    l = e.getYParallaxFactor(),
                                    o = [];
                                if (0 < e.getNumFrames()) for (var i = e.getDurations(), u = 0, g = i.length(); u < g; ) u++, o.push(i.readInt());
                                return (e = e.getRepeats()), 0 != s || 0 != r ? new hV(t, n, a, o, A, l, e, s, r) : new uQ(t, n, a, o, A, l, e);
                            },
                            __class__: w5,
                        });
                    var zW = function () {};
                    (v["com.stencyl.io.BehaviorReader"] = zW),
                        (zW.__name__ = "com.stencyl.io.BehaviorReader"),
                        (zW.readBehavior = function (t) {
                            for (var n = t.getId(), a = t.getName(), s = t.getClassname(), r = t.getAttachedEvent(), A = new p(), l = t.getType(), o = 0, i = (t = t.getAttributes()).length(); o < i; ) {
                                o++;
                                var u = t.getNextObject(),
                                    g = "" + u.getId();
                                (u = zW.readAttribute(u, r)), null != e[g] ? A.setReserved(g, u) : (A.h[g] = u);
                            }
                            return new C5(null, null, n, a, s, !0, !0, A, l, r);
                        }),
                        (zW.readAttribute = function (e, t) {
                            var n = e.getId(),
                                a = e.getName(),
                                s = e.getFullname();
                            t = t || e.getHidden();
                            var r = e.getType();
                            return (e = oy.readAttributeDef(r, e)), new AW(n, a, s, e, r, null, t);
                        }),
                        (zW.prototype = { __class__: zW });
                    var B5 = function () {};
                    (v["com.stencyl.io.FontReader"] = B5),
                        (B5.__name__ = "com.stencyl.io.FontReader"),
                        (B5.__interfaces__ = [CU]),
                        (B5.prototype = {
                            accepts: function (e) {
                                return e == Ut.MBS_FONT.getName();
                            },
                            read: function (e) {
                                return new dL(e.getId(), e.getAtlasID(), e.getName(), !1);
                            },
                            __class__: B5,
                        });
                    var uz = function () {};
                    (v["com.stencyl.io.ShapeReader"] = uz),
                        (uz.__name__ = "com.stencyl.io.ShapeReader"),
                        (uz.readPoint = function (e) {
                            return new wf(e.getX(), e.getY());
                        }),
                        (uz.readPoints = function (e) {
                            for (var t = Array(e.length()), n = 0, a = e.length(); n < a; ) {
                                var s = n++,
                                    r = e.getNextObject();
                                t[s] = new wf(r.getX(), r.getY());
                            }
                            return t;
                        }),
                        (uz.createCircle = function (e, t, n, s, r) {
                            null == r && (r = -1), null == s && (s = -1);
                            var A = 2 * e,
                                l = new Rw();
                            return (l.m_radius = a.toPhysicalUnits(e)), (l.m_p.x = a.toPhysicalUnits(t - (s - A) / 2)), (l.m_p.y = a.toPhysicalUnits(n - (r - A) / 2)), l;
                        }),
                        (uz.createPolygon = function (e, t, n, s) {
                            null == s && (s = 0), null == n && (n = 0);
                            var r = [],
                                A = t.length,
                                l = 0;
                            if (((n = (-n / 2) | 0), (s = (-s / 2) | 0), "MbsPolygon" == e || "MbsPolyRegion" == e)) {
                                for (l = 0; l < A; ) {
                                    var o = t[l];
                                    (e = a.toPhysicalUnits(o.x + n)), (o = a.toPhysicalUnits(o.y + s)), (r[l] = new td(e, o)), ++l;
                                }
                                return uz.EnsureCorrectVertexDirection(r), ct.asArray(r, r.length);
                            }
                            if ("MbsWireframe" == e) {
                                for (; l < A; ) (n = t[l]), r.push(new td(a.toPhysicalUnits(n.x), a.toPhysicalUnits(n.y))), ++l;
                                for (t = uz.getWidth(r), A = uz.getHeight(r), l = [], n = 0, s = r.length + 1; n < s; ) {
                                    var i = n++;
                                    (e = new oQ(r[i % r.length], r[(i + 1) % r.length])),
                                        l.push(e),
                                        (e.m_hasVertex0 = !0),
                                        (e.m_hasVertex3 = !0),
                                        (o = r[(i - 1) % r.length]),
                                        (i = r[(i + 2) % r.length]),
                                        null == o && (o = r[r.length - 1]),
                                        null == i && (i = r[0]),
                                        (e.m_v0 = o),
                                        (e.m_v3 = i);
                                }
                                return ((r = new wi()).h[0] = l), (r.h[1] = t), (r.h[2] = A), r;
                            }
                            return null;
                        }),
                        (uz.CheckVertexDirection = function (e) {
                            if (2 < e.length) {
                                for (var t = 0, n = 0; 0 == t && n < e.length - 2; ) (t = e[n].winding(e[n + 1], e[n + 2])), ++n;
                                if (0 > t) return !1;
                            }
                            return !0;
                        }),
                        (uz.EnsureCorrectVertexDirection = function (e) {
                            return !!uz.CheckVertexDirection(e) || (uz.ReverseVertices(e), !1);
                        }),
                        (uz.ReverseVertices = function (e) {
                            for (var t, n = 0, a = e.length - 1; a > n; ) (t = e[n].x), (e[n].x = e[a].x), (e[a].x = t), (t = e[n].y), (e[n].y = e[a].y), (e[a].y = t), ++n, --a;
                        }),
                        (uz.getWidth = function (e) {
                            for (var t = 1e7, n = 0, a = 0; a < e.length; ) {
                                var s = e[a];
                                ++a, (t = Math.min(t, s.x)), (n = Math.max(n, s.x));
                            }
                            return n - t;
                        }),
                        (uz.getHeight = function (e) {
                            for (var t = 1e7, n = 0, a = 0; a < e.length; ) {
                                var s = e[a];
                                ++a, (t = Math.min(t, s.y)), (n = Math.max(n, s.y));
                            }
                            return n - t;
                        });
                    var x5 = function () {};
                    (v["com.stencyl.io.SoundReader"] = x5),
                        (x5.__name__ = "com.stencyl.io.SoundReader"),
                        (x5.__interfaces__ = [CU]),
                        (x5.prototype = {
                            accepts: function (e) {
                                return e == qu.MBS_MUSIC.getName();
                            },
                            read: function (e) {
                                var t = e.getStream(),
                                    n = e.getLoop(),
                                    a = e.getPan(),
                                    s = e.getVolume(),
                                    r = e.getType();
                                return new OV(e.getId(), e.getName(), t, n, a, s, r, e.getAtlasID());
                            },
                            __class__: x5,
                        });
                    var A5 = function () {};
                    (v["com.stencyl.io.SpriteReader"] = A5),
                        (A5.__name__ = "com.stencyl.io.SpriteReader"),
                        (A5.__interfaces__ = [CU]),
                        (A5.prototype = {
                            accepts: function (e) {
                                return e == dv.MBS_SPRITE.getName();
                            },
                            read: function (e) {
                                var t = e.getDefaultAnimation(),
                                    n = e.getReadableImages();
                                (t = new yW(e.getId(), e.getAtlasID(), e.getName(), t, n)), (n = 0);
                                for (var a = (e = e.getAnimations()).length(); n < a; ) {
                                    n++;
                                    var s = e.getNextObject();
                                    (s = this.readAnimation(s, t)), (t.animations.h[s.animID] = s);
                                }
                                return t;
                            },
                            readAnimation: function (e, t) {
                                for (
                                    var n = e.getId(),
                                        a = e.getName(),
                                        s = e.getWidth(),
                                        r = e.getHeight(),
                                        A = e.getOriginX(),
                                        l = e.getOriginY(),
                                        o = e.getNumFrames(),
                                        i = e.getAcross(),
                                        u = e.getDown(),
                                        g = this.readSimpleShapes(e, (s / i) | 0, (r / u) | 0),
                                        m = this.readShapes(e, (s / i) | 0, (r / u) | 0),
                                        d = e.getLoop(),
                                        c = e.getSync(),
                                        p = [],
                                        h = 0,
                                        f = (e = e.getDurations()).length();
                                    h < f;

                                ) {
                                    var y = h++;
                                    (p[y] = e.readInt()), (p[y] = Math.floor(p[y] / 10)), (p[y] *= 10);
                                }
                                return new YD(n, a, t, g, m, d, c, s, r, A, l, p, o, i, u);
                            },
                            readSimpleShapes: function (e, t, n) {
                                (t = new wi()), (n = 0);
                                for (var a = (e = e.getShapes()).length(); n < a; ) {
                                    n++;
                                    var s = e.getNextObject(),
                                        r = s.getId(),
                                        A = s.getGroupID(),
                                        l = s.getSensor();
                                    if ((s = s.getShape()) instanceof Hw && 4 == (s = s.getPoints()).length()) {
                                        for (var o = s.getNextObject(), i = 0, u = 1e7, g = 1e7, m = 0, d = 0, c = 0 | o.getX(), p = 0 | o.getY(); i < s.length(); )
                                            (u = 0 | Math.min(u, o.getX())), (g = 0 | Math.min(g, o.getY())), (m = 0 | Math.max(m, o.getX())), (d = 0 | Math.max(d, o.getY())), ++i < s.length() && (o = s.getNextObject());
                                        (A = new py(m - u, d - g, c, p, !l, A)), (t.h[r] = A);
                                    }
                                }
                                return t;
                            },
                            readShapes: function (e, t, n) {
                                for (var a = new wi(), s = 0, r = (e = e.getShapes()).length(); s < r; ) {
                                    s++;
                                    var A = e.getNextObject(),
                                        l = A.getId();
                                    A.getGroupID();
                                    var o = A.getSensor(),
                                        i = A.getShape();
                                    if (i instanceof Oz) i = uz.createCircle(i.getRadius(), i.getPosition().getX(), i.getPosition().getY(), t, n);
                                    else {
                                        var u = i;
                                        i = uz.createPolygon(i.getMbsType().getName(), uz.readPoints(u.getPoints()).slice(0), t, n);
                                    }
                                    ((u = new iL()).shape = i), (u.density = A.getDensity()), (u.friction = A.getFriction()), (u.restitution = A.getRestitution()), (u.isSensor = o), (u.groupID = A.getGroupID()), (a.h[l] = u);
                                }
                                return a;
                            },
                            __class__: A5,
                        });
                    var y5 = function () {};
                    (v["com.stencyl.io.TilesetReader"] = y5),
                        (y5.__name__ = "com.stencyl.io.TilesetReader"),
                        (y5.__interfaces__ = [CU]),
                        (y5.prototype = {
                            accepts: function (e) {
                                return e == iu.MBS_TILESET.getName();
                 